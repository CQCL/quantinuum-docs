Search.setIndex({"docnames": ["api/extensions/inquanto-cutensornet_api", "api/extensions/inquanto-nexus_api", "api/extensions/inquanto-nglview_api", "api/extensions/inquanto-phayes", "api/extensions/inquanto-pyscf_api", "api/inquanto-ext_api_intro", "api/inquanto/algorithms", "api/inquanto/ansatz", "api/inquanto/computables", "api/inquanto/core", "api/inquanto/embeddings", "api/inquanto/express", "api/inquanto/geometry", "api/inquanto/mappings", "api/inquanto/minimizers", "api/inquanto/operators", "api/inquanto/protocols", "api/inquanto/spaces", "api/inquanto/states", "api/inquanto/symmetry", "api/inquanto_api_intro", "extensions/cosmo", "extensions/embedding", "extensions/extensions-overview", "extensions/extensions_examples", "extensions/inquanto-nexus", "extensions/inquanto-nglview", "extensions/inquanto-phayes", "extensions/inquanto-pyscf", "extensions/periodic", "extensions/qmmm", "index", "introduction/installation", "introduction/overview", "introduction/quickstart", "introduction/system_requirements", "introduction/troubleshooting", "manual/algorithms/algorithms_adapt", "manual/algorithms/algorithms_qse", "manual/algorithms/algorithms_sceom", "manual/algorithms/algorithms_vqd", "manual/algorithms/algorithms_vqe", "manual/algorithms/non_variational_overview", "manual/algorithms/qpe_canonical", "manual/algorithms/qpe_iterative", "manual/algorithms/te_vqs", "manual/algorithms/time_evolution_overview", "manual/algorithms/variational_overview", "manual/algorithms_overview", "manual/ansatzae_overview", "manual/ansatze/basis_rotation", "manual/ansatze/chemically_aware", "manual/ansatze/circuit_ansatz", "manual/ansatze/composed_ansatz", "manual/ansatze/fermion_state_exp", "manual/ansatze/hea", "manual/ansatze/multi_configurational", "manual/ansatze/trotter_ansatz", "manual/ansatze/ucc_family", "manual/computables/basic_usage", "manual/computables/composite_computables", "manual/computables/custom_computables", "manual/computables/evaluating_w_protocols", "manual/computables/greens_function", "manual/computables/overlap_matrix", "manual/computables/primitives", "manual/computables/rdms", "manual/computables_overview", "manual/dmet", "manual/errmit", "manual/express", "manual/geometry", "manual/howto", "manual/minimizers", "manual/protocols/derivative", "manual/protocols/expval", "manual/protocols/other", "manual/protocols/overlap", "manual/protocols/overlap_squared", "manual/protocols/phase_est", "manual/protocols/resource_estimation", "manual/protocols_overview", "manual/spaces", "manual/symmetry", "misc/bibliography", "misc/changelog", "misc/cite", "misc/contact", "misc/licence", "misc/opensource", "tutorials/InQ_htut_Aer_H2", "tutorials/InQ_htut_qsys_H2", "tutorials/InQ_htut_qsys_l+r", "tutorials/InQ_htut_qsys_qse", "tutorials/InQ_tut_Nexus_1", "tutorials/InQ_tut_dmet", "tutorials/InQ_tut_fe4n2_1", "tutorials/InQ_tut_fe4n2_2", "tutorials/InQ_tut_fe4n2_3", "tutorials/InQ_tut_nevpt2_AC0", "tutorials/InQ_tut_viz", "tutorials/InQ_tut_vqd", "tutorials/InQ_tut_vqe_1", "tutorials/InQ_tut_vqe_2", "tutorials/InQ_tut_wft_dft", "tutorials/InQ_tut_wft_dft_2", "tutorials/backends_overview", "tutorials/examples_overview", "tutorials/tutorial_overview"], "filenames": ["api/extensions/inquanto-cutensornet_api.rst", "api/extensions/inquanto-nexus_api.rst", "api/extensions/inquanto-nglview_api.rst", "api/extensions/inquanto-phayes.rst", "api/extensions/inquanto-pyscf_api.rst", "api/inquanto-ext_api_intro.rst", "api/inquanto/algorithms.rst", "api/inquanto/ansatz.rst", "api/inquanto/computables.rst", "api/inquanto/core.rst", "api/inquanto/embeddings.rst", "api/inquanto/express.rst", "api/inquanto/geometry.rst", "api/inquanto/mappings.rst", "api/inquanto/minimizers.rst", "api/inquanto/operators.rst", "api/inquanto/protocols.rst", "api/inquanto/spaces.rst", "api/inquanto/states.rst", "api/inquanto/symmetry.rst", "api/inquanto_api_intro.rst", "extensions/cosmo.rst", "extensions/embedding.rst", "extensions/extensions-overview.rst", "extensions/extensions_examples.rst", "extensions/inquanto-nexus.rst", "extensions/inquanto-nglview.rst", "extensions/inquanto-phayes.rst", "extensions/inquanto-pyscf.rst", "extensions/periodic.rst", "extensions/qmmm.rst", "index.rst", "introduction/installation.rst", "introduction/overview.rst", "introduction/quickstart.rst", "introduction/system_requirements.rst", "introduction/troubleshooting.rst", "manual/algorithms/algorithms_adapt.rst", "manual/algorithms/algorithms_qse.rst", "manual/algorithms/algorithms_sceom.rst", "manual/algorithms/algorithms_vqd.rst", "manual/algorithms/algorithms_vqe.rst", "manual/algorithms/non_variational_overview.rst", "manual/algorithms/qpe_canonical.rst", "manual/algorithms/qpe_iterative.rst", "manual/algorithms/te_vqs.rst", "manual/algorithms/time_evolution_overview.rst", "manual/algorithms/variational_overview.rst", "manual/algorithms_overview.rst", "manual/ansatzae_overview.rst", "manual/ansatze/basis_rotation.rst", "manual/ansatze/chemically_aware.rst", "manual/ansatze/circuit_ansatz.rst", "manual/ansatze/composed_ansatz.rst", "manual/ansatze/fermion_state_exp.rst", "manual/ansatze/hea.rst", "manual/ansatze/multi_configurational.rst", "manual/ansatze/trotter_ansatz.rst", "manual/ansatze/ucc_family.rst", "manual/computables/basic_usage.rst", "manual/computables/composite_computables.rst", "manual/computables/custom_computables.rst", "manual/computables/evaluating_w_protocols.rst", "manual/computables/greens_function.rst", "manual/computables/overlap_matrix.rst", "manual/computables/primitives.rst", "manual/computables/rdms.rst", "manual/computables_overview.rst", "manual/dmet.rst", "manual/errmit.rst", "manual/express.rst", "manual/geometry.rst", "manual/howto.rst", "manual/minimizers.rst", "manual/protocols/derivative.rst", "manual/protocols/expval.rst", "manual/protocols/other.rst", "manual/protocols/overlap.rst", "manual/protocols/overlap_squared.rst", "manual/protocols/phase_est.rst", "manual/protocols/resource_estimation.rst", "manual/protocols_overview.rst", "manual/spaces.rst", "manual/symmetry.rst", "misc/bibliography.rst", "misc/changelog.rst", "misc/cite.rst", "misc/contact.rst", "misc/licence.rst", "misc/opensource.rst", "tutorials/InQ_htut_Aer_H2.ipynb", "tutorials/InQ_htut_qsys_H2.ipynb", "tutorials/InQ_htut_qsys_l+r.ipynb", "tutorials/InQ_htut_qsys_qse.ipynb", "tutorials/InQ_tut_Nexus_1.ipynb", "tutorials/InQ_tut_dmet.ipynb", "tutorials/InQ_tut_fe4n2_1.ipynb", "tutorials/InQ_tut_fe4n2_2.ipynb", "tutorials/InQ_tut_fe4n2_3.ipynb", "tutorials/InQ_tut_nevpt2_AC0.ipynb", "tutorials/InQ_tut_viz.ipynb", "tutorials/InQ_tut_vqd.ipynb", "tutorials/InQ_tut_vqe_1.ipynb", "tutorials/InQ_tut_vqe_2.ipynb", "tutorials/InQ_tut_wft_dft.ipynb", "tutorials/InQ_tut_wft_dft_2.ipynb", "tutorials/backends_overview.rst", "tutorials/examples_overview.rst", "tutorials/tutorial_overview.rst"], "titles": ["inquanto-cutensornet", "inquanto-nexus", "inquanto-nglview", "inquanto-phayes", "inquanto-pyscf", "InQuanto-Extensions API Reference", "inquanto.algorithms", "inquanto.ansatzes", "inquanto.computables", "inquanto.core", "inquanto.embeddings", "inquanto.express", "inquanto.geometries", "inquanto.mappings", "inquanto.minimizers", "inquanto.operators", "inquanto.protocols", "inquanto.spaces", "inquanto.states", "inquanto.symmetry", "InQuanto API Reference", "COSMO", "Hamiltonians for Embedding methods", "InQuanto-Extensions", "Overview of InQuanto extensions examples", "InQuanto-Nexus", "InQuanto-NGLView", "InQuanto-Phayes", "InQuanto-PySCF", "Periodic systems", "QM/MM", "InQuanto User Guide", "Installing InQuanto", "What is InQuanto?", "Quick-start guide", "System Requirements", "Troubleshooting", "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AlgorithmAdaptVQE</span></code> and <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AlgorithmIQEB</span></code>", "Quantum Subspace Expansion <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AlgorithmQSE</span></code>", "Quantum Self Consistent Equation of Motion <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AlgorithmSCEOM</span></code>", "Variational Quantum Deflation <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AlgorithmVQD</span></code>", "Variational Quantum Eigensolver <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AlgorithmVQE</span></code>", "Non-variational and Phase Estimation algorithms", "Canonical Quantum Phase Estimation <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AlgorithmDeterministicQPE</span></code>", "Iterative Phase Estimation Algorithms", "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AlgorithmVQS</span></code>, <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AlgorithmMcLachlanRealTime</span></code> and <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AlgorithmMcLachlanImagTime</span></code>", "Time evolution algorithms", "Variational Algorithms", "Algorithms", "Ansatzes", "Real Basis Rotation Ansatzes", "Chemically Aware Ansatz", "Circuit Ansatz", "Composed Ansatz", "Fermionic Exponentiated Ansatz", "Hardware Efficient Ansatz", "Multiconfiguration States Using Givens Rotations", "Trotter Ansatz", "The UCC Family", "Basic Usage and Composability", "Composite Computables", "Custom Computables &amp; Partial Evaluations", "Evaluating Computables with Protocols", "Krylov subspace &amp; Green\u2019s functions", "Overlap Matrices &amp; Non-Orthogonal Subspaces", "Primitive Computables", "Reduced Density Matrices", "Computables", "Density Matrix Embedding Theory", "Noise mitigation", "Express", "Geometry", "How to use InQuanto", "Classical Minimizers", "Protocols for derivatives", "Protocols for expectation values", "Other averaging protocols", "Protocols for overlaps", "Protocols for overlap squared", "Protocols for Phase Estimation", "Resource estimation", "Protocols", "Spaces, Operators, and States", "Symmetry", "Bibliography", "Release Notes", "How to cite InQuanto", "Contact Support", "Software Licence", "Open-source Attribution", "Running on the Aer simulator", "Running on Quantinuum Hardware", "Quantinuum Systems -  Launching circuits and retrieving results", "Quantinuum Systems -  Quantum Subspace Expansion", "<b>Tutorial: InQuanto + qnexus</b>", "Tackling larger systems with fragmentation", "Fe4N2 - 1 - system construction with AVAS and CASSCF", "Fe4N2 - 2 - circuit construction with ADAPT-VQE", "Fe4N2 - 3 - calculations on Quantinuum hardware", "NEVPT2 and AC0 energy corrections", "Visualization with inquanto-nglview", "Variational Quantum Deflation for excited states", "A basic VQE simulation", "Extended VQE", "Projection-based embedding", "Projection-based embedding with energy corrections", "Backends Overview", "Overview of examples", "Tutorials"], "terms": {"extens": [0, 1, 2, 3, 8, 10, 11, 12, 15, 16, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 43, 44, 45, 50, 56, 58, 62, 63, 64, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "class": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 34, 37, 38, 39, 40, 41, 44, 45, 46, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 81, 83, 85, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 104, 105, 107], "cutensornetprotocol": [0, 5, 23, 85], "protocol": [0, 3, 6, 8, 11, 20, 22, 27, 28, 34, 37, 38, 39, 40, 41, 43, 44, 45, 48, 63, 64, 66, 67, 69, 72, 73, 80, 85, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 105], "pytket": [0, 3, 6, 7, 8, 11, 15, 16, 22, 28, 33, 34, 37, 38, 39, 40, 41, 43, 44, 45, 48, 50, 51, 52, 55, 56, 57, 58, 62, 63, 64, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106], "packag": [0, 3, 10, 15, 22, 23, 24, 26, 27, 28, 31, 32, 34, 35, 36, 69, 72, 73, 85, 89, 99, 100, 102, 103, 104], "tensor": [0, 4, 6, 8, 15, 16, 17, 23, 24, 28, 45, 74, 82, 84, 85], "network": [0, 23, 24, 85], "simul": [0, 4, 6, 8, 10, 11, 15, 16, 17, 18, 19, 22, 23, 24, 28, 29, 33, 41, 45, 46, 48, 49, 62, 67, 68, 69, 70, 72, 79, 81, 82, 83, 84, 85, 89, 92, 93, 95, 97, 98, 99, 101, 103, 105, 106, 107, 108], "dump": [0, 4, 5, 8, 15, 16, 17, 18, 20, 85, 90, 92, 93, 96, 97, 98], "file": [0, 2, 4, 8, 9, 11, 12, 15, 16, 17, 18, 24, 36, 71, 72, 82, 85, 89, 101, 102, 107, 108], "save": [0, 4, 11, 12, 16, 17, 81, 85, 103, 108], "object": [0, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 26, 27, 33, 34, 38, 39, 40, 41, 44, 45, 48, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 69, 71, 72, 73, 75, 79, 80, 81, 82, 83, 85, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 105, 107], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "pickl": [0, 8, 15, 16, 85, 89, 92, 93, 96, 97, 98, 108], "paramet": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27, 28, 34, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 49, 50, 53, 55, 56, 58, 59, 62, 63, 64, 66, 68, 69, 72, 73, 74, 75, 79, 80, 81, 82, 83, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105], "union": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 88], "str": [0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 70, 90, 91, 98], "binaryio": [0, 16], "The": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 25, 26, 27, 28, 29, 30, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108], "path": [0, 8, 16, 98], "write": [0, 4, 8, 12, 15, 16, 20, 54, 57, 71, 77, 89, 93, 101], "data": [0, 6, 7, 8, 9, 11, 15, 16, 17, 18, 20, 28, 34, 41, 48, 59, 62, 65, 67, 68, 70, 72, 80, 89, 92, 94, 97, 98, 100, 102, 103, 107], "return": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26, 28, 30, 41, 43, 44, 56, 58, 59, 61, 62, 65, 68, 70, 72, 73, 79, 80, 81, 82, 83, 90, 91, 93, 94, 95, 97, 98, 100, 102, 103], "type": [0, 2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 28, 29, 41, 48, 49, 61, 62, 64, 65, 66, 68, 69, 70, 73, 77, 82, 85, 90, 93, 94, 99, 100, 102, 105], "none": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 28, 29, 39, 68, 79, 82, 92, 96, 99, 104, 105], "byte": [0, 7, 8, 16, 18], "": [0, 3, 4, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 45, 49, 50, 52, 56, 58, 60, 62, 64, 65, 66, 67, 68, 70, 72, 73, 79, 80, 82, 83, 84, 85, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107], "state": [0, 3, 4, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 19, 20, 22, 25, 27, 28, 29, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 53, 54, 55, 57, 58, 59, 62, 63, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 107, 108], "get_evalu": [0, 5, 16, 20, 62, 63, 64, 66, 73, 74, 75, 77, 78, 90, 93, 99, 105], "allow_parti": [0, 16, 62], "true": [0, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26, 27, 28, 30, 34, 36, 45, 50, 59, 62, 64, 66, 68, 70, 73, 74, 75, 77, 79, 81, 82, 83, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103], "an": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108], "evalu": [0, 6, 7, 8, 9, 10, 14, 15, 16, 18, 20, 33, 34, 37, 38, 39, 40, 41, 44, 45, 49, 59, 63, 64, 65, 66, 67, 69, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 90, 91, 92, 93, 94, 99, 101, 105, 107, 108], "function": [0, 3, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 26, 28, 31, 38, 40, 41, 47, 48, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108], "quantum": [0, 4, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 21, 23, 27, 28, 29, 30, 31, 33, 34, 42, 44, 45, 46, 47, 48, 49, 50, 55, 56, 58, 59, 62, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 92, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108], "comput": [0, 4, 6, 7, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 28, 29, 31, 33, 34, 36, 38, 39, 40, 41, 43, 44, 45, 47, 48, 50, 54, 56, 59, 63, 64, 66, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108], "thi": [0, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "method": [0, 2, 4, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 55, 56, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108], "creat": [0, 1, 4, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 22, 25, 28, 33, 40, 45, 48, 55, 61, 66, 67, 68, 82, 85, 90, 93, 96, 97, 98, 99, 102, 104, 105, 108], "take": [0, 6, 8, 14, 15, 16, 17, 18, 20, 26, 28, 29, 30, 33, 34, 38, 39, 40, 44, 54, 55, 56, 57, 62, 66, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 82, 85, 90, 94, 95, 99, 103, 105, 106, 108], "specif": [0, 6, 12, 13, 15, 16, 17, 18, 23, 33, 34, 38, 39, 48, 56, 62, 66, 67, 68, 69, 71, 72, 73, 74, 79, 81, 82, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 108], "base": [0, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 24, 28, 33, 34, 37, 38, 39, 41, 42, 43, 44, 56, 57, 58, 62, 64, 66, 68, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 94, 95, 96, 97, 99, 102, 106, 107, 108], "its": [0, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 26, 28, 34, 36, 41, 47, 49, 53, 54, 56, 58, 68, 71, 72, 80, 81, 82, 83, 84, 88, 91, 92, 94, 95, 97, 99, 105, 108], "handl": [0, 3, 4, 6, 9, 12, 15, 16, 22, 27, 28, 37, 38, 39, 43, 44, 49, 54, 61, 62, 65, 67, 68, 75, 82, 83, 92, 93, 96, 97, 98, 99, 102, 105], "variou": [0, 12, 16, 17, 22, 28, 45, 47, 48, 49, 53, 62, 63, 68, 69, 81, 82, 85, 90, 94, 96, 98, 99, 102, 103, 107], "expect": [0, 4, 6, 8, 11, 15, 17, 19, 20, 21, 22, 28, 40, 41, 45, 48, 58, 59, 62, 63, 64, 66, 67, 68, 69, 73, 74, 79, 80, 81, 83, 85, 90, 91, 92, 93, 94, 97, 98, 99, 101, 102, 105, 107], "valu": [0, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 27, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 79, 80, 81, 83, 84, 85, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 104, 105, 107], "deriv": [0, 4, 6, 8, 14, 15, 18, 19, 20, 37, 45, 46, 69, 77, 81, 82, 102, 104, 105, 107], "overlap": [0, 4, 6, 8, 15, 20, 21, 28, 38, 39, 40, 43, 48, 60, 62, 67, 74, 81, 82, 83, 85, 93, 101, 107], "etc": [0, 2, 8, 16, 19, 32, 85, 102], "can": [0, 2, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108], "expectationvalu": [0, 6, 8, 16, 20, 22, 28, 34, 39, 40, 41, 45, 59, 62, 64, 66, 67, 69, 72, 73, 75, 80, 82, 85, 90, 91, 101, 107], "expectationvaluenonhermitian": [0, 8, 16, 20, 66, 67, 85], "expectationvaluederiv": [0, 6, 8, 16, 20, 41, 67, 73, 74, 85], "expectationvaluebraderivativer": [0, 6, 8, 16, 20, 67, 74, 85], "expectationvaluebraderivativeimag": [0, 6, 8, 16, 20, 67, 85], "expectationvalueketderivativer": [0, 8, 16, 20, 67, 85], "expectationvalueketderivativeimag": [0, 8, 16, 20, 67, 85], "metrictensorr": [0, 6, 8, 16, 20, 67, 74, 85], "metrictensorimag": [0, 6, 8, 16, 20, 67, 85], "overlapimag": [0, 8, 16, 20, 67, 85], "overlapr": [0, 8, 16, 20, 67, 85], "overlapsquar": [0, 6, 8, 16, 20, 40, 62, 67, 78, 85, 101, 107], "dict": [0, 4, 6, 7, 8, 9, 11, 12, 14, 15, 16, 18, 19, 27, 43, 44, 58, 73, 81, 82], "symbol": [0, 2, 4, 6, 7, 8, 9, 11, 12, 15, 16, 17, 18, 19, 20, 27, 34, 37, 40, 41, 43, 44, 45, 47, 49, 52, 53, 54, 57, 58, 62, 66, 69, 72, 74, 82, 85, 94, 97, 98, 101, 102, 107], "int": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 28, 30, 70, 77, 79], "float": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 28, 85], "complex": [0, 4, 6, 7, 8, 9, 11, 15, 16, 17, 18, 19, 33, 38, 60, 62, 65, 67, 68, 72, 77, 81, 82, 85, 90, 96, 98, 99, 102, 104, 105, 107], "expr": [0, 4, 6, 7, 8, 9, 11, 15, 16, 18], "bool": [0, 1, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 27], "default": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 34, 36, 37, 41, 71, 81, 82, 83, 85, 90, 91, 92, 93, 94, 96, 97, 98, 99, 104, 105], "If": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32, 36, 38, 39, 54, 59, 62, 69, 71, 72, 80, 81, 82, 83, 86, 92, 96, 97, 98, 99, 108], "fals": [0, 3, 4, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 22, 25, 27, 28, 34, 37, 45, 68, 70, 74, 77, 82, 90, 92, 93, 94, 95, 96, 97, 99, 103, 104, 105], "fail": [0, 8, 14, 15, 16, 18, 19, 69], "when": [0, 4, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 22, 25, 28, 33, 34, 37, 41, 48, 49, 56, 57, 58, 62, 65, 67, 68, 69, 70, 71, 72, 73, 77, 81, 82, 83, 85, 91, 94, 95, 97, 98, 99, 101, 102, 103, 105], "unsupport": [0, 11, 16], "node": [0, 8, 16, 61, 62, 65, 67], "i": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "encount": [0, 15, 16, 32], "skip": [0, 7, 8, 15, 16, 17, 19], "rais": [0, 4, 6, 8, 9, 11, 14, 15, 16, 18, 19, 61, 77], "notimplementederror": [0, 4, 16, 61], "callabl": [0, 3, 4, 6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 28, 65, 82], "ani": [0, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 20, 28, 29, 32, 36, 40, 41, 44, 45, 51, 54, 56, 62, 65, 69, 71, 74, 75, 80, 81, 82, 83, 84, 85, 95, 96, 102, 104], "A": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 28, 30, 31, 33, 36, 37, 41, 43, 45, 56, 58, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 82, 83, 84, 85, 90, 92, 93, 94, 99, 101, 104, 107, 108], "support": [0, 4, 7, 8, 9, 12, 15, 16, 19, 22, 26, 28, 32, 33, 36, 39, 42, 43, 44, 50, 56, 62, 63, 64, 66, 68, 69, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 89, 91, 92, 93, 98, 106], "otherwis": [0, 4, 8, 9, 15, 16, 17, 18, 28, 29, 32, 82, 83, 94], "itself": [0, 8, 9, 15, 16, 22, 28, 41, 55, 56, 57, 82, 102, 103], "get_runn": [0, 5, 16, 20, 45, 62, 85], "qc": [0, 16], "end": [0, 7, 8, 15, 16, 22, 28, 34, 37, 38, 39, 40, 41, 45, 50, 53, 55, 56, 60, 68, 69, 70, 73, 77, 79, 85, 90, 92, 93, 94, 95, 98, 99, 101, 102, 103, 104, 105], "executor": [0, 16], "all": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 28, 30, 31, 32, 34, 37, 41, 44, 51, 54, 55, 56, 57, 58, 59, 62, 63, 65, 68, 69, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 92, 93, 94, 96, 97, 98, 102, 103, 104], "must": [0, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 25, 26, 28, 30, 33, 34, 37, 40, 41, 48, 49, 56, 58, 64, 67, 68, 69, 72, 77, 79, 81, 82, 83, 85, 93, 95, 96, 97, 101, 102, 106], "ar": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "computablenod": [0, 6, 8, 16, 20, 45, 61, 85], "measur": [0, 3, 6, 8, 16, 17, 25, 27, 28, 33, 34, 37, 38, 39, 42, 44, 59, 62, 63, 64, 65, 66, 67, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 90, 91, 92, 93, 94, 97, 98, 99, 101, 102, 105, 107], "everi": [0, 6, 15, 16, 17, 40, 57, 66, 68, 69, 82, 97, 103], "call": [0, 3, 4, 8, 9, 10, 14, 15, 16, 17, 22, 28, 37, 41, 48, 59, 67, 68, 69, 73, 79, 81, 85, 91, 94, 95, 96, 97, 100, 102], "result": [0, 3, 4, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 27, 28, 33, 37, 39, 41, 43, 44, 45, 48, 51, 53, 54, 56, 57, 59, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 75, 80, 81, 82, 83, 85, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105], "math": [0, 8, 15, 16, 25, 52, 56], "nan": [0, 4, 15, 16, 74], "classmethod": [0, 4, 12, 13, 15, 16, 17, 18, 19], "load": [0, 4, 5, 8, 11, 12, 15, 16, 17, 18, 20, 34, 44, 59, 66, 68, 70, 72, 73, 82, 85, 90, 92, 93, 94, 97, 98, 101, 102], "arg": [0, 4, 6, 7, 8, 9, 11, 14, 15, 16, 18, 20, 85, 90], "kwarg": [0, 4, 6, 7, 8, 9, 11, 14, 15, 16, 17, 18, 83], "from": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 33, 34, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107], "addit": [0, 6, 7, 11, 15, 16, 17, 18, 22, 28, 29, 30, 39, 41, 49, 56, 68, 69, 70, 71, 73, 76, 79, 82, 83, 84, 85, 91, 92, 93, 95, 96, 97, 98, 99, 104, 107, 108], "argument": [0, 4, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 22, 28, 37, 39, 41, 56, 68, 70, 71, 73, 81, 82, 85, 95, 101, 105], "pass": [0, 4, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 28, 37, 38, 39, 41, 43, 45, 52, 53, 54, 57, 62, 65, 67, 72, 73, 79, 81, 82, 83, 85, 93, 95, 99, 101, 102, 103], "constructor": [0, 4, 7, 8, 15, 16, 43, 45, 52, 53, 54, 57, 68, 71, 73, 82, 101], "keyword": [0, 4, 6, 7, 8, 11, 14, 15, 16, 17, 28, 30, 82, 85], "typevar": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], "t": [0, 4, 6, 7, 8, 11, 14, 15, 16, 17, 18, 20, 27, 28, 43, 44, 45, 53, 57, 58, 63, 70, 82, 83, 84, 86, 94, 98, 102, 108], "bound": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 64, 68, 102], "partiallypickl": [0, 16], "instanc": [0, 4, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 34, 40, 45, 48, 51, 56, 57, 59, 61, 62, 63, 65, 66, 67, 81, 82, 83, 85, 95, 96, 97, 98, 99, 102, 103], "pickled_data": [0, 16, 92], "protocolannot": [1, 5, 25], "name": [1, 2, 4, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 22, 25, 28, 38, 60, 68, 70, 85, 88, 89, 91, 92, 93, 94, 95, 98], "descript": [1, 8, 12, 13, 24, 25, 28, 70, 85, 89, 94, 99, 102, 104, 107], "properti": [1, 3, 4, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 25, 28, 30, 33, 48, 77, 82, 85, 94, 97, 98, 99, 104, 105], "annot": [1, 85], "describ": [1, 4, 6, 7, 8, 10, 13, 15, 16, 17, 19, 43, 45, 48, 57, 58, 67, 68, 72, 77, 80, 82, 83, 96, 98, 99, 101, 102, 104, 105], "inform": [1, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 28, 34, 39, 41, 42, 55, 58, 64, 66, 72, 73, 80, 81, 82, 83, 84, 85, 91, 92, 93, 94, 96, 97, 98, 99, 102, 104, 105, 107, 108], "about": [1, 4, 8, 14, 32, 33, 34, 36, 39, 44, 55, 58, 69, 79, 82, 90, 91, 92, 93, 94, 95, 97, 99, 102, 104, 105], "circuit": [1, 3, 6, 7, 8, 11, 15, 16, 23, 25, 27, 33, 34, 37, 40, 41, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 62, 63, 64, 66, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 90, 91, 93, 94, 98, 102, 103, 104, 107, 108], "job": [1, 3, 6, 9, 16, 25, 69, 80, 85, 91, 92, 93, 94, 98, 106], "which": [1, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 25, 26, 28, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 108], "option": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 26, 28, 30, 33, 34, 39, 41, 73, 77, 79, 80, 81, 82, 85, 91, 92, 99, 105], "ordereddict": 1, "note": [1, 4, 7, 9, 10, 11, 13, 18, 19, 22, 26, 27, 28, 37, 38, 39, 41, 42, 44, 45, 48, 53, 56, 58, 61, 62, 65, 69, 70, 73, 75, 79, 80, 81, 82, 83, 90, 91, 93, 94, 95, 97, 98, 102, 103, 105], "visualizerngl": [2, 5, 26, 94, 96, 100, 104], "geometri": [2, 4, 11, 14, 20, 22, 26, 28, 29, 30, 70, 72, 80, 82, 85, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105], "background_color": 2, "ffffff": 2, "visual": [2, 4, 23, 24, 71, 96, 97, 98, 104, 108], "list": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 27, 28, 30, 33, 36, 43, 44, 48, 51, 54, 56, 60, 64, 67, 68, 81, 82, 83, 85, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 103, 104, 105, 107], "tupl": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 61, 62, 67, 82, 94], "geometryperiod": [2, 4, 12, 20, 26, 71], "geometrymolecular": [2, 12, 20, 22, 26, 28, 71, 85, 94, 95, 96, 100, 104], "molecular": [2, 4, 6, 7, 11, 12, 15, 17, 22, 23, 24, 26, 27, 28, 30, 34, 38, 39, 41, 43, 44, 45, 69, 72, 80, 82, 83, 84, 85, 89, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107], "unit": [2, 4, 6, 12, 15, 17, 18, 26, 27, 28, 30, 43, 44, 67, 70, 71, 79, 82, 88, 100], "cell": [2, 4, 12, 17, 26, 28, 29, 34, 43, 44, 70, 71, 90, 94, 97, 100, 102, 105], "background": [2, 21, 28], "color": [2, 16, 68, 90, 91, 98], "stage": [2, 4, 15, 16, 48, 81, 95], "backgroundcolor": 2, "ngl": [2, 26], "so": [2, 4, 6, 7, 8, 13, 15, 16, 17, 19, 21, 28, 37, 38, 39, 44, 48, 55, 56, 62, 68, 71, 72, 74, 77, 79, 80, 82, 85, 92, 93, 94, 95, 98, 101, 103], "mai": [2, 4, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 22, 25, 26, 27, 28, 29, 33, 34, 36, 41, 42, 43, 44, 48, 50, 51, 58, 61, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 91, 94, 99, 102, 103], "preset": 2, "e": [2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 27, 28, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 52, 56, 57, 58, 64, 68, 69, 70, 72, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104], "red": [2, 68, 98], "white": [2, 84], "srgb": 2, "code": [2, 3, 4, 8, 12, 15, 16, 24, 26, 37, 58, 79, 80, 82, 84, 85, 100, 102, 103, 107, 108], "visualize_fragment": [2, 5, 26, 100], "sourc": [2, 12, 16, 68, 69, 92, 93, 98], "atom_label": [2, 26, 96, 100], "fragment_color": 2, "fragment_color_se": 2, "6": [2, 4, 8, 10, 15, 16, 17, 22, 26, 28, 37, 39, 41, 44, 51, 54, 56, 58, 63, 68, 69, 71, 73, 77, 80, 81, 82, 84, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107], "dmet": [2, 4, 20, 24, 72, 85, 95, 107, 108], "fragment": [2, 4, 10, 24, 33, 102], "scheme": [2, 4, 6, 10, 12, 13, 15, 21, 22, 26, 28, 30, 33, 56, 69, 71, 77, 82, 83, 93, 95, 103], "molecul": [2, 4, 7, 17, 21, 22, 28, 30, 33, 38, 39, 41, 43, 45, 49, 51, 57, 58, 68, 70, 72, 79, 80, 83, 84, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "group": [2, 4, 7, 8, 11, 12, 15, 17, 18, 19, 39, 42, 64, 67, 70, 75, 82, 90, 91, 92, 93, 94, 96, 98, 99, 102, 103, 105, 106, 107], "should": [2, 4, 6, 7, 8, 9, 10, 11, 13, 15, 17, 18, 19, 22, 28, 30, 39, 42, 48, 50, 51, 54, 55, 56, 57, 61, 68, 73, 74, 79, 80, 82, 83, 85, 90, 91, 94, 95, 97, 98], "defin": [2, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 26, 28, 30, 33, 34, 37, 38, 39, 40, 41, 44, 45, 48, 49, 50, 52, 53, 56, 57, 58, 59, 61, 62, 64, 68, 71, 72, 73, 80, 81, 82, 85, 90, 92, 93, 94, 96, 97, 98, 99, 100, 104, 105], "set_group": [2, 12, 20, 26, 71, 100], "Not": [2, 4, 94], "compat": [2, 4, 6, 8, 13, 14, 15, 16, 17, 18, 68, 73, 77, 79, 81, 82, 85], "period": [2, 11, 12, 16, 17, 22, 24, 26, 43, 68, 70, 84, 85], "head": [2, 12, 16, 84], "column": [2, 8, 12, 15, 16, 17, 18, 45, 74, 82, 92, 94], "datafram": [2, 4, 6, 7, 9, 12, 15, 16, 17, 18, 20, 39, 63, 71, 80, 82, 85, 92, 94, 102], "df": [2, 4, 5, 12, 15, 18, 20, 28, 29, 71, 82, 93, 94, 101, 102], "label": [2, 4, 6, 7, 8, 12, 15, 17, 18, 19, 20, 28, 30, 55, 58, 70, 82, 85, 90, 91, 92, 93, 96, 98, 103, 105], "atom": [2, 4, 12, 20, 21, 22, 26, 27, 28, 29, 33, 43, 44, 59, 60, 62, 65, 67, 68, 70, 71, 72, 82, 85, 94, 95, 96, 99, 102, 103, 104, 105], "index": [2, 4, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 26, 37, 39, 55, 58, 68, 74, 82, 85, 94, 95, 96, 100], "each": [2, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 33, 37, 39, 40, 41, 44, 45, 48, 53, 54, 55, 57, 58, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 90, 92, 93, 94, 95, 97, 98, 101, 102, 103, 107], "format": [2, 4, 6, 8, 11, 12, 13, 15, 16, 17, 18, 20, 26, 37, 55, 56, 58, 68, 70, 71, 73, 82, 83, 90, 91, 92, 97, 98, 99, 102, 103, 105], "add_ball_and_stick": 2, "blue": [2, 98], "order": [2, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 25, 27, 28, 33, 37, 41, 49, 52, 53, 54, 55, 56, 57, 58, 72, 81, 82, 83, 84, 85, 95, 96, 98, 99, 101, 102, 103, 105], "correspond": [2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 28, 30, 34, 37, 39, 40, 41, 48, 50, 51, 54, 55, 56, 57, 58, 65, 68, 69, 72, 75, 77, 81, 82, 83, 91, 92, 93, 94, 95, 97, 99, 101, 102, 104], "rng": 2, "seed": [2, 8, 9, 10, 11, 12, 15, 16, 25, 28, 30, 40, 62, 63, 64, 66, 69, 75, 76, 77, 78, 90, 91, 101], "gener": [2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 26, 27, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 53, 54, 56, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 92, 93, 94, 95, 96, 97, 99, 102, 103, 104, 105, 107], "onli": [2, 4, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 22, 25, 28, 33, 34, 39, 56, 57, 58, 61, 62, 65, 67, 68, 70, 71, 73, 74, 77, 81, 82, 83, 85, 91, 92, 94, 96, 97, 98, 99, 103], "nglwidget": [2, 26], "widget": [2, 23, 26, 89, 100], "show": [2, 4, 6, 8, 15, 16, 17, 21, 27, 28, 29, 34, 37, 53, 55, 56, 64, 69, 72, 74, 80, 82, 90, 93, 95, 97, 98, 102, 107], "highlight": [2, 69, 107, 108], "visualize_molecul": [2, 5, 26, 94, 96, 100, 104], "ball": 2, "stick": 2, "visualize_orbit": [2, 5, 26, 96, 100], "cube_orbit": [2, 26, 100], "red_isolevel": [2, 96], "0": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 30, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "55": [2, 73, 84, 94, 103], "blue_isolevel": [2, 96], "input": [2, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 26, 27, 28, 41, 44, 48, 54, 56, 58, 62, 68, 72, 73, 75, 79, 82, 85, 94, 98], "orbit": [2, 4, 7, 8, 10, 11, 13, 15, 17, 18, 21, 22, 24, 28, 29, 34, 37, 45, 50, 51, 53, 54, 58, 68, 77, 83, 90, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 107], "atop": 2, "structur": [2, 4, 8, 9, 12, 15, 16, 18, 22, 24, 28, 33, 48, 55, 58, 60, 62, 65, 67, 68, 70, 72, 81, 82, 84, 89, 90, 94, 95, 96, 98, 99, 101, 102, 104, 105], "string": [2, 4, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 25, 37, 39, 43, 44, 54, 57, 63, 69, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 90, 91, 92, 93, 94, 95, 98, 100, 102], "contain": [2, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 28, 30, 31, 33, 34, 43, 46, 49, 55, 56, 60, 62, 65, 67, 69, 70, 71, 72, 73, 74, 75, 81, 82, 83, 85, 91, 92, 94, 95, 97, 98, 102, 104, 105, 107, 108], "content": [2, 4, 8, 15], "cube": [2, 4, 26, 100], "detail": [2, 4, 6, 7, 8, 10, 13, 14, 15, 16, 17, 18, 21, 22, 27, 28, 31, 33, 41, 48, 51, 56, 58, 59, 60, 62, 65, 67, 69, 72, 76, 77, 79, 80, 81, 82, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 107, 108], "shape": [2, 7, 8, 14, 15, 18, 20, 82, 93], "isolevel": 2, "isosurfac": [2, 26], "visualize_unit_cel": [2, 5, 26], "draw": [2, 75], "edg": 2, "insid": [2, 6, 7, 15, 79, 94], "algorithmbayesianqp": [3, 5, 27, 44], "phayes_st": [3, 5, 27], "k_max": [3, 6, 27, 44], "error_r": [3, 6], "verbos": [3, 4, 6, 22, 28, 29, 36, 95, 96, 99], "execut": [3, 4, 6, 11, 15, 16, 23, 24, 25, 27, 28, 30, 41, 48, 68, 73, 80, 82, 83, 85, 90, 92, 93, 94, 95, 97, 98, 99, 101, 102, 104, 105, 108], "bayesian": [3, 23, 24, 27, 44, 80, 84, 89], "qpe": [3, 6, 16, 24, 27, 42, 43, 79, 80, 85], "algorithm": [3, 8, 10, 14, 15, 16, 20, 22, 25, 27, 28, 31, 33, 34, 37, 38, 39, 40, 41, 43, 45, 49, 50, 52, 54, 55, 56, 58, 68, 69, 73, 79, 80, 81, 82, 83, 84, 85, 89, 91, 93, 94, 97, 98, 101, 102, 103], "reproduc": 3, "workflow": [3, 8, 16, 62, 67, 69, 73, 79, 80, 81, 85, 94, 96, 97, 98, 102, 103, 105, 108], "arxiv": [3, 4, 6, 7, 8, 13, 16, 17, 19, 84], "2306": [3, 84, 105], "16608": [3, 84], "updat": [3, 6, 7, 8, 9, 12, 13, 15, 16, 18, 20, 27, 44, 68, 73, 79, 82, 85, 101], "part": [3, 4, 8, 9, 15, 16, 17, 28, 30, 32, 34, 41, 44, 45, 49, 53, 57, 62, 64, 68, 72, 73, 74, 77, 80, 85, 90, 91, 96, 97, 98, 105, 108], "quantinuum": [3, 16, 23, 25, 31, 32, 33, 69, 79, 80, 81, 85, 86, 87, 88, 90, 94, 106, 107, 108], "phayesst": 3, "initi": [3, 4, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 22, 28, 37, 40, 41, 43, 44, 45, 56, 58, 68, 72, 73, 79, 80, 82, 85, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105], "cap": [3, 6, 7, 27, 55], "number": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 25, 27, 28, 29, 33, 37, 39, 40, 43, 44, 45, 49, 55, 56, 58, 62, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105], "repeat": [3, 8, 12, 16, 20, 37, 40, 43, 44, 67, 68, 80, 98, 102], "ctrl": [3, 16, 43, 44, 79], "u": [3, 6, 7, 8, 10, 11, 15, 16, 17, 19, 22, 28, 37, 39, 42, 43, 44, 50, 54, 55, 58, 59, 63, 68, 70, 74, 79, 80, 82, 84, 92, 93, 95, 96, 98, 99, 102, 103, 105], "error": [3, 4, 6, 8, 11, 13, 15, 20, 28, 33, 36, 51, 58, 63, 69, 70, 79, 80, 81, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 97, 98, 101, 107, 108], "rate": [3, 6, 11, 14, 33, 69, 80, 90], "nois": [3, 6, 11, 16, 24, 33, 70, 72, 80, 81, 85, 92, 93, 94, 97, 98, 107, 108], "awar": [3, 6, 7, 24, 49, 68, 77, 84, 92, 93, 94, 95, 99, 104, 105], "likelihood": [3, 6, 16, 27, 44, 79], "control": [3, 4, 6, 7, 8, 15, 16, 18, 19, 33, 43, 44, 49, 55, 56, 59, 61, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 91, 93, 96, 98, 99], "build": [3, 4, 5, 6, 7, 8, 11, 12, 15, 16, 20, 22, 25, 27, 28, 29, 33, 34, 37, 38, 39, 40, 41, 43, 44, 45, 48, 49, 53, 54, 59, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 76, 79, 80, 82, 85, 90, 91, 92, 93, 94, 97, 98, 101, 102, 107, 108], "set": [3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 27, 28, 30, 32, 33, 34, 37, 38, 39, 41, 43, 44, 45, 48, 50, 51, 55, 56, 58, 62, 64, 68, 69, 70, 72, 74, 75, 77, 79, 81, 82, 83, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 104, 105, 106, 108], "iqp": [3, 16], "baseiterativephaseestim": [3, 6, 16], "self": [3, 4, 6, 7, 8, 10, 11, 12, 15, 16, 18, 22, 28, 42, 58, 61, 68, 79, 82, 84, 85, 94, 96, 99, 105], "final_pdf": [3, 5, 6, 20, 27], "phi": [3, 6, 8, 16, 27, 42, 43, 44, 45, 79], "pdf": [3, 6, 8, 14, 16, 31, 84, 85], "phase": [3, 7, 13, 15, 17, 18, 20, 23, 27, 33, 45, 62, 78, 80, 81, 84, 85, 89, 98, 99, 102, 103, 107], "ndarrai": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 56, 65, 66], "grid": [3, 6, 12, 28, 29, 44], "represent": [3, 4, 6, 7, 8, 9, 13, 15, 16, 17, 18, 19, 22, 27, 28, 33, 39, 43, 49, 50, 63, 82, 83, 84, 90, 94, 96, 99], "2": [3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 25, 26, 27, 28, 29, 30, 33, 34, 37, 39, 40, 41, 43, 44, 45, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105], "convent": [3, 4, 6, 8, 13, 15, 17, 18, 44, 70, 79, 82, 103], "probabl": [3, 6, 16, 25, 39, 43, 44, 74, 75, 76, 77, 78, 79, 85, 90, 102], "distribut": [3, 4, 6, 9, 10, 12, 15, 16, 20, 27, 32, 35, 36, 44, 62, 79, 81, 82, 92, 93, 98, 99, 102], "final_valu": [3, 5, 6, 11, 14, 20, 22, 27, 28, 34, 37, 38, 39, 40, 41, 44, 50, 70, 72, 73, 82, 93, 94, 97, 99, 101, 102, 103, 104, 105], "energi": [3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 20, 21, 22, 24, 27, 29, 30, 33, 34, 37, 39, 40, 41, 43, 44, 45, 47, 50, 52, 57, 58, 64, 68, 69, 70, 72, 73, 75, 80, 82, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 107, 108], "estim": [3, 7, 8, 14, 20, 23, 27, 33, 58, 81, 84, 85, 89, 90, 93, 94, 95, 97, 98, 99, 102, 103, 107], "mean": [3, 4, 6, 7, 8, 9, 10, 15, 16, 20, 21, 28, 30, 33, 37, 44, 50, 56, 63, 68, 69, 72, 75, 79, 80, 81, 82, 84, 90, 92, 93, 94, 95, 96, 98, 99, 105], "squar": [3, 6, 8, 9, 14, 15, 20, 62, 70, 76, 77, 107], "root": [3, 15, 16, 59, 67], "holevo": 3, "varianc": [3, 8, 59, 62, 73, 90], "has_upd": [3, 5], "indic": [3, 4, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 22, 28, 29, 68, 70, 82, 95, 97, 102, 103], "perform": [3, 4, 6, 7, 10, 11, 13, 14, 15, 16, 18, 19, 22, 24, 25, 27, 28, 29, 30, 33, 34, 36, 37, 38, 39, 41, 43, 44, 45, 47, 48, 49, 53, 62, 64, 65, 66, 68, 69, 70, 71, 72, 75, 77, 78, 79, 80, 81, 82, 83, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108], "It": [3, 4, 8, 10, 11, 13, 15, 16, 17, 18, 21, 28, 33, 39, 41, 42, 48, 54, 55, 62, 64, 65, 68, 69, 71, 72, 73, 74, 79, 82, 83, 92, 95, 96, 97, 98, 100, 101, 103], "outcom": [3, 6, 16, 44, 77, 78, 79, 90, 93, 96, 97, 98, 104, 105], "avail": [3, 6, 8, 9, 14, 16, 23, 26, 27, 28, 31, 33, 36, 41, 48, 51, 58, 59, 68, 69, 70, 71, 73, 76, 79, 80, 82, 85, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 106, 108], "some": [3, 4, 6, 8, 9, 13, 15, 16, 17, 18, 19, 28, 30, 31, 36, 40, 42, 43, 44, 45, 49, 53, 60, 62, 64, 67, 70, 72, 75, 79, 80, 81, 82, 83, 85, 90, 91, 93, 94, 95, 97, 99, 100, 101, 102, 107, 108], "reason": [3, 37, 41, 45, 72, 77, 90, 93, 95, 99], "discard": [3, 4, 7, 15, 16, 69, 82, 83, 91, 92, 94, 97, 98], "detect": [3, 16, 24, 79, 80, 84], "until": [3, 4, 15, 37, 44, 47, 67, 68, 97], "success": [3, 6, 9, 16, 65, 78, 94], "effect": [3, 4, 7, 8, 15, 28, 33, 37, 67, 68, 69, 70, 78, 80, 82, 84, 92, 93, 96, 97, 98, 99, 103, 104, 105], "run": [3, 4, 5, 6, 10, 11, 16, 17, 20, 22, 24, 25, 27, 28, 31, 34, 37, 38, 39, 40, 41, 43, 44, 45, 48, 49, 58, 62, 63, 64, 66, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 85, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "again": [3, 8, 34, 36, 37, 48, 56, 62, 68, 81, 82, 83, 98, 99, 103, 105], "join": [3, 5, 6, 15, 20, 62], "handles_map": [3, 6], "retriev": [3, 6, 16, 19, 20, 62, 63, 69, 77, 81, 82, 85, 91, 93, 94, 97, 98, 99, 105], "backend": [3, 6, 7, 8, 10, 11, 16, 18, 20, 22, 23, 24, 25, 28, 33, 34, 36, 39, 41, 43, 44, 48, 56, 62, 63, 64, 68, 69, 70, 72, 75, 76, 79, 80, 81, 85, 89, 90, 91, 92, 93, 94, 97, 98, 99, 101, 102, 103, 104, 105], "through": [3, 6, 7, 8, 12, 13, 14, 15, 16, 25, 33, 38, 42, 58, 62, 68, 69, 81, 82, 85, 91, 92, 93, 98, 101, 102], "resulthandl": [3, 6, 16, 92, 93, 94, 98], "id": [3, 6, 9, 16, 36, 62, 64, 71, 94], "k": [3, 4, 6, 7, 8, 9, 14, 15, 16, 17, 27, 28, 29, 37, 40, 43, 44, 57, 58, 72, 74, 79, 80, 84, 93, 97, 101, 102, 104, 105], "beta": [3, 4, 6, 7, 8, 15, 16, 17, 27, 28, 44, 50, 58, 79, 80, 82, 96, 101], "current": [3, 4, 8, 9, 12, 15, 16, 17, 18, 19, 23, 27, 33, 37, 39, 43, 47, 56, 73, 77, 79, 82, 92, 93, 95, 97, 99, 102, 104, 105], "phasest": 3, "run_async": [3, 5, 6, 20], "asynchnon": [3, 6], "ava": [4, 5, 105, 108], "aolabel": [4, 28, 96, 105], "aolabels_vir": [4, 28, 96], "threshold": [4, 6, 9, 15, 17, 18, 28, 37, 73, 82, 93, 96, 97, 105], "threshold_vir": [4, 28, 96, 105], "n_occ": [4, 96], "n_vir": [4, 96], "n_occ_act": 4, "n_vir_act": 4, "minao": [4, 28], "with_iao": [4, 28], "force_halves_act": [4, 28, 96], "freeze_half_fil": [4, 96], "canonic": [4, 28], "frozen": [4, 5, 10, 15, 17, 22, 28, 68, 72, 93, 94, 96, 99, 102, 103, 104, 105], "spin_a": 4, "valenc": [4, 28, 84, 96, 99, 105], "activ": [4, 8, 10, 17, 22, 26, 36, 68, 79, 84, 85, 92, 94, 95, 96, 98, 99, 100, 102, 104, 105, 108], "space": [4, 8, 10, 11, 12, 13, 15, 18, 19, 20, 22, 26, 29, 34, 37, 39, 40, 45, 49, 51, 53, 54, 56, 58, 63, 66, 68, 69, 70, 73, 76, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 108], "re": [4, 8, 15, 16, 34, 37, 39, 40, 45, 57, 74, 77, 84, 85, 93, 94, 96, 97, 98, 101], "region": [4, 17, 28, 30, 104], "embed": [4, 20, 21, 30, 72, 84, 85, 95, 108], "construct": [4, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 21, 22, 27, 28, 29, 33, 34, 37, 38, 39, 41, 43, 44, 45, 48, 49, 53, 54, 55, 56, 57, 58, 59, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 99, 101, 104, 105, 107, 108], "mcscf": [4, 28, 99], "ao": [4, 28, 82, 96, 105], "cr": 4, "3d": [4, 12, 96, 105], "4": [4, 7, 8, 10, 11, 12, 14, 15, 16, 17, 22, 26, 28, 29, 34, 37, 40, 43, 44, 45, 52, 53, 54, 55, 56, 58, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 107], "1": [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 25, 26, 27, 28, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107], "c": [4, 7, 8, 9, 14, 15, 16, 22, 26, 28, 36, 38, 61, 68, 69, 71, 79, 82, 83, 84, 85, 92, 93, 94, 95, 98, 100, 104, 105], "2p": [4, 96, 105], "given": [4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 28, 33, 38, 39, 41, 42, 43, 49, 50, 53, 59, 63, 64, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 90, 93, 95, 96, 104, 107], "separ": [4, 6, 7, 8, 12, 15, 16, 28, 34, 37, 48, 55, 56, 58, 59, 62, 67, 69, 82, 85, 96, 103, 104], "virtual": [4, 7, 15, 17, 28, 36, 58, 96, 105], "truncat": [4, 15, 20, 58, 82, 85, 96, 105], "projector": [4, 96, 105], "abov": [4, 7, 8, 13, 15, 16, 17, 18, 19, 21, 22, 28, 30, 34, 37, 38, 39, 40, 41, 53, 56, 57, 58, 64, 66, 68, 70, 71, 73, 74, 75, 77, 78, 80, 82, 83, 85, 90, 91, 94, 95, 96, 98, 101, 102], "kept": [4, 8, 68, 70, 96], "occupi": [4, 7, 15, 17, 28, 58, 68, 82, 96, 101, 102, 104, 105], "local": [4, 10, 16, 22, 28, 68, 82, 84, 90, 96, 104, 106], "specifi": [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 25, 28, 29, 30, 41, 43, 44, 45, 48, 49, 56, 68, 69, 71, 72, 74, 77, 79, 81, 82, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105], "ignor": [4, 15, 16, 19, 20, 92, 93, 96, 98, 99, 104, 105], "out": [4, 8, 15, 21, 28, 32, 57, 77, 79, 83, 90, 92, 93, 94, 96, 97, 98, 99, 104, 105], "total": [4, 6, 7, 8, 10, 11, 15, 16, 17, 21, 22, 28, 30, 34, 37, 43, 45, 47, 58, 62, 64, 68, 72, 74, 75, 78, 80, 82, 90, 91, 94, 96, 97, 98, 99, 104, 105], "n_virt": 4, "basi": [4, 7, 8, 10, 13, 15, 16, 17, 18, 21, 22, 24, 26, 28, 29, 30, 34, 38, 39, 41, 45, 49, 51, 52, 54, 56, 57, 58, 59, 64, 68, 70, 75, 76, 78, 80, 82, 85, 90, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105], "whether": [4, 8, 9, 10, 11, 13, 15, 16, 18, 19, 34, 48, 56, 74, 81, 82, 90], "intrins": [4, 33], "iao": 4, "how": [4, 6, 7, 8, 13, 15, 17, 31, 34, 36, 37, 40, 41, 43, 45, 48, 53, 55, 56, 58, 61, 65, 69, 81, 82, 90, 91, 93, 94, 95, 96, 97, 98, 102, 103, 106, 107, 108], "singli": [4, 34, 53, 96], "project": [4, 24, 28, 42, 77, 81, 85, 94, 96, 106, 108], "alpha": [4, 7, 8, 14, 15, 17, 28, 50, 58, 79, 82, 96], "complet": [4, 17, 22, 28, 33, 39, 45, 48, 52, 61, 68, 69, 84, 85, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 105], "see": [4, 6, 7, 8, 10, 13, 15, 16, 17, 18, 21, 23, 26, 27, 28, 29, 34, 35, 37, 38, 39, 41, 44, 45, 46, 54, 56, 58, 64, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 85, 91, 92, 95, 99, 100, 101, 102, 103], "section": [4, 16, 19, 22, 28, 34, 41, 42, 53, 54, 56, 58, 60, 61, 62, 65, 73, 74, 79, 81, 82], "5": [4, 7, 8, 10, 11, 14, 15, 16, 17, 18, 22, 25, 26, 28, 29, 37, 39, 40, 43, 44, 45, 50, 54, 63, 64, 65, 66, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 84, 89, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 105], "3": [4, 6, 8, 10, 11, 15, 16, 17, 18, 19, 22, 24, 25, 26, 28, 33, 35, 37, 38, 39, 40, 41, 48, 50, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 79, 80, 81, 82, 84, 89, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 107], "paper": [4, 7, 40, 69, 96, 97, 98, 108], "more": [4, 6, 7, 8, 10, 13, 14, 15, 17, 18, 21, 22, 25, 27, 28, 33, 34, 36, 37, 40, 41, 45, 48, 51, 53, 55, 56, 58, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 77, 79, 80, 81, 82, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 108], "half": [4, 6, 15, 18, 44, 79, 82, 96], "fill": [4, 8, 15, 20, 96], "present": [4, 7, 8, 9, 12, 15, 18, 19, 33, 56, 68, 77, 82, 90, 94, 96, 97, 98, 99, 103], "exclud": [4, 8, 16, 71, 96, 103], "transform": [4, 6, 7, 8, 12, 13, 15, 17, 18, 19, 20, 22, 28, 37, 42, 43, 50, 58, 68, 71, 74, 79, 83, 84, 93, 94, 96, 99, 101, 102, 105, 107], "block": [4, 7, 8, 15, 17, 22, 28, 34, 37, 40, 41, 45, 49, 50, 52, 55, 62, 65, 67, 68, 70, 73, 79, 82, 84, 92, 93, 94, 95, 99, 101, 102, 103, 104, 105, 108], "diagon": [4, 7, 8, 9, 10, 11, 15, 16, 20, 22, 28, 38, 39, 50, 62, 63, 64, 68, 74, 79, 82, 85, 93], "symmetr": [4, 9, 10, 15, 82, 84, 85, 95, 103], "core": [4, 6, 7, 15, 20, 22, 28, 45, 57, 64, 73, 75, 79, 81, 82, 85, 93, 94, 96, 103], "unpair": [4, 17], "electron": [4, 8, 10, 11, 15, 17, 21, 28, 29, 30, 33, 34, 40, 43, 45, 53, 54, 58, 68, 72, 82, 83, 84, 89, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105], "alwai": [4, 8, 15, 60, 70, 79, 80, 82, 85, 96], "contrast": [4, 15, 17, 27, 41, 62, 82, 96, 101], "origin": [4, 5, 6, 7, 9, 15, 16, 19, 22, 28, 40, 62, 74, 80, 96, 97, 101], "select": [4, 6, 7, 8, 15, 16, 17, 20, 22, 25, 26, 27, 28, 34, 37, 44, 55, 56, 68, 72, 94, 95, 96, 97, 100, 101, 105], "open": [4, 8, 11, 17, 69, 92, 93, 96, 97, 98], "shell": [4, 17, 96], "system": [4, 6, 8, 10, 11, 12, 13, 15, 16, 17, 22, 24, 26, 30, 32, 33, 34, 36, 37, 39, 41, 43, 44, 45, 48, 49, 53, 54, 58, 69, 70, 74, 79, 80, 81, 82, 83, 84, 85, 89, 94, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108], "forc": [4, 8, 19, 20], "doubl": [4, 7, 15, 17, 24, 34, 39, 51, 54, 56, 58, 68, 85, 92, 93, 94, 97, 98, 99, 104, 105, 107], "occup": [4, 7, 8, 10, 13, 15, 17, 18, 37, 45, 51, 56, 58, 72, 82, 90, 92, 93, 94, 99, 102, 105, 107], "outsid": [4, 15, 21, 28, 68, 80, 95], "import": [4, 7, 8, 11, 15, 16, 17, 21, 22, 25, 26, 27, 28, 29, 30, 34, 36, 37, 38, 39, 40, 41, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "chemistrydriverpyscfmolecularrhf": [4, 5, 22, 26, 28, 93, 95, 99, 100, 102, 103], "li": [4, 28, 84, 99], "h": [4, 6, 8, 9, 11, 12, 15, 16, 17, 19, 21, 22, 26, 28, 29, 30, 34, 37, 38, 39, 40, 41, 43, 45, 50, 51, 52, 58, 59, 64, 68, 70, 71, 72, 74, 75, 78, 79, 80, 82, 84, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105], "8": [4, 8, 11, 15, 16, 17, 22, 26, 28, 34, 37, 43, 51, 53, 63, 66, 69, 70, 71, 73, 78, 79, 80, 81, 82, 83, 84, 89, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 105], "driver": [4, 7, 20, 21, 22, 26, 29, 30, 63, 68, 70, 72, 82, 85, 93, 94, 95, 96, 99, 100, 102, 103, 104, 105], "75": [4, 12, 28, 29, 63, 103], "631g": [4, 24, 28, 70], "transf": [4, 5, 28, 82, 94, 96, 99, 105], "frozenf": [4, 5, 28, 96, 105], "hamiltonian": [4, 6, 7, 8, 10, 11, 13, 15, 16, 17, 21, 24, 27, 29, 30, 33, 34, 37, 38, 39, 40, 41, 43, 44, 45, 50, 59, 62, 63, 64, 66, 69, 72, 73, 74, 75, 79, 80, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 107, 108], "get_system": [4, 5, 11, 20, 21, 27, 28, 29, 30, 37, 38, 39, 40, 41, 43, 44, 62, 63, 69, 70, 74, 76, 80, 85, 93, 94, 95, 96, 99, 102, 103, 104, 105], "compute_unitari": [4, 5, 15, 20, 82], "mf": [4, 28, 68, 99], "calcul": [4, 6, 8, 9, 10, 11, 12, 15, 16, 18, 19, 21, 22, 24, 25, 27, 29, 30, 33, 34, 37, 38, 39, 40, 41, 43, 44, 48, 53, 56, 59, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108], "unitari": [4, 6, 7, 15, 16, 19, 34, 37, 41, 42, 43, 44, 49, 50, 53, 54, 55, 56, 74, 77, 78, 79, 80, 82, 84, 85, 90, 91, 92, 93, 94, 97, 99, 104, 105, 107], "matrix": [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 28, 38, 39, 40, 50, 62, 63, 64, 66, 71, 74, 77, 82, 84, 85, 93, 95, 99, 103, 104, 107], "mo": [4, 11, 15, 17, 28, 82, 104], "coeffici": [4, 7, 8, 15, 16, 17, 18, 19, 20, 28, 37, 38, 39, 41, 49, 53, 56, 57, 58, 63, 70, 76, 79, 82, 93, 94, 96, 99, 101, 102, 105, 107], "hf": [4, 6, 37, 39, 50, 53, 58, 68, 82, 94, 96, 97, 99, 100, 103, 104], "field": [4, 7, 8, 11, 15, 16, 21, 28, 33, 48, 50, 56, 68, 72, 82, 84, 85, 90, 92, 95, 96, 99, 105], "dtype": [4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 20, 22, 28, 65, 82], "_scalartype_co": [4, 6, 8, 9, 11, 12, 13, 14, 15, 17], "covari": [4, 6, 8, 9, 11, 12, 13, 14, 15, 17], "coeff": [4, 15, 18], "dump_flag": [4, 5], "print": [4, 6, 8, 9, 11, 14, 15, 16, 17, 18, 19, 22, 25, 27, 28, 29, 34, 37, 38, 39, 40, 41, 43, 44, 50, 51, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105], "modifi": [4, 7, 8, 12, 15, 16, 21, 28, 30, 34, 40, 41, 69, 72, 74, 81, 85, 90, 94, 95, 97, 101, 103, 104], "is_transf": [4, 5], "appli": [4, 6, 7, 8, 10, 11, 15, 16, 18, 28, 31, 33, 37, 38, 39, 45, 49, 50, 53, 55, 56, 58, 61, 62, 69, 71, 72, 74, 81, 82, 85, 92, 93, 94, 98, 99, 103, 105], "restrict": [4, 7, 8, 13, 15, 17, 20, 22, 28, 33, 37, 50, 56, 58, 68, 70, 82, 85, 93, 96, 98, 99, 102, 103], "uhf": [4, 28, 30, 82], "casscf": [4, 5, 28, 94, 99, 105, 108], "natur": [4, 15, 18, 58, 62, 68, 72, 82, 84, 90, 94, 108], "nca": [4, 28, 94, 99, 104, 105], "neleca": [4, 28, 94, 99, 104, 105], "ncore": 4, "max_cycl": [4, 96], "50": [4, 16, 27, 44, 56, 69, 80, 84, 90, 91, 94, 103], "conv_tol": 4, "1e": [4, 6, 13, 14, 15, 16, 28, 29, 73, 79, 80, 82, 91, 92, 93, 94, 95, 97, 98], "7": [4, 8, 15, 16, 17, 22, 24, 26, 28, 37, 40, 63, 69, 71, 73, 81, 82, 84, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103], "conv_tol_grad": 4, "fix_spin_squar": 4, "spin_squared_toler": 4, "01": [4, 10, 11, 14, 22, 26, 28, 40, 56, 63, 70, 71, 73, 76, 84, 85, 90, 94, 99, 101, 102, 103, 104, 105], "init_orbit": [4, 96], "print_ci_coeff": [4, 96], "ci_print_cutoff": [4, 96], "postprocess": [4, 99, 105], "consist": [4, 6, 7, 8, 9, 10, 15, 16, 17, 21, 22, 23, 28, 37, 42, 51, 55, 58, 62, 68, 78, 79, 80, 81, 82, 84, 85, 90, 94, 96, 97, 99, 103, 104, 105], "integr": [4, 6, 8, 10, 13, 14, 15, 17, 18, 21, 23, 28, 29, 30, 34, 45, 69, 72, 84, 85, 90, 92, 93, 99, 102, 104, 105, 107], "spatial": [4, 7, 10, 15, 17, 22, 28, 45, 51, 58, 68, 77, 82, 83, 94, 95, 96, 99, 102, 103], "In": [4, 7, 8, 9, 12, 15, 17, 18, 19, 21, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 53, 54, 56, 57, 58, 59, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 107], "most": [4, 6, 8, 11, 15, 16, 18, 31, 32, 33, 34, 36, 41, 43, 44, 48, 62, 68, 79, 82, 85, 90, 92, 96, 97], "case": [4, 6, 8, 9, 11, 12, 13, 15, 16, 19, 22, 28, 29, 37, 40, 41, 44, 48, 53, 56, 58, 59, 61, 62, 66, 68, 69, 73, 77, 78, 79, 82, 83, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105], "unnecessari": 4, "correctli": [4, 16, 36, 85], "necessari": [4, 7, 8, 13, 15, 16, 22, 28, 42, 43, 48, 56, 59, 62, 63, 68, 69, 72, 79, 81, 82, 91, 96, 98, 102, 103, 105], "chemic": [4, 6, 7, 10, 12, 15, 17, 22, 26, 28, 31, 33, 34, 39, 44, 49, 54, 55, 56, 60, 67, 68, 69, 70, 71, 77, 82, 84, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 105], "maximum": [4, 6, 8, 11, 14, 15, 16, 27, 28, 44, 68, 73, 95, 96, 97, 98], "macroiter": [4, 96], "converg": [4, 6, 10, 11, 14, 22, 28, 34, 37, 41, 45, 68, 73, 90, 91, 92, 94, 96, 97, 98, 99, 102], "gradient": [4, 6, 11, 14, 16, 24, 34, 37, 41, 73, 84, 85, 97, 107], "desir": [4, 8, 15, 17, 18, 27, 33, 40, 42, 44, 45, 56, 79, 82, 83, 96, 102, 104, 105], "penalti": [4, 6, 40, 101], "term": [4, 6, 7, 13, 15, 16, 17, 18, 19, 20, 21, 28, 30, 34, 37, 40, 45, 53, 54, 56, 57, 58, 66, 67, 68, 69, 72, 73, 74, 75, 77, 80, 81, 82, 83, 90, 92, 93, 94, 97, 98, 99, 101, 102, 104, 105], "ad": [4, 7, 9, 12, 15, 16, 17, 21, 28, 45, 56, 68, 72, 81, 85, 90, 94, 97], "drive": [4, 10, 11, 22, 27, 28, 72, 80], "optimis": [4, 6, 13, 16, 41], "toler": [4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 18, 20, 33, 37, 73, 85, 96, 97], "g": [4, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 22, 26, 28, 33, 37, 39, 52, 56, 58, 70, 71, 72, 73, 74, 79, 80, 81, 84, 85, 91, 92, 93, 96, 98, 100, 102, 104], "befor": [4, 6, 7, 8, 10, 14, 15, 16, 18, 22, 28, 32, 37, 40, 56, 62, 69, 80, 91, 94, 95, 96, 97, 98, 102, 103], "differ": [4, 6, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 22, 28, 30, 33, 34, 37, 40, 42, 43, 47, 48, 50, 54, 56, 61, 62, 64, 67, 68, 70, 71, 74, 75, 79, 80, 81, 82, 83, 84, 85, 90, 91, 95, 96, 98, 99, 102, 104, 105, 107, 108], "determin": [4, 6, 8, 9, 13, 15, 16, 17, 18, 19, 37, 40, 43, 44, 56, 68, 69, 72, 74, 75, 79, 82, 83, 84, 90, 92, 94, 95, 96, 97, 98, 99, 102, 104, 105], "have": [4, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 22, 28, 29, 30, 33, 34, 36, 37, 39, 41, 43, 45, 48, 55, 56, 58, 59, 60, 61, 63, 65, 68, 69, 72, 77, 80, 81, 82, 83, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105], "ci": [4, 28, 53, 64, 83, 96, 99, 107], "optim": [4, 6, 8, 14, 15, 16, 20, 27, 33, 34, 37, 38, 39, 40, 41, 43, 47, 48, 49, 56, 58, 59, 62, 66, 67, 68, 69, 72, 73, 79, 80, 81, 84, 85, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 107, 108], "homo": 4, "lumo": [4, 26], "chemistrydriverpyscfembeddinggammarhf": [4, 5], "zmatrix": [4, 12, 20, 21, 28, 30, 93], "ecp": [4, 28, 29, 96], "charg": [4, 22, 28, 29, 30, 45, 68, 70, 93, 94, 95, 96, 99, 102, 103], "exp_to_discard": [4, 28, 29], "gdf": [4, 28, 29], "dimens": [4, 8, 12, 13, 15, 28, 29, 71, 82, 107], "output": [4, 6, 8, 9, 11, 12, 13, 15, 16, 22, 28, 29, 37, 72, 79, 80, 82, 85, 93, 97, 98, 107], "b3lyp": 4, "transf_inn": 4, "frozen_inn": 4, "level_shift": 4, "0e6": 4, "precis": [4, 6, 7, 8, 15, 18, 28, 29, 33, 42, 43, 44, 48, 69, 76, 79, 90, 91, 93, 105], "9": [4, 8, 15, 18, 22, 26, 28, 37, 38, 39, 62, 63, 69, 73, 78, 81, 82, 84, 85, 92, 93, 94, 95, 96, 100, 101, 102, 103], "partial": [4, 7, 8, 15, 16, 18, 37, 44, 45, 62, 74, 96, 104], "psiemb": [4, 104], "implement": [4, 6, 7, 8, 10, 13, 14, 15, 16, 21, 22, 27, 28, 33, 39, 44, 45, 46, 49, 56, 58, 68, 69, 71, 73, 74, 77, 78, 79, 82, 83, 84, 85, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104], "rhf": [4, 10, 11, 28, 82, 93, 94, 95, 99, 104, 105], "rk": 4, "whole": [4, 15, 33, 66], "subsystem": [4, 28, 30, 104, 108], "z": [4, 6, 7, 8, 12, 13, 15, 16, 17, 19, 33, 37, 71, 74, 75, 76, 79, 80, 82, 83, 84, 93, 94, 99, 102, 103, 105], "vector": [4, 6, 7, 9, 11, 12, 13, 14, 15, 17, 18, 26, 34, 40, 41, 56, 66, 69, 70, 71, 73, 82, 85, 90, 93, 95, 97, 99, 102, 107], "valid": [4, 7, 15, 19, 36, 69, 83, 85, 96, 99, 104, 105], "mole": [4, 28, 96, 99, 104, 105], "potenti": [4, 10, 12, 15, 16, 21, 22, 28, 62, 68, 80, 81, 82, 84, 85, 90, 95, 96, 103, 104], "expon": [4, 6, 7, 14, 15, 20, 27, 37, 43, 44, 54, 57, 58, 59, 62, 69, 74, 75, 79, 81, 85, 90, 91, 94, 97, 98], "primit": [4, 6, 7, 20, 59, 61, 62, 66, 67, 82, 85], "gaussian": [4, 9, 10, 12, 27, 28, 29, 71], "densiti": [4, 8, 10, 11, 15, 17, 21, 22, 28, 29, 60, 67, 82, 84, 95, 99, 104, 105, 107], "fit": [4, 8, 9, 28, 29, 68, 72], "fftdf": 4, "aftdf": 4, "mdf": 4, "log": [4, 20, 37, 44, 85, 90, 91, 107], "stdout": [4, 97], "sub": [4, 7, 8, 15, 18, 20, 27, 28, 40, 43, 44, 71, 101], "scf": [4, 10, 21, 22, 28, 70, 82, 95, 96, 99], "ewald": 4, "sum": [4, 8, 13, 15, 16, 17, 20, 63, 65, 68, 75, 77, 80, 81, 82, 92, 94, 99, 102], "compute_nuclear_dipol": [4, 5], "nuclear": [4, 12, 28, 30, 84], "electr": 4, "dipol": 4, "x": [4, 6, 7, 8, 12, 13, 14, 15, 16, 17, 19, 28, 30, 33, 52, 55, 57, 59, 61, 62, 65, 71, 79, 80, 82, 83, 84, 85, 89, 90, 94, 98, 102, 103], "y": [4, 7, 8, 12, 13, 15, 17, 27, 33, 59, 61, 62, 65, 71, 74, 79, 80, 82, 84, 91, 94, 98, 102], "compon": [4, 15, 16, 17, 18, 28, 30, 33, 64, 72, 81, 83, 85, 96, 99, 102], "compute_one_electron_oper": [4, 5], "oper": [4, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 22, 27, 28, 29, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 77, 78, 79, 80, 81, 83, 85, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 104, 105], "one": [4, 6, 7, 8, 10, 12, 15, 16, 17, 18, 21, 22, 23, 27, 28, 29, 30, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 65, 68, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 90, 91, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 107], "fermion": [4, 6, 8, 10, 11, 13, 15, 17, 18, 19, 20, 28, 29, 34, 37, 38, 39, 41, 49, 55, 58, 66, 68, 69, 72, 77, 83, 84, 85, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 104, 105, 107], "For": [4, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 28, 31, 32, 33, 34, 35, 39, 40, 41, 43, 47, 48, 50, 51, 52, 53, 56, 57, 58, 61, 62, 65, 68, 69, 71, 72, 74, 76, 77, 79, 80, 81, 82, 83, 85, 88, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], "depend": [4, 8, 9, 13, 14, 15, 16, 35, 38, 39, 42, 43, 45, 46, 48, 56, 58, 62, 65, 69, 74, 79, 80, 81, 82, 85, 93, 96, 104], "kin": [4, 84], "kinet": [4, 98], "nuc": [4, 28, 30], "nucleu": 4, "attract": 4, "hcore": 4, "ovlp": [4, 77], "r": [4, 6, 7, 8, 15, 17, 21, 28, 30, 43, 50, 52, 58, 68, 70, 78, 79, 82, 84, 90, 91, 99], "first": [4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 28, 33, 37, 38, 39, 40, 43, 45, 53, 54, 56, 58, 59, 61, 62, 63, 64, 66, 68, 70, 71, 72, 73, 75, 77, 78, 79, 81, 82, 84, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104], "moment": [4, 8, 20, 63, 85, 107], "rr": 4, "second": [4, 6, 8, 12, 13, 15, 16, 17, 19, 28, 37, 40, 43, 45, 55, 56, 68, 72, 75, 78, 81, 82, 84, 85, 90, 96, 98, 99, 101, 102, 104], "xx": 4, "xy": [4, 12], "xz": [4, 12, 82, 83], "yx": 4, "yy": 4, "yz": [4, 12, 83], "zx": 4, "zy": 4, "zz": 4, "dm": [4, 22, 28], "kei": [4, 7, 8, 9, 12, 15, 16, 18, 19, 20, 32, 63, 72, 79, 82, 85, 97, 99, 105], "coordin": [4, 12, 71, 72, 96, 99, 105], "posit": [4, 8, 9, 11, 12, 15, 16, 17, 18, 28, 30, 45, 51, 71, 83, 94, 101, 103], "fermionoper": [4, 6, 7, 8, 11, 13, 15, 17, 20, 41, 54, 63, 66, 82, 83, 85, 93, 102, 107], "One": [4, 8, 10, 15, 16, 17, 43, 44, 45, 52, 56, 57, 59, 62, 72, 75, 79, 80, 82, 90, 91, 94, 98, 107], "extract_point_group_inform": [4, 5], "reduce_infinite_point_group": 4, "point": [4, 6, 8, 11, 13, 14, 15, 17, 19, 25, 28, 29, 30, 31, 39, 44, 67, 68, 69, 70, 81, 82, 90, 91, 92, 94, 95, 96, 98, 99, 101, 102, 103, 105, 107], "reduc": [4, 8, 10, 13, 15, 16, 17, 19, 21, 24, 28, 29, 33, 41, 51, 54, 58, 60, 62, 64, 67, 68, 72, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 95, 96, 98, 99, 102, 103, 104, 105, 107], "infinit": 4, "coov": 4, "c2v": [4, 19, 70, 83, 94], "symmetri": [4, 7, 8, 15, 16, 17, 20, 28, 34, 37, 39, 51, 55, 58, 64, 66, 68, 69, 70, 72, 80, 82, 84, 85, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 105], "irrep": [4, 15, 17, 19, 83], "sto3g": [4, 21, 22, 26, 28, 30, 68, 70, 100], "point_group_symmetri": [4, 93, 94, 96, 99, 102, 103], "ham": [4, 7, 11, 15, 18, 62, 82], "d2h": [4, 51, 66, 82, 83, 90, 91, 92], "ag": [4, 51, 66, 82, 83, 90, 91, 92], "b1u": [4, 51, 66, 82, 83, 90, 91, 92], "from_mf": [4, 5, 28, 99], "either": [4, 8, 9, 12, 15, 16, 17, 18, 27, 41, 45, 49, 51, 56, 60, 74, 77, 81, 82, 83, 97, 99, 102, 104], "level": [4, 6, 8, 15, 16, 22, 28, 29, 30, 36, 38, 39, 41, 44, 48, 49, 55, 59, 62, 67, 68, 72, 74, 79, 80, 81, 82, 85, 90, 94, 95, 96, 99, 103, 104, 107], "shift": [4, 8, 17, 78, 90], "generate_report": [4, 5, 6, 7, 11, 14, 15, 20, 37, 38, 39, 41, 48, 55, 58, 73, 82, 85, 93, 97, 98, 99, 102, 103], "report": [4, 6, 9, 11, 12, 14, 15, 16, 20, 39, 56, 58, 72, 82, 85, 90, 93, 98, 102], "hierarch": [4, 11, 67], "dictionari": [4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 41, 49, 58, 82, 85], "attribut": [4, 8, 12, 13, 15, 18, 28, 58, 59, 71, 96, 98, 101], "mo_coeff": [4, 5, 11, 28, 70, 99], "export": 4, "intern": [4, 8, 12, 13, 14, 15, 16, 22, 28, 30, 34, 37, 58, 62, 71, 74, 79, 81, 84, 92, 102], "get_ac0_correct": [4, 5, 28, 99, 105], "rdm": [4, 8, 10, 15, 17, 22, 28, 66, 67, 68, 82, 85, 95, 99, 105], "To": [4, 6, 7, 8, 15, 16, 17, 19, 22, 26, 28, 30, 32, 33, 34, 43, 44, 57, 58, 59, 61, 64, 66, 68, 69, 70, 71, 73, 75, 77, 79, 81, 83, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106], "obtain": [4, 6, 8, 14, 15, 16, 21, 28, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 56, 58, 59, 62, 64, 66, 67, 68, 69, 72, 74, 75, 79, 80, 83, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 107], "ac0": [4, 85, 105, 108], "correct": [4, 8, 15, 16, 21, 22, 69, 85, 91, 98, 103, 108], "wft": [4, 85, 108], "dft": [4, 24, 85, 99, 104, 105, 108], "get_subsystem_driv": [4, 5, 105], "get_casci_1234pdm": [4, 5], "pdm": [4, 8, 17, 28, 85, 99, 105], "casci": [4, 28, 64, 85, 99, 104, 105], "wavefunct": [4, 6, 43, 45, 46, 58, 82, 85, 91, 93, 94, 96, 97, 98, 101, 104], "get_casci_12rdm": [4, 5, 85], "get_cube_dens": [4, 5], "density_matrix": 4, "cube_resolut": 4, "25": [4, 15, 27, 28, 43, 44, 63, 66, 73, 77, 79, 82, 84, 85, 89, 93, 94, 101, 103], "bodi": [4, 7, 8, 10, 15, 17, 21, 28, 29, 30, 37, 56, 66, 68, 72, 82, 85, 99, 105], "2d": [4, 8, 15, 28, 29, 82], "arrai": [4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 26, 28, 30, 38, 39, 41, 45, 50, 67, 68, 71, 73, 79, 82, 89, 95, 102], "rohf": [4, 10, 11, 28, 30, 96, 104], "resolut": [4, 6, 44, 82, 84], "cubegen": 4, "get_cube_orbit": [4, 5, 26, 96, 100], "orbital_indic": 4, "interest": [4, 6, 17, 19, 25, 28, 30, 33, 40, 41, 45, 54, 68, 72, 74, 81, 83, 90, 93, 95, 97, 101, 103, 104], "spinorbit": 4, "mo1_alpha": 4, "mo1_beta": 4, "mo2_alpha": 4, "mo2_beta": 4, "get_double_factorized_system": [4, 5, 85], "tol1": [4, 15, 82], "tol2": [4, 15], "decompositionmethod": [4, 15, 20], "eig": [4, 15, 20, 28], "diagonalize_one_bodi": [4, 15], "diagonalize_one_body_offset": [4, 15], "combine_one_body_term": [4, 15], "explicit": [4, 15, 19, 22, 28, 41, 82, 83, 84, 90], "factor": [4, 7, 8, 12, 15, 16, 20, 24, 43, 58, 77, 78, 80, 85, 107], "fock": [4, 7, 10, 11, 13, 15, 17, 18, 22, 26, 28, 29, 37, 38, 39, 43, 45, 49, 53, 56, 58, 68, 70, 72, 82, 83, 84, 90, 92, 93, 94, 96, 99, 101, 102, 103, 104, 105], "hartre": [4, 6, 11, 22, 26, 27, 28, 29, 37, 43, 44, 45, 49, 58, 68, 70, 72, 82, 83, 84, 90, 92, 93, 94, 96, 99, 102, 103, 104, 105], "h_0": [4, 15, 75], "h_1": [4, 75, 82], "v": [4, 8, 9, 11, 12, 15, 16, 17, 21, 28, 52, 59, 61, 80, 82, 84, 104], "where": [4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 25, 27, 28, 29, 30, 33, 37, 38, 39, 41, 43, 44, 45, 50, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 104, 105], "coulomb": [4, 11, 15, 28, 30], "interact": [4, 8, 11, 15, 17, 21, 23, 25, 26, 28, 30, 33, 36, 49, 56, 64, 82, 85, 89, 96, 99, 102, 104, 107, 108], "sum_": [4, 7, 11, 15, 16, 17, 28, 30, 38, 43, 50, 57, 58, 68, 72, 74, 75, 78, 82, 101, 102], "ijkl": [4, 15, 17, 37, 72, 82, 102], "ij": [4, 7, 8, 11, 15, 17, 38, 39, 50, 64, 72, 74, 82, 85, 102], "kl": [4, 15, 16, 17, 38, 74], "a_i": [4, 7, 8, 15, 18, 50, 82], "dagger": [4, 7, 8, 15, 16, 17, 20, 37, 38, 39, 50, 54, 58, 64, 68, 72, 74, 77, 78, 82, 93, 99, 102], "a_j": [4, 7, 15, 38, 50, 72, 82], "a_k": [4, 15], "a_l": [4, 15, 72], "reorder": [4, 15], "two": [4, 6, 7, 8, 10, 12, 15, 16, 17, 18, 22, 24, 28, 29, 30, 37, 40, 41, 42, 43, 45, 51, 53, 54, 56, 58, 59, 61, 62, 64, 65, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 90, 98, 99, 101, 102, 103, 104, 105], "offset": [4, 8, 15, 82], "s_": [4, 8, 15, 17, 38, 64, 85, 93], "sum_k": [4, 15], "ik": [4, 15, 17, 37], "kj": [4, 15, 17], "constant": [4, 12, 15, 16, 20, 21, 28, 45, 68, 82, 98], "respect": [4, 6, 8, 13, 15, 16, 17, 27, 38, 39, 40, 41, 44, 45, 53, 56, 62, 64, 65, 67, 68, 69, 72, 73, 74, 82, 83, 92, 93, 94, 96, 97, 98, 99, 101, 102, 104, 105], "decompos": [4, 10, 15, 56, 68, 81, 82], "repuls": [4, 11, 15, 84], "eri": [4, 15], "form": [4, 6, 8, 10, 11, 13, 15, 16, 17, 18, 19, 28, 30, 37, 45, 50, 56, 57, 58, 68, 72, 74, 75, 77, 78, 79, 81, 82, 83, 90, 93, 97, 99, 102, 104, 108], "pq": [4, 15, 17, 68, 82], "sum_t": [4, 15, 82], "n_": [4, 7, 15, 19, 55, 68, 82, 83], "gamma": [4, 8, 14, 15, 28, 29, 68, 74, 82, 104], "v_": [4, 15, 17, 28, 30, 68, 82], "eigenvalu": [4, 6, 8, 9, 15, 16, 17, 20, 38, 39, 63, 64, 73, 79, 82, 84, 85, 90, 93, 97, 102], "decomposit": [4, 7, 13, 15, 21, 28, 43, 56, 58, 68, 82, 83, 84, 85, 97], "pivot": [4, 15, 33, 82, 98], "incomplet": [4, 15, 82], "choleski": [4, 15, 20, 82, 84, 85], "cho": [4, 15], "sum_u": [4, 15, 82], "lambda": [4, 8, 15, 37, 58, 59, 61, 62, 65, 66, 82, 101, 104], "u_": [4, 15, 16, 17, 74, 77, 79, 82], "pu": [4, 15, 82], "lambda_u": [4, 15, 82], "qu": [4, 15, 82], "At": [4, 15, 16, 37, 59, 68, 81, 95, 97], "we": [4, 8, 12, 15, 16, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108], "start": [4, 8, 9, 14, 15, 16, 17, 20, 22, 28, 31, 32, 44, 45, 69, 70, 73, 80, 82, 85, 91, 94, 95, 97, 98, 99, 101, 102, 103], "smallest": [4, 15, 82], "those": [4, 6, 15, 17, 18, 28, 37, 43, 45, 68, 69, 74, 79, 81, 82, 97, 99, 101, 104, 105], "exce": [4, 15, 82], "iter": [4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 27, 28, 37, 40, 42, 47, 68, 73, 79, 80, 81, 82, 84, 85, 95, 96, 97, 98, 101], "less": [4, 8, 15, 16, 17, 18, 33, 37, 49, 56, 58, 73, 82, 93], "than": [4, 6, 7, 8, 13, 15, 16, 17, 18, 19, 27, 33, 34, 37, 40, 51, 56, 62, 68, 70, 71, 77, 79, 80, 82, 83, 85, 90, 93, 94, 95, 98, 99, 101, 103], "like": [4, 6, 8, 15, 18, 21, 22, 28, 30, 37, 41, 45, 53, 54, 55, 62, 73, 79, 81, 82, 94, 96, 99, 104, 105, 107], "consolid": [4, 15, 82], "tild": [4, 15, 104], "_": [4, 7, 8, 15, 16, 17, 21, 22, 28, 30, 37, 50, 55, 57, 58, 61, 62, 64, 68, 72, 74, 76, 82, 93, 99, 102, 104], "h_": [4, 7, 15, 17, 28, 30, 38, 64, 68, 72, 75, 82, 93, 102], "sum_r": [4, 15, 82], "w_": [4, 15, 17], "pr": [4, 8, 15, 99], "omega_r": [4, 15, 82], "qr": [4, 7, 15, 50, 68, 82], "intend": [4, 8, 13, 15, 17, 65], "reduct": [4, 6, 15, 16, 19, 28, 29, 43, 51, 62, 66, 75, 94, 95, 107], "classic": [4, 6, 10, 11, 15, 16, 21, 24, 30, 33, 34, 38, 39, 41, 42, 44, 47, 48, 56, 68, 69, 70, 72, 79, 82, 83, 84, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 107, 108], "memori": [4, 8, 9, 15, 28, 82, 85], "usag": [4, 6, 13, 15, 16, 19, 24, 27, 44, 48, 56, 65, 77, 79, 80, 82, 83, 85, 91, 92, 93, 98, 107], "neg": [4, 7, 11, 15, 16, 51, 70], "same": [4, 6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 28, 37, 38, 39, 40, 41, 43, 50, 51, 53, 56, 58, 62, 64, 68, 70, 73, 77, 79, 82, 83, 85, 90, 92, 95, 98, 99, 101, 104, 105], "physic": [4, 15, 16, 27, 33, 43, 44, 49, 55, 59, 60, 62, 65, 67, 68, 72, 79, 80, 83, 84, 91, 98], "h_pq": 4, "requir": [4, 6, 7, 8, 10, 13, 15, 16, 17, 18, 19, 22, 25, 27, 28, 32, 34, 36, 37, 38, 40, 41, 42, 43, 48, 49, 59, 62, 64, 65, 68, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 90, 91, 92, 95, 96, 98, 101, 102, 103, 105, 107], "restricteddoublefactorizedhamiltonian": [4, 15, 20], "fermionspac": [4, 7, 8, 10, 11, 17, 20, 22, 28, 34, 37, 41, 45, 51, 53, 54, 58, 66, 68, 69, 70, 73, 83, 85, 90, 91, 92, 101, 102, 107], "fermionst": [4, 6, 7, 8, 10, 11, 13, 15, 17, 18, 20, 22, 28, 34, 37, 41, 51, 53, 54, 58, 66, 68, 70, 77, 82, 83, 85, 90, 91, 92, 101, 102, 107], "store": [4, 6, 7, 8, 9, 10, 13, 15, 16, 17, 18, 19, 25, 28, 30, 33, 34, 36, 38, 39, 41, 58, 59, 62, 65, 70, 81, 82, 83, 85, 89, 93, 96, 97, 99, 102, 104, 105], "henrik": [4, 84], "koch": [4, 84], "alfredo": [4, 84], "s\u00e1nchez": [4, 84], "de": [4, 17, 39, 84], "mer\u00e1": [4, 84], "thoma": [4, 84], "bondo": [4, 84], "pedersen": [4, 84], "scale": [4, 6, 7, 15, 33, 41, 43, 44, 56, 80, 82, 84, 85, 93], "j": [4, 8, 10, 11, 12, 15, 16, 17, 18, 27, 28, 30, 37, 38, 39, 43, 44, 56, 64, 70, 72, 82, 84, 86, 93, 99, 102], "chem": [4, 15, 70, 84], "phy": [4, 13, 15, 84], "118": [4, 15, 84], "21": [4, 8, 15, 26, 27, 28, 39, 40, 44, 56, 63, 84, 85, 93, 94, 101, 103], "9481": [4, 15, 84], "9484": [4, 15, 84], "2003": [4, 15, 84], "url": [4, 84, 86, 89], "http": [4, 6, 7, 8, 14, 16, 84, 85, 86, 89, 94, 100], "doi": [4, 6, 7, 8, 84], "org": [4, 6, 7, 8, 16, 84, 89], "10": [4, 6, 7, 8, 13, 16, 17, 22, 26, 27, 28, 29, 35, 37, 38, 43, 44, 56, 63, 69, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 105], "1063": [4, 7, 8, 84], "1578621": [4, 84], "evgeni": [4, 84, 86], "epifanovski": [4, 84], "dmitri": [4, 84], "zuev": [4, 84], "xintian": [4, 84], "feng": [4, 84], "kiril": [4, 84], "khistyaev": [4, 84], "yang": [4, 84], "shao": [4, 84], "anna": [4, 84], "krylov": [4, 8, 60, 84, 107], "ident": [4, 8, 9, 15, 16, 17, 18, 20, 53, 77, 82, 84, 94], "within": [4, 6, 7, 8, 9, 10, 12, 14, 15, 17, 18, 19, 22, 23, 28, 37, 38, 41, 43, 63, 65, 71, 72, 79, 80, 82, 83, 84, 90, 92, 93, 94, 95, 96, 97, 98, 99, 103, 104, 105], "coupl": [4, 7, 11, 33, 34, 37, 41, 49, 50, 54, 55, 72, 82, 84, 90, 91, 92, 93, 94, 95, 96, 97, 99, 104, 105], "cluster": [4, 7, 34, 37, 41, 49, 54, 82, 84, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 105, 108], "equat": [4, 6, 8, 14, 15, 17, 19, 38, 40, 42, 45, 46, 68, 74, 82, 84, 85, 93, 101, 104, 107], "motion": [4, 6, 8, 42, 45, 46, 84, 85, 107], "theori": [4, 6, 10, 16, 22, 28, 42, 58, 84, 92, 95, 97, 98, 99, 102, 104, 105], "benchmark": [4, 28, 70, 84, 94, 95, 103], "139": [4, 15, 84], "13": [4, 8, 16, 28, 42, 43, 63, 69, 75, 79, 81, 82, 84, 85, 92, 93, 94, 95, 96, 101, 102, 103], "134105": [4, 15, 84], "2013": [4, 15, 84], "4820484": [4, 84], "get_excitation_amplitud": [4, 5], "fock_spac": [4, 28, 45, 102, 103], "t1": 4, "t2": 4, "compact": [4, 6, 15, 28, 58, 82, 85, 96], "get": [4, 6, 7, 8, 9, 12, 14, 15, 16, 17, 20, 24, 28, 31, 43, 62, 66, 71, 79, 80, 81, 85, 103, 104, 105, 106, 107], "guess": [4, 11, 15, 72, 90, 96, 101], "excit": [4, 6, 7, 8, 15, 17, 18, 33, 34, 37, 38, 39, 40, 41, 45, 47, 49, 51, 53, 54, 56, 58, 66, 69, 72, 82, 83, 84, 85, 90, 92, 93, 94, 96, 97, 99, 104, 105, 108], "amplitud": [4, 16, 24, 85, 89, 90, 94, 102], "includ": [4, 6, 7, 8, 10, 13, 14, 15, 16, 17, 19, 22, 26, 28, 30, 33, 36, 39, 42, 44, 48, 49, 58, 68, 69, 70, 71, 72, 74, 79, 80, 81, 82, 83, 92, 93, 94, 96, 98, 100, 101, 104, 105, 106, 107, 108], "singl": [4, 7, 8, 10, 13, 15, 16, 17, 18, 19, 22, 27, 28, 34, 38, 39, 49, 51, 53, 54, 55, 56, 57, 58, 62, 64, 66, 68, 69, 70, 71, 74, 75, 77, 78, 81, 82, 83, 84, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 105, 107], "enabl": [4, 7, 16, 25, 41, 65, 68, 69, 79, 82, 85, 92, 93, 96, 98, 99, 102, 103, 105], "get_excitation_oper": [4, 5], "antihermitian": 4, "anti": [4, 7, 15, 17, 37, 54, 58, 82], "hermitian": [4, 6, 7, 8, 9, 14, 15, 16, 17, 37, 40, 54, 58, 64, 74, 82, 85, 92, 93, 97, 98, 105], "fermionoperatorlist": [4, 6, 7, 13, 15, 17, 20, 54, 58, 82, 83, 97], "get_lowdin_system": [4, 5, 22, 28, 95], "lowdin": 4, "store_ao": 4, "orthogon": [4, 6, 8, 10, 15, 38, 40, 60, 82, 84, 85, 93, 95, 101], "orth": 4, "orth_ao": 4, "pyscfchemistryrestrictedintegraloper": [4, 5, 10, 22, 28], "pyscfchemistryunrestrictedintegraloper": [4, 5], "underli": [4, 6, 8, 12, 13, 15, 17, 18, 19, 49, 67, 72, 73, 103], "chemistryrestrictedintegraloper": [4, 10, 11, 13, 15, 20, 22, 28, 68, 82, 85, 91, 102, 107], "chemistryunrestrictedintegraloper": [4, 11, 15, 20, 82, 85], "restrictedonebodyrdm": [4, 6, 8, 10, 15, 20, 66], "unrestrictedonebodyrdm": [4, 8, 15, 20, 82], "document": [4, 6, 8, 13, 14, 15, 16, 18, 23, 25, 31, 33, 60, 62, 69, 81, 82, 83, 85, 90, 98, 99, 102, 106], "get_madelung_const": [4, 5], "madelung": 4, "contribut": [4, 7, 15, 21, 23, 28, 30, 34, 68, 90, 96, 98], "get_mulliken_pop": [4, 5], "interfac": [4, 8, 10, 14, 16, 22, 23, 26, 27, 28, 33, 34, 38, 39, 62, 72, 85, 89, 94, 100, 102, 104], "mulliken": 4, "popul": [4, 15, 16, 20, 45, 79], "analysi": [4, 7, 16, 19, 23, 33, 62, 80, 82, 83, 85, 89, 94, 97, 98, 103, 108], "get_nevpt2_correct": [4, 5, 28, 85, 99, 105], "nevpt2": [4, 84, 85, 105, 107, 108], "get_orbital_coeffici": [4, 5, 96], "get_rdm1_ccsd": [4, 5], "ccsd": [4, 24, 28, 34, 70, 85, 94, 95], "get_rdm2_ccsd": [4, 5], "replac": [4, 7, 8, 13, 15, 16, 18, 19, 20, 28, 44, 58, 68, 70, 74, 75, 79, 80, 81, 85, 99, 103, 104, 105], "restrictedtwobodyrdm": [4, 15, 20, 82], "avoid": [4, 8, 13, 15, 16, 17, 68, 77, 83, 85, 96, 98], "raw": [4, 6, 8, 15, 16, 69], "4d": [4, 15], "wrap": [4, 9, 15, 16, 27, 28, 49, 57, 73, 103, 105], "basepyscfdriv": 4, "target": [4, 12, 15, 16, 28, 43, 80, 81, 82, 96, 98], "storag": [4, 8, 36, 82], "s1": [4, 8, 34, 41, 74, 94, 97, 102], "s4": [4, 15], "s8": [4, 15], "permut": [4, 8, 15, 17, 20, 37], "chemistryrestrictedintegraloperatorcompact": [4, 15, 20, 28, 82], "get_system_ao": [4, 5, 22, 28], "run_hf": [4, 5, 22, 28, 29, 94, 96, 99, 104], "ha": [4, 6, 7, 8, 9, 11, 12, 15, 16, 17, 18, 22, 25, 27, 28, 29, 31, 33, 34, 36, 37, 43, 44, 45, 48, 49, 54, 55, 56, 58, 65, 68, 70, 71, 74, 77, 78, 79, 80, 81, 82, 83, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 105], "alreadi": [4, 7, 8, 16, 17, 38, 39, 62, 68], "been": [4, 6, 7, 11, 15, 16, 17, 33, 37, 43, 45, 58, 59, 69, 72, 77, 79, 81, 82, 85, 90, 92, 93, 94, 96, 97, 99], "prior": [4, 6, 15, 16, 18, 22, 24, 27, 28, 41, 68, 80, 81, 82, 83, 84, 98], "behavior": [4, 7, 8, 13, 15, 16, 17, 18, 19, 33, 48, 80, 82, 83, 90, 91, 98], "follow": [4, 7, 8, 9, 13, 15, 16, 17, 18, 19, 21, 22, 26, 27, 28, 30, 34, 36, 37, 38, 39, 40, 42, 43, 44, 45, 48, 52, 55, 56, 57, 58, 59, 63, 65, 68, 69, 70, 74, 77, 78, 79, 80, 81, 82, 85, 90, 93, 94, 96, 97, 98, 99, 102, 104], "make_actives_contigu": [4, 5], "contigu": [4, 8], "mf_energi": [4, 5, 21, 28, 102, 103], "mf_type": [4, 5], "n_electron": [4, 5, 10, 11, 20, 70, 102], "n_orb": [4, 5, 7, 11, 15, 17, 20, 82], "print_json_report": [4, 5, 11, 20], "json": [4, 6, 11, 12, 15, 71], "run_casci": [4, 5, 28], "run_ccsd": [4, 5, 28, 94, 95], "cc": [4, 79, 82, 94], "run_mp2": [4, 5, 28, 95], "mp2": [4, 24, 28, 95], "mp": 4, "set_checkfil": [4, 5], "chkfile": 4, "init_guess": 4, "checkpoint": [4, 85], "exist": [4, 7, 8, 9, 12, 15, 45, 46, 71, 98, 104], "read": [4, 8, 15, 44, 62, 89], "set_diis_space_dimens": [4, 5], "diis_space_dimens": 4, "dii": 4, "set_init_orbit": [4, 5], "init_orb": 4, "set_level_shift": [4, 5], "level_shift_valu": 4, "artifici": 4, "dure": [4, 9, 11, 16, 21, 28, 32, 33, 40, 41, 45, 55, 56, 59, 62, 68, 90, 93, 95, 97], "chang": [4, 7, 8, 10, 12, 16, 17, 18, 33, 34, 37, 41, 56, 69, 70, 71, 72, 80, 81, 83, 85, 90, 91, 98, 102, 103], "even": [4, 8, 15, 16, 17, 22, 28, 33, 49, 51, 77, 78, 79, 80, 96, 97], "though": [4, 13, 82], "last": [4, 6, 8, 11, 12, 15, 22, 28, 71, 72, 100], "without": [4, 7, 8, 9, 13, 15, 16, 17, 24, 33, 49, 65, 68, 69, 71, 79, 80, 81, 82, 83, 90, 91, 92, 95, 98, 103], "set_max_scf_cycl": [4, 5], "cycl": [4, 34, 41, 94], "chemistrydriverpyscfembeddinggammarohf_uhf": [4, 5], "multipl": [4, 7, 8, 9, 10, 15, 16, 17, 18, 22, 28, 61, 70, 75, 83, 84, 89, 94, 96, 104], "embedded_spin": 4, "rok": 4, "subsequ": [4, 6, 8, 15, 16, 17, 38, 39, 90, 93, 97, 98, 99], "convert": [4, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 28, 56, 59, 66, 71, 72, 79, 81, 82, 83, 85, 94, 99, 102], "unrestrict": [4, 7, 15, 20, 50, 70, 85, 107], "spin": [4, 6, 7, 8, 11, 15, 17, 18, 22, 27, 28, 29, 30, 34, 37, 38, 39, 44, 50, 51, 53, 54, 55, 56, 58, 66, 68, 70, 77, 82, 83, 85, 90, 92, 93, 94, 96, 98, 99, 101, 102, 103, 104, 105, 107], "unrestricteddoublefactorizedhamiltonian": [4, 15, 20], "aabb": [4, 15, 17], "bbaa": [4, 15], "cannot": [4, 8, 15, 16, 19, 39, 80, 82, 93], "request": [4, 15, 16, 19, 62, 102], "aaaa": [4, 15], "bbbb": [4, 15], "while": [4, 6, 7, 8, 12, 15, 16, 21, 28, 30, 37, 39, 45, 48, 55, 58, 59, 62, 70, 81, 82, 83, 92, 97, 98, 99, 102, 103, 104, 105], "chemistryunrestrictedintegraloperatorcompact": [4, 15, 20, 82], "chemistrydriverpyscfembeddingrhf": [4, 5, 28, 105], "chemistrydriverpyscfembeddingrohf": [4, 5, 28, 104], "b3lyp5": [4, 104, 105], "averag": [4, 8, 16, 20, 62, 63, 64, 77, 81, 85, 90, 91, 92, 93, 94, 98, 101, 107, 108], "over": [4, 6, 8, 9, 11, 15, 16, 17, 18, 19, 21, 22, 28, 40, 48, 49, 54, 58, 59, 61, 62, 66, 71, 75, 81, 82, 85, 90, 91, 93, 94, 99, 102, 104], "channel": [4, 7, 15, 50, 82], "integraloper": 4, "would": [4, 8, 12, 15, 21, 22, 28, 33, 41, 45, 53, 54, 66, 95, 96, 99], "bath": [4, 10, 22, 28, 68, 95], "chemistrydriverpyscfembeddingrohf_uhf": [4, 5, 28], "chemistrydriverpyscfgammarhf": [4, 5, 28, 29], "pseudo": [4, 14, 37], "space_group_symmetri": 4, "soscf": [4, 96], "provid": [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 26, 27, 28, 31, 33, 34, 36, 38, 39, 40, 41, 43, 45, 48, 49, 52, 54, 56, 57, 58, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108], "overrid": [4, 6, 14, 45], "unit_cel": [4, 12, 26, 71], "solver": [4, 10, 14, 24, 38, 68, 72, 73, 84, 85, 95, 96, 104], "newton": [4, 10, 22, 28, 95, 96], "matric": [4, 8, 9, 10, 15, 28, 38, 50, 60, 67, 71, 82, 84, 85, 93, 99, 105], "instal": [4, 28, 31, 35, 36, 85, 100, 102], "gammcor": 4, "particl": [4, 7, 8, 10, 13, 15, 17, 28, 30, 33, 39, 45, 55, 56, 68, 82, 92, 98, 99, 104, 105], "rdm1": [4, 10, 15, 22, 28, 66, 70, 82, 95, 99], "rdm2": [4, 10, 15, 28, 99], "1021": [4, 84], "ac": [4, 17, 28, 84, 99], "jctc": [4, 17, 84], "8b00213": 4, "strongli": [4, 28, 68, 84, 97, 99, 105], "contract": [4, 15, 17, 19, 28, 84, 85, 99, 105], "un": [4, 15], "pdm1": [4, 28, 99], "pdm4": [4, 17, 28, 99], "chemistrydriverpyscfgammarohf": [4, 5, 28, 29], "multicpl": 4, "chemistrydriverpyscfintegr": [4, 5], "h1": [4, 12, 24, 79, 80, 91, 92, 93, 94, 98], "h2": [4, 12, 22, 24, 28, 29, 59, 69, 70, 71, 74, 75, 80, 81, 82, 90, 91, 92, 94, 98, 101, 107, 108], "initial_dm": 4, "open_shell_mf": 4, "chemistri": [4, 10, 15, 22, 23, 27, 28, 30, 31, 33, 34, 43, 47, 48, 50, 55, 56, 68, 69, 71, 73, 75, 79, 83, 84, 85, 86, 89, 94, 97, 99, 102, 103, 104, 105, 108], "from_integral_oper": [4, 5], "hamiltonian_oper": [4, 7, 10, 11, 22, 28, 34, 45, 59, 64, 66, 68, 70, 73, 74, 75, 81, 82, 83, 90, 91, 92, 95, 101, 102], "taken": [4, 12, 15, 16, 57, 58, 82, 83], "basepyscfdriverintegr": 4, "get_one_body_rdm": [4, 5], "densoti": 4, "runtimeerror": [4, 6, 8, 9, 14, 15, 18], "point_group_symmetry_subgroup": 4, "instead": [4, 8, 10, 15, 16, 22, 28, 37, 39, 67, 68, 69, 91, 95, 98, 102], "full": [4, 8, 15, 39, 48, 56, 60, 67, 70, 75, 78, 82, 83, 90, 92, 94, 95, 99, 102, 104, 106, 107], "chemistrydriverpyscfmolecularrhfqmmmcosmo": [4, 5, 21, 22, 28, 30], "do_qmmm": [4, 28, 30], "mm_charg": [4, 28, 30], "mm_geometri": [4, 28, 30], "do_mm_coulomb": [4, 28, 30], "do_cosmo": [4, 21, 22, 28], "solvent_epsilon": 4, "cosmo_solv": 4, "water": [4, 12, 71, 103], "mechan": [4, 28, 30, 82, 104], "qmmm": 4, "conductor": [4, 21, 28], "screen": [4, 14, 21, 28, 84], "model": [4, 11, 21, 22, 28, 33, 63, 69, 72, 80, 84, 85, 108], "cosmo": [4, 22, 68, 84], "do": [4, 6, 7, 8, 13, 15, 17, 28, 34, 36, 37, 38, 42, 43, 55, 57, 65, 67, 68, 72, 74, 81, 83, 90, 94, 96, 97, 99, 101], "mm": [4, 84], "need": [4, 8, 13, 15, 16, 21, 22, 27, 28, 33, 37, 38, 39, 44, 45, 53, 54, 55, 56, 57, 58, 59, 61, 62, 65, 66, 68, 69, 72, 80, 81, 82, 83, 90, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103], "final": [4, 6, 8, 12, 14, 15, 22, 26, 27, 28, 37, 40, 41, 43, 44, 45, 47, 49, 55, 59, 62, 67, 69, 70, 73, 75, 77, 81, 82, 85, 90, 95, 96, 97, 98, 99, 102, 103, 104, 105], "e_mm_coulomb": [4, 28, 30], "add": [4, 7, 8, 12, 16, 28, 30, 45, 52, 69, 72, 85, 90, 91], "implicit": [4, 15, 18, 21, 28, 85], "get_system_legaci": 4, "v_solvent": 4, "v_solvet": 4, "cosmo_correct": [4, 22, 28], "e_cosmo": 4, "tr": [4, 21, 28, 104], "after": [4, 6, 8, 10, 11, 15, 16, 18, 19, 22, 28, 34, 36, 37, 45, 48, 55, 59, 62, 68, 69, 81, 82, 92, 93, 94, 98, 99, 102, 103], "_run_hf": 4, "dielectr": [4, 21, 28, 84], "solvent": [4, 21, 28, 68, 84, 104], "static": [4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 26, 28, 99, 105], "build_mm_charg": [4, 5], "put": [4, 8, 20, 108], "friendli": 4, "accord": [4, 7, 8, 9, 10, 12, 15, 16, 17, 18, 19, 21, 28, 39, 50, 58, 73, 82, 93, 101], "atom1": 4, "atom2": 4, "noth": [4, 12, 90, 91], "get_mm_coulomb": [4, 5], "mm_charges_pyscf": 4, "between": [4, 6, 7, 8, 12, 15, 16, 17, 18, 21, 24, 28, 30, 33, 37, 40, 48, 50, 55, 56, 58, 71, 72, 78, 82, 84, 85, 92, 96, 97, 98, 99, 104, 105], "electrostat": 4, "chemistrydriverpyscfmolecularrohf": [4, 5, 28, 94, 96], "chemistrydriverpyscfmolecularrohfqmmmcosmo": [4, 5, 28, 30], "lvert": 4, "rvert": 4, "solv": [4, 5, 6, 9, 10, 14, 20, 21, 22, 28, 33, 38, 42, 45, 46, 56, 64, 68, 72, 82, 85, 91, 93, 94, 98], "e_": [4, 7, 21, 28, 30, 38, 39, 98, 104], "text": [4, 8, 14, 15, 16, 17, 21, 28, 30, 37, 55, 56, 58, 59, 68, 74, 75, 77, 81, 90], "cdot": [4, 43, 44], "chemistrydriverpyscfmolecularuhf": [4, 5, 28], "chemistrydriverpyscfmolecularuhfqmmmcosmo": [4, 5, 28, 30], "chemistrydriverpyscfmomentumrhf": [4, 5, 28, 29], "nk": [4, 28, 29], "momentum": [4, 17, 28, 29, 82], "direct": [4, 7, 8, 10, 12, 14, 15, 16, 19, 58, 64, 70, 74, 77, 82, 83, 85, 93, 101, 107], "n_kp": [4, 5, 17, 20], "chemistrydriverpyscfmomentumrohf": [4, 5, 28], "dmetrhffragmentpyscfact": [4, 5, 10, 22, 28], "mask": [4, 10, 15, 17, 22, 28, 68, 95], "custom": [4, 10, 11, 13, 14, 16, 24, 25, 41, 45, 52, 57, 59, 67, 72, 85, 90, 97, 102, 107], "dmetrhf": [4, 10, 20, 22, 28, 68, 85, 95], "solve_act": [4, 5, 10, 20, 22, 28, 68], "ground": [4, 6, 7, 8, 10, 22, 28, 38, 39, 40, 41, 42, 45, 47, 49, 56, 58, 64, 68, 72, 83, 85, 90, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 107], "quantiti": [4, 8, 15, 16, 21, 28, 33, 41, 59, 60, 62, 63, 65, 67, 71, 72, 74, 81, 82, 85, 90, 93, 94, 97, 102], "doe": [4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 22, 28, 30, 48, 55, 56, 58, 61, 62, 65, 69, 77, 78, 82, 90, 94, 96, 97, 103], "problem": [4, 6, 8, 9, 10, 13, 14, 16, 17, 21, 28, 29, 31, 32, 33, 38, 42, 48, 56, 64, 68, 72, 73, 79, 82, 83, 84, 85, 93, 94, 96], "chosen": [4, 37, 43, 44, 45, 56, 62, 68, 81, 82, 93, 96, 104], "user": [4, 8, 10, 12, 14, 15, 22, 23, 25, 26, 28, 33, 34, 36, 37, 41, 49, 51, 56, 68, 69, 70, 71, 72, 73, 79, 80, 90, 91, 92, 93, 94, 96, 98, 100, 102, 106, 108], "respons": [4, 21, 22, 28, 68, 85, 93, 99, 104, 105], "subclass": [4, 8, 10, 13, 16, 18, 22, 28, 68, 82, 83], "boolean": [4, 8, 9, 10, 15, 16, 17, 18, 19, 22, 28, 30, 68, 95], "els": [4, 9, 10, 15, 17, 18, 65, 92, 105], "construct_fragment_energy_oper": [4, 5, 10, 20], "one_bodi": [4, 10, 15], "two_bodi": [4, 10, 15, 82], "veff": [4, 10], "democrat": [4, 10, 68], "mix": [4, 7, 10, 15, 20, 33, 45, 56, 68, 84], "fragment_energy_oper": [4, 10, 22, 28, 68], "check_unitary_atol": [4, 10, 15], "absolut": [4, 7, 10, 14, 15, 16, 82, 94], "unitar": [4, 10, 15, 58], "check": [4, 6, 8, 9, 10, 15, 16, 17, 18, 19, 32, 36, 37, 69, 80, 83, 85], "rotat": [4, 5, 6, 10, 12, 15, 16, 20, 49, 53, 55, 71, 74, 75, 80, 82, 84, 85, 90, 94], "fermion_spac": [4, 7, 8, 10, 11, 22, 28, 34, 37, 38, 39, 58, 66, 68, 70, 74, 82, 83, 94, 99, 105, 107], "fermion_st": [4, 7, 8, 10, 11, 17, 22, 27, 28, 34, 37, 38, 39, 40, 41, 43, 44, 58, 66, 68, 70, 82, 94, 98, 107], "abstract": [4, 7, 10, 13, 16, 17, 48, 49, 77, 81, 82], "dmetrhffragmentpyscfccsd": [4, 5, 22, 28, 95], "compute_fragment_energi": [4, 5, 10, 20], "dmetrhffragmentpyscffci": [4, 5, 22, 28], "fci": [4, 17, 22, 28, 52, 57, 82, 85, 95, 99, 103, 105], "dmetrhffragmentpyscfmp2": [4, 5, 22, 28], "dmetrhffragmentpyscfrhf": [4, 5, 22, 28], "fromactiveorbit": [4, 5], "active_orbit": 4, "help": [4, 22, 28, 62, 67, 70, 79, 80, 82, 97, 98, 106], "below": [4, 7, 8, 9, 10, 15, 17, 18, 22, 25, 26, 27, 28, 29, 34, 37, 39, 40, 41, 43, 44, 45, 48, 56, 60, 61, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104], "minim": [4, 6, 7, 11, 15, 19, 20, 22, 26, 28, 34, 37, 38, 39, 40, 41, 45, 47, 48, 52, 57, 58, 64, 67, 68, 72, 74, 75, 81, 82, 84, 85, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105], "lih": [4, 24, 70, 82, 102], "equival": [4, 7, 8, 9, 13, 15, 16, 17, 18, 19, 28, 34, 62, 68, 71, 77, 82, 84], "invalid": [4, 15, 18], "non": [4, 7, 8, 9, 15, 16, 17, 18, 20, 22, 27, 28, 29, 34, 38, 43, 44, 45, 49, 56, 58, 60, 62, 74, 77, 82, 84, 85, 95, 99], "fromactivespac": [4, 5, 22, 28, 94, 99, 104, 105], "frozencor": [4, 5], "n_core": 4, "altern": [4, 8, 12, 15, 16, 17, 28, 34, 36, 37, 55, 69, 71, 72, 77, 81, 82, 84, 90, 92, 93, 96, 97, 99, 102, 105], "wai": [4, 6, 8, 9, 16, 22, 25, 28, 30, 33, 34, 42, 51, 56, 58, 68, 71, 75, 82, 83, 90, 93, 94, 95, 97, 99, 103, 104, 105, 106], "impuritydmetrohffragmentpyscfact": [4, 5, 22, 28], "impuritydmetrohf": [4, 10, 20, 22, 28, 68], "active_spac": 4, "accur": [4, 10, 33, 42, 45, 49, 68, 69, 85, 95, 96, 97, 99, 102], "impuritydmetrohffragmentpyscfccsd": [4, 5, 22, 28], "impur": [4, 10, 24, 85, 104, 107], "dmetrohf": 4, "impuritydmet": [4, 24], "impuritydmetrohffragmentpyscffci": [4, 5, 22, 28], "impuritydmetrohffragmentpyscfmp2": [4, 5, 22, 28], "impuritydmetrohffragmentpyscfrohf": [4, 5, 22, 28], "mol_or_mf": 4, "notat": [4, 15, 17, 22, 25, 28, 57], "p": [4, 6, 7, 8, 14, 15, 16, 17, 18, 27, 44, 50, 57, 58, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 82, 84, 90, 91, 99, 104], "q": [4, 6, 7, 8, 15, 17, 18, 22, 28, 37, 55, 57, 58, 68, 82, 84, 94, 95, 99, 102], "valueerror": [4, 8, 9, 14, 15, 18], "gto": [4, 28, 29, 96, 99], "14": [4, 8, 15, 28, 42, 43, 56, 63, 75, 79, 84, 85, 93, 94, 95, 99, 101, 102, 103, 105], "magnitud": [4, 8, 13, 14, 15, 76, 82], "smaller": [4, 6, 8, 10, 15, 51, 67, 68, 95, 96], "item": [4, 5, 8, 9, 15, 16, 18, 20, 54, 80, 82, 101], "approx_equ": [4, 5, 15, 20, 82], "other": [4, 8, 9, 13, 15, 17, 18, 19, 20, 21, 27, 30, 33, 34, 36, 41, 44, 45, 47, 51, 53, 55, 56, 61, 62, 65, 66, 67, 69, 71, 79, 81, 82, 85, 89, 90, 91, 92, 95, 97, 101, 102, 103, 104, 106, 108], "rtol": [4, 15], "0e": [4, 8, 37], "atol": [4, 15, 16], "equal_nan": [4, 15], "numer": [4, 6, 7, 14, 15, 16, 17, 18, 20, 27, 38, 39, 49, 57, 58, 62, 73, 75, 82, 85, 89, 90, 93], "equal": [4, 7, 8, 11, 15, 16, 17, 28, 56, 58, 68, 82, 96], "propag": [4, 6, 11, 16, 20, 45, 46, 92, 98, 107], "numpi": [4, 6, 8, 10, 13, 15, 16, 17, 18, 22, 26, 27, 28, 30, 45, 50, 53, 56, 65, 66, 68, 69, 71, 73, 82, 85, 89, 90, 93, 94, 96, 98, 102, 103], "allclos": [4, 15], "comparison": [4, 15, 18, 24, 34, 39, 69, 80, 85, 91, 94, 98, 105, 107], "rel": [4, 7, 10, 15, 41, 45, 94], "compar": [4, 7, 8, 15, 18, 24, 28, 34, 37, 39, 55, 56, 58, 64, 68, 70, 77, 81, 82, 91, 93, 96, 97, 99, 103, 104, 107], "copi": [4, 5, 7, 8, 9, 15, 16, 18, 20, 40, 62, 80, 85, 98, 101], "deep": [4, 7, 8, 9, 15, 16, 18, 85], "basechemistryintegraloper": [4, 11, 13, 15], "panda": [4, 7, 9, 12, 15, 16, 17, 18, 71, 80, 82, 85, 89, 92, 94], "double_factor": [4, 5, 15, 20, 82, 85], "factoris": [4, 15], "written": [4, 8, 10, 15, 54, 56, 74, 76, 77, 82], "hat": [4, 7, 8, 15, 17, 21, 28, 37, 38, 39, 40, 41, 55, 57, 58, 64, 68, 72, 74, 75, 77, 82, 83, 85, 90, 93, 99, 102], "_1": [4, 15, 82, 84], "frac": [4, 6, 14, 15, 16, 17, 19, 21, 28, 30, 37, 39, 43, 44, 45, 56, 57, 68, 72, 74, 77, 78, 79, 82, 102, 104], "With": [4, 15, 16, 19, 28, 30, 59, 66, 68, 69, 73, 90, 94, 95, 98], "low": [4, 8, 15, 28, 30, 41, 47, 81, 84, 93, 103, 107], "effective_potenti": [4, 5, 15, 20, 82], "due": [4, 6, 13, 15, 16, 18, 28, 30, 34, 37, 40, 41, 45, 47, 48, 56, 68, 69, 72, 80, 85, 90, 91, 92, 93], "rdm1a": 4, "rdm1b": 4, "effective_potential_spin": [4, 5, 15, 20], "imbal": [4, 15], "rank": [4, 15, 17, 63, 84, 99], "energy_electron_mean_field": [4, 5, 15, 20], "approxim": [4, 6, 8, 14, 15, 16, 21, 22, 28, 30, 49, 58, 72, 73, 84, 85, 90, 92, 93, 96, 97, 99, 104, 105], "2e": [4, 14, 92, 93, 98], "is_openshel": [4, 5], "yield_const": [4, 15], "yield_one_bodi": [4, 15], "yield_two_bodi": [4, 15], "yield": [4, 8, 15, 16, 17, 18, 19, 33, 37, 56, 77, 83, 90, 95, 99, 102, 103, 105], "next": [4, 8, 15, 17, 33, 37, 41, 56, 68, 69, 81, 82, 91, 93, 94, 96, 105], "fermionoperatorstr": [4, 13, 15, 17, 20, 54, 82], "load_h5": [4, 5, 11, 15, 17, 18, 20, 34, 45, 50, 59, 64, 66, 68, 70, 73, 74, 75, 81, 82, 83, 85, 90, 91, 92, 101, 102], "h5": [4, 11, 15, 17, 18, 27, 34, 37, 38, 39, 40, 41, 43, 44, 45, 50, 59, 62, 64, 66, 68, 69, 70, 71, 73, 74, 75, 76, 80, 81, 82, 83, 85, 90, 91, 92, 101, 102], "print_tabl": [4, 5, 15, 18, 20], "tabl": [4, 12, 15, 16, 17, 18, 19, 81, 83, 95, 102], "qubit_encod": [4, 5, 11, 15, 18, 20, 22, 28, 34, 45, 50, 59, 62, 63, 64, 66, 69, 70, 74, 75, 80, 81, 82, 83, 85, 90, 91, 92, 93, 94, 96, 99, 104, 105], "map": [4, 6, 7, 8, 9, 12, 15, 16, 17, 18, 19, 20, 22, 27, 28, 33, 34, 37, 38, 39, 40, 41, 43, 44, 51, 53, 54, 55, 58, 62, 66, 73, 75, 79, 80, 83, 85, 90, 91, 92, 93, 94, 98, 99, 101, 102, 103, 104, 105], "qubit": [4, 6, 7, 8, 11, 13, 15, 16, 17, 18, 19, 24, 25, 27, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 49, 51, 54, 55, 56, 58, 59, 62, 63, 64, 66, 69, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 107], "encod": [4, 7, 8, 13, 15, 16, 17, 18, 20, 34, 37, 49, 51, 57, 75, 77, 79, 80, 82, 83, 84, 90, 92, 93, 94, 99, 104, 105], "proce": [4, 6, 7, 15, 18, 28, 29, 65, 90, 98, 101, 104], "creation": [4, 8, 13, 15, 17, 18, 37, 54, 68, 72, 82, 93, 94, 99, 102, 107], "via": [4, 7, 8, 12, 14, 15, 16, 17, 22, 26, 28, 34, 35, 37, 56, 58, 59, 62, 63, 72, 75, 85, 90, 91, 92, 93, 94, 96, 98, 102, 103, 104, 106, 107], "to_fermionoper": [4, 5, 15, 20, 34, 70, 82, 83, 102], "qubitoper": [4, 6, 8, 11, 13, 15, 16, 17, 19, 20, 39, 57, 64, 66, 69, 75, 77, 78, 79, 80, 81, 82, 83, 85, 92, 93, 96, 98, 102, 104, 107], "pleas": [4, 6, 10, 15, 25, 31, 32, 36, 39, 51, 58, 86, 88, 99, 101, 105], "finer": [4, 15], "grain": [4, 14, 15], "qubitmap": [4, 6, 7, 8, 13, 15, 18, 20, 72, 82], "procedur": [4, 6, 7, 15, 16, 18, 19, 21, 28, 38, 40, 41, 44, 58, 68, 74, 78, 79, 82, 92, 93, 94, 96, 97, 98, 104], "qubitmappingjordanwign": [4, 6, 7, 8, 13, 15, 20, 22, 27, 28, 37, 38, 39, 40, 41, 43, 44, 53, 54, 58, 66, 73, 82, 91, 92, 93, 94, 98, 99, 101, 102, 103, 105], "regist": [4, 7, 8, 13, 15, 16, 18, 43, 61, 74, 75, 76, 77, 78, 82, 88, 92, 93, 94, 98, 102], "left": [4, 7, 8, 14, 15, 16, 17, 18, 34, 37, 39, 40, 43, 50, 55, 71, 77, 79, 82, 93, 98, 99, 104], "assum": [4, 7, 8, 13, 15, 16, 17, 18, 22, 28, 37, 45, 57, 68, 82, 83, 98], "possibl": [4, 6, 8, 13, 15, 16, 18, 19, 21, 28, 37, 41, 47, 52, 58, 59, 71, 72, 77, 82, 83, 90, 96, 98, 100, 103, 104], "further": [4, 8, 10, 13, 15, 16, 17, 18, 33, 34, 39, 48, 58, 59, 65, 66, 69, 80, 97, 99, 102, 105], "check_unitari": [4, 10, 15], "15": [4, 7, 8, 15, 18, 28, 29, 38, 41, 56, 63, 75, 78, 82, 84, 85, 93, 94, 95, 98, 101, 103, 105], "place": [4, 7, 8, 15, 16, 17, 25, 28, 30, 62, 68, 71, 74, 81, 82, 85, 104], "real": [4, 6, 7, 8, 9, 11, 15, 16, 17, 18, 20, 44, 45, 49, 56, 57, 59, 62, 64, 73, 74, 77, 79, 80, 81, 82, 85, 90, 103, 105], "practic": [4, 22, 28, 33, 37, 44, 68, 80, 82, 84, 90, 91, 92, 97, 102, 103, 105], "run_rhf": [4, 5, 11, 20, 70], "save_h5": [4, 5, 15, 17, 18, 20, 85], "destin": [4, 15, 18], "filenam": [4, 8, 9, 11, 12, 15, 17, 18], "to_chemistryrestrictedintegraloper": [4, 5, 15, 20, 82], "explicitli": [4, 13, 15, 16, 41, 81, 83, 85, 90, 92, 103], "unrestrictedtwobodyrdm": [4, 15, 20, 82], "rotation_aa": [4, 15], "rotation_bb": [4, 15], "run_uhf": [4, 5], "to_chemistryunrestrictedintegraloper": [4, 5, 15, 20, 82], "get_correlation_potential_pattern": [4, 5], "atoms_list": 4, "correl": [4, 6, 10, 16, 28, 38, 39, 72, 84, 94, 95, 97, 99, 102, 104, 105], "pattern": [4, 10, 12, 68, 100], "basepyscfdrivermolecular": 4, "mol": [4, 28, 72, 82], "slice": [4, 8, 15], "down": [4, 6, 17, 37], "get_fragment_orbital_mask": [4, 5, 22, 28, 95], "get_fragment_orbit": [4, 5, 22, 28, 95], "modul": [4, 8, 9, 10, 11, 14, 15, 16, 17, 19, 34, 36, 41, 48, 59, 66, 68, 69, 70, 72, 73, 80, 82, 85, 89, 90, 91, 92, 94, 101, 102, 107, 108], "quantiz": [4, 28, 72, 82, 101, 102], "scf_max_iter": [4, 10], "20": [4, 7, 8, 10, 14, 27, 28, 29, 40, 41, 44, 56, 63, 73, 79, 80, 84, 90, 93, 94, 101, 103], "scf_toler": [4, 10], "basic": [4, 9, 10, 20, 24, 26, 27, 38, 42, 43, 44, 65, 69, 70, 72, 79, 80, 81, 82, 85, 94, 95, 100, 107, 108], "serv": [4, 7, 18, 41, 44, 54, 56, 65, 67, 79, 96, 97, 98], "count": [4, 8, 15, 16, 17, 20, 24, 51, 58, 63, 68, 76, 77, 80, 81, 90, 94, 98, 102], "outer": [4, 9, 10, 15, 20], "loop": [4, 6, 10, 14, 27, 33, 42, 80, 91, 94, 97], "scf_": 4, "kazuo": 4, "kitaura": 4, "eiji": 4, "ikeo": 4, "toshio": 4, "asada": 4, "tatsuya": 4, "nakano": 4, "masami": 4, "uebayasi": 4, "larg": [4, 15, 16, 18, 22, 28, 56, 68, 95, 96, 98, 101, 104], "lett": [4, 84], "313": 4, "701": 4, "706": 4, "1999": [4, 84], "1016": 4, "s0009": 4, "2614": 4, "99": [4, 16, 82, 84], "00874": 4, "takeshi": 4, "yamazaki": 4, "shunji": 4, "matsuura": 4, "ali": 4, "narimani": 4, "anushervon": 4, "saidmuradov": 4, "arman": 4, "zaribafiyan": 4, "toward": [4, 84, 90], "applic": [4, 6, 7, 14, 28, 37, 48, 58, 61, 69, 77, 79, 82, 84, 85, 91, 92, 93, 97, 98, 99, 104, 105], "approach": [4, 8, 16, 24, 27, 28, 30, 42, 44, 48, 49, 56, 64, 69, 70, 73, 77, 79, 81, 82, 84, 90, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105], "1806": 4, "01305": 4, "2018": [4, 84, 99], "ao_mask_2_atom_mask": [4, 5], "ao_mask": 4, "cover": [4, 8, 22, 28, 41, 48, 68, 81, 82, 95, 97, 102, 108], "atom_mask_2_ao_mask": [4, 5], "atom_mask": 4, "dimer_frag": 4, "fmofrag": [4, 5], "dimer": [4, 11, 22, 28, 70, 107], "compose_frag": [4, 5], "combin": [4, 7, 15, 16, 17, 18, 19, 21, 28, 30, 49, 53, 56, 66, 68, 73, 74, 75, 76, 77, 82, 83, 99, 104, 107], "merg": [4, 28, 53], "new": [4, 6, 7, 8, 9, 12, 15, 16, 17, 18, 38, 39, 40, 59, 68, 82, 84, 85, 90, 94, 96, 97, 105], "solve_fin": [4, 5], "reach": [4, 6, 15, 22, 28, 32, 43, 67, 68, 90], "unless": [4, 8, 15], "overwritten": [4, 15, 19], "fmofragmentpyscfact": [4, 5, 22, 28], "fmofragmentpyscfrhf": [4, 5], "solve_final_act": [4, 5, 22, 28], "fmofragmentpyscfccsd": [4, 5, 22, 28], "fmofragmentpyscfmp2": [4, 5], "nexu": [5, 23, 81, 90, 91, 92, 93, 94, 98, 106, 108], "pyscf": [5, 8, 15, 17, 21, 23, 26, 29, 30, 34, 68, 82, 89, 93, 94, 95, 96, 99, 100, 102, 103, 104, 105], "fmo": [5, 85], "nglview": [5, 23, 71, 89, 94, 96, 104, 108], "phay": [5, 23, 44, 89], "cutensornet": [5, 23], "algorithmfermionicadaptvq": [6, 20, 37, 85, 97], "pool": [6, 37, 97, 98], "auxiliary_oper": 6, "n_iter": [6, 14, 41], "100": [6, 14, 16, 71, 90, 91, 94, 96, 98], "adapt_vqe_toler": 6, "disp": [6, 14, 22, 28, 37, 45, 73, 85, 97, 103], "qubit_map": [6, 7, 38, 53, 58, 82], "algorithmadaptvq": [6, 20], "adapt": [6, 7, 15, 17, 33, 37, 38, 47, 84, 85, 93, 96, 98, 103, 108], "find": [6, 7, 8, 9, 15, 17, 19, 20, 33, 34, 39, 40, 41, 49, 50, 68, 73, 82, 84, 92, 94, 97, 98, 101, 102, 107], "pauli": [6, 7, 8, 13, 15, 16, 17, 19, 20, 37, 57, 62, 63, 69, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 90, 92, 93, 94, 97, 98, 102], "exponenti": [6, 7, 10, 15, 17, 18, 19, 37, 48, 49, 56, 57, 58, 62, 82, 83, 84, 85, 90, 97, 103], "ansatz": [6, 8, 11, 13, 15, 16, 17, 18, 20, 22, 24, 25, 27, 28, 34, 37, 38, 39, 40, 41, 43, 44, 45, 46, 58, 59, 62, 63, 64, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 90, 91, 92, 93, 94, 97, 98, 99, 101, 102, 103, 104, 105, 108], "capabl": [6, 8, 23, 28, 29, 33, 48, 59, 61, 62, 67, 68, 72, 74, 82, 83, 96], "work": [6, 8, 15, 16, 17, 19, 36, 61, 73, 77, 79, 81, 82, 83, 85, 86, 97, 99], "1812": [6, 105], "11173": 6, "hold": [6, 8, 12, 15, 16, 25, 71, 97, 98, 104], "go": [6, 81, 97, 98, 101], "trotteransatz": [6, 7, 20, 39, 45, 54, 57, 59, 62, 64, 66, 74, 75, 78, 81, 85, 97], "para": [6, 97], "refer": [6, 7, 8, 9, 11, 12, 15, 16, 17, 19, 22, 25, 28, 37, 42, 43, 45, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 62, 68, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 108], "question": [6, 48, 80, 97, 103], "usual": [6, 8, 9, 16, 21, 22, 28, 29, 37, 56, 58, 68, 82, 94, 97, 98, 104], "lowest": [6, 8, 15, 16, 17, 47, 68, 96, 97, 102, 103], "generalminim": [6, 11, 14, 15], "experi": [6, 14, 15, 16, 25, 33, 40, 41, 43, 44, 64, 72, 79, 80, 81, 84, 85, 91, 92, 93, 97, 98, 99, 101, 102, 103, 104, 105, 108], "parallel": [6, 15, 16, 18, 78], "termin": [6, 14, 55, 73, 97], "commut": [6, 7, 8, 13, 15, 16, 19, 20, 37, 51, 57, 62, 74, 75, 77, 82, 83, 85, 90, 92, 93, 94, 97, 98], "stop": [6, 8, 9, 14, 15, 20, 94, 97], "displai": [6, 14, 26, 27, 43, 44, 75, 79, 80, 81, 82, 85, 90, 91, 92, 94, 96, 97, 98, 100, 104], "protocol_expect": [6, 97], "protocol_pool_metr": [6, 97], "protocol_gradi": [6, 41, 73, 97], "evaluatorrunnermixin": 6, "metric": [6, 8, 16, 45, 74, 85, 97, 98, 103], "final_paramet": [6, 14, 20, 34, 37, 40, 41, 92, 93, 94, 97, 99, 101, 102, 105], "sympi": [6, 15, 16, 18, 45, 49, 52, 54, 57, 58, 62, 69, 75, 78, 82, 85, 89], "give": [6, 8, 13, 15, 18, 19, 33, 34, 50, 51, 59, 72, 82, 85, 94, 95, 102, 104], "experiment": [6, 16, 25, 33, 79, 94], "generate_report_param": [6, 20], "get_ansatz": [6, 20, 97], "fermion_ansatz_typ": [6, 97], "fermionspacestateexpchemicallyawar": [6, 7, 20, 51, 69, 77, 85, 90, 91, 97, 98], "built": [6, 7, 8, 11, 15, 16, 34, 37, 48, 55, 56, 57, 58, 62, 63, 65, 66, 69, 72, 79, 81, 91, 97, 107], "fermionspacestateexp": [6, 7, 20, 51, 54, 57, 58, 77, 83], "get_exponents_with_symbol": [6, 20, 97], "sublist": [6, 15, 20, 85, 97], "materi": [6, 33, 72, 104], "qubitoperatorlist": [6, 7, 13, 15, 16, 17, 20, 39, 45, 54, 57, 59, 62, 64, 66, 74, 75, 78, 79, 81, 82, 85], "qubitst": [6, 7, 11, 13, 15, 16, 17, 18, 19, 20, 25, 37, 50, 55, 56, 57, 59, 64, 66, 74, 75, 77, 78, 81, 82, 83, 85, 107], "algorithmiqeb": [6, 20], "n_grad": [6, 37], "energy_toler": [6, 37], "iqeb_energy_toler": 6, "parafermion": [6, 17, 37, 82, 84, 107], "iqeb": [6, 37, 107], "2011": 6, "10540": 6, "obei": [6, 13, 37, 82], "relat": [6, 13, 15, 17, 33, 37, 56, 74, 82, 83, 85, 92, 93, 94, 104], "product": [6, 7, 8, 11, 13, 15, 16, 18, 19, 34, 49, 54, 57, 58, 74, 75, 82, 83, 86, 97], "occur": [6, 8, 15, 17, 18, 33, 48, 67, 74, 103], "jordan": [6, 7, 13, 15, 17, 18, 34, 37, 51, 75, 77, 82, 90, 92, 93, 94, 99, 101, 102, 104, 105, 107], "wigner": [6, 7, 13, 15, 17, 18, 34, 37, 51, 75, 77, 82, 90, 92, 93, 94, 99, 101, 102, 104, 105, 107], "ucc": [6, 7, 17, 37, 41, 49, 51, 53, 55, 57, 82, 90, 91, 97], "narrow": [6, 37], "parafermionspac": [6, 17, 20, 37, 82, 107], "vqe": [6, 10, 11, 15, 18, 22, 24, 28, 37, 38, 39, 40, 41, 43, 47, 50, 56, 68, 70, 73, 80, 82, 84, 85, 92, 93, 94, 95, 98, 99, 101, 104, 105, 108], "largest": [6, 33, 37, 94, 96, 97], "condit": [6, 8, 11, 16, 28, 29, 39, 44, 45, 70, 77, 79, 84], "compiler_pass": [6, 7, 16, 81, 85], "biggest": 6, "choos": [6, 8, 14, 20, 27, 34, 41, 43, 56, 64, 68, 73, 75, 95, 101, 102, 103], "append": [6, 7, 8, 16, 20, 37, 53, 60, 70, 72, 75, 77, 78, 85, 90, 91, 93, 98], "m": [6, 8, 15, 16, 27, 28, 30, 39, 44, 70, 79, 82, 84, 86, 93, 99], "r_m_p": 6, "_sc": 6, "sc": [6, 28, 99, 105], "stand": [6, 15], "complement": [6, 16, 37], "basepass": [6, 7, 16], "algorithmvq": [6, 11, 20, 22, 28, 34, 37, 38, 39, 40, 43, 46, 47, 72, 73, 85, 101, 102], "objective_express": [6, 22, 28, 41, 73, 101], "gradient_express": [6, 41, 73, 74], "initial_paramet": [6, 10, 11, 22, 28, 40, 41, 45, 50, 73, 101, 102], "auxiliary_express": [6, 41], "eigensolv": [6, 11, 34, 47, 84, 85, 92, 93, 94, 97, 98, 99, 101, 107], "preconfigur": 6, "express": [6, 7, 8, 12, 15, 16, 17, 18, 20, 21, 22, 27, 28, 30, 37, 38, 39, 40, 41, 43, 44, 45, 50, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 99, 101, 102, 103, 104, 105], "trial": [6, 8, 40, 43], "wave": [6, 28, 34, 40, 41, 47, 84, 90, 99, 108], "search": [6, 11, 15, 19, 25], "alongsid": [6, 7, 16, 69, 82], "protocol_object": [6, 22, 28, 40, 41, 73, 101], "final_evaluated_auxiliary_express": [6, 20], "_rdm": 6, "auxiliari": [6, 16, 85], "final_evaluated_objective_express": [6, 20], "queri": [6, 15, 16, 70, 92], "algorithmvqd": [6, 20, 47, 101], "overlap_express": [6, 40, 101], "weight_express": [6, 40, 101], "vqe_valu": [6, 101], "vqe_paramet": [6, 38, 39, 101], "n_vector": [6, 101], "sequenti": [6, 15, 17, 40, 93], "constrain": [6, 40], "previous": [6, 8, 11, 37, 40, 56, 99, 105], "found": [6, 8, 9, 14, 15, 16, 17, 19, 22, 28, 33, 36, 37, 38, 40, 41, 47, 62, 68, 72, 82, 83, 87, 91, 92, 93, 94, 96, 97, 99, 101, 102, 103, 105, 106, 107, 108], "eigenst": [6, 8, 15, 16, 38, 39, 42, 43, 73, 79, 83], "156": [6, 63, 84, 93], "2019": [6, 84, 101], "conserv": [6, 15, 16, 17, 39, 45, 56, 82, 92, 98], "vqd": [6, 24, 40, 85, 101, 108], "sometim": [6, 8, 62, 85, 96], "cross": 6, "deflat": [6, 47, 107, 108], "n": [6, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 25, 28, 37, 43, 44, 50, 54, 56, 62, 64, 66, 68, 70, 71, 72, 74, 77, 78, 79, 82, 83, 84, 86, 90, 92, 93, 96, 97, 98, 99, 102, 103, 105], "weight": [6, 15, 18, 34, 40, 75, 79, 90, 101, 102], "objective_protocol": [6, 40, 101], "weight_protocol": [6, 40, 101], "overlap_protocol": [6, 40, 64, 101], "n_shot": [6, 16, 20, 27, 43, 44, 62, 78, 79, 80, 90, 101], "8192": 6, "shot": [6, 16, 38, 39, 41, 44, 62, 63, 64, 66, 69, 70, 74, 75, 76, 77, 78, 80, 81, 85, 90, 91, 92, 94, 95, 98, 101, 102, 103, 107, 108], "from_arrai": [6, 20], "dictionairi": [6, 9], "algorithmqs": [6, 20, 39, 42, 93], "computable_qse_matric": [6, 38, 93], "subspac": [6, 7, 8, 9, 17, 39, 42, 56, 60, 82, 107, 108], "expans": [6, 8, 15, 28, 42, 56, 76, 82, 99, 107, 108], "here": [6, 7, 11, 15, 16, 17, 19, 22, 26, 28, 29, 33, 34, 37, 38, 39, 41, 42, 43, 45, 48, 54, 55, 56, 57, 58, 61, 62, 67, 75, 76, 77, 79, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108], "1603": [6, 8], "05681": [6, 8], "qsematricescomput": [6, 8, 20, 38, 85, 93], "element": [6, 7, 8, 9, 11, 12, 15, 16, 17, 18, 19, 20, 37, 38, 39, 56, 62, 64, 65, 66, 68, 71, 74, 77, 82, 85, 93, 94, 99, 107], "final_st": [6, 20, 38, 39, 93], "qse": [6, 8, 38, 39, 85, 93, 108], "algorithmsceom": [6, 20, 42, 85], "computable_sceom_matrix": [6, 39], "1039": [6, 8, 84], "d2sc05371c": [6, 8, 84], "sceommatrixcomput": [6, 8, 20, 39, 85], "qsceom": [6, 39], "get_dataframe_sceom_analysi": [6, 20, 39], "sceom": [6, 8, 39], "rtype": [6, 15], "default_evalu": [6, 8, 20, 62, 64, 66, 69], "featur": [6, 27, 28, 39, 68, 79, 82, 97], "under": [6, 7, 8, 15, 17, 34, 44, 54, 58, 98], "develop": [6, 7, 31, 33, 48, 68, 69, 85, 91, 98], "instabl": [6, 38, 39, 93], "issu": [6, 85, 87], "meth": 6, "print_sceom_st": [6, 20, 39], "algorithmdeterministicqp": [6, 20, 42, 85], "evolution_operator_expon": [6, 16, 27, 44, 79, 80], "determinist": [6, 44], "reli": [6, 95, 97], "stochast": [6, 14, 42, 44, 73, 85, 90, 101, 108], "statist": [6, 13, 42, 44, 82, 89, 94, 98, 102], "infer": [6, 8, 15, 42, 44, 79, 82, 83], "exampl": [6, 12, 21, 22, 23, 26, 27, 28, 29, 33, 34, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 90, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108], "canon": [6, 16, 24, 42, 78, 79, 81, 82, 102, 103, 107], "certain": [6, 8, 15, 16, 54, 56, 59, 81, 85, 91, 94, 98, 100, 103], "variant": [6, 16, 58, 81], "prepar": [6, 7, 16, 27, 28, 34, 43, 44, 49, 56, 57, 63, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 91, 93, 94, 97, 98, 99, 102, 105, 107], "high": [6, 15, 22, 28, 30, 36, 38, 39, 48, 68, 73, 79, 89, 90, 92], "individu": [6, 7, 8, 10, 15, 17, 18, 28, 30, 67, 68, 75, 82, 83, 90, 94, 95, 103], "typic": [6, 8, 10, 15, 18, 28, 30, 37, 48, 59, 68, 69, 73, 79, 80, 81, 82, 83, 92, 93, 97, 98, 99, 105], "trotter": [6, 7, 15, 16, 20, 27, 37, 43, 44, 51, 58, 64, 79, 80, 82, 85], "multipli": [6, 12, 15, 16, 17, 40, 54, 57, 82, 85, 94, 101], "interv": [6, 16], "pi": [6, 15, 18, 42, 43, 44, 45, 52, 57, 69, 77, 78, 79, 85, 94, 96, 103], "onc": [6, 8, 16, 48, 51, 63, 64, 67, 74, 79, 82, 83, 90, 92, 93, 94, 95, 96, 97, 98, 99, 104, 105], "particular": [6, 8, 10, 22, 28, 44, 53, 56, 62, 68, 69, 78, 82, 90, 95, 96], "canonicalphaseestim": [6, 16, 20, 43, 85], "generalansatz": [6, 7, 8, 11, 16, 20, 49], "repres": [6, 7, 8, 10, 13, 14, 15, 16, 17, 18, 27, 28, 30, 33, 37, 41, 42, 43, 44, 45, 49, 50, 55, 56, 57, 59, 60, 64, 65, 67, 72, 79, 80, 81, 82, 83, 85, 90, 92, 93, 94, 96, 97, 98, 99, 102, 104, 105], "iht": [6, 16, 43, 79], "turn": [6, 15, 18, 44, 56, 57, 68, 79, 103], "phase_calculation_protocol": 6, "identifi": [6, 9, 15, 82, 91, 92, 93, 97, 98], "relev": [6, 8, 15, 16, 17, 18, 41, 71, 81, 82, 83, 94, 96, 97, 99, 104, 108], "These": [6, 7, 8, 10, 14, 15, 16, 17, 22, 23, 26, 28, 33, 34, 41, 44, 45, 47, 48, 49, 50, 58, 61, 65, 67, 69, 71, 72, 77, 81, 82, 83, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 104, 105, 108], "flavor": [6, 23, 27, 34, 44, 47, 81], "phaseestim": 6, "observ": [6, 45, 56, 73, 74, 85, 95, 98, 103, 105, 107], "By": [6, 7, 8, 15, 16, 18, 19, 28, 56, 58, 68, 77, 82, 83, 90, 93, 95, 96, 97, 98], "protocolqp": 6, "common": [6, 16, 37, 48, 81, 82, 83], "final_energi": [6, 20, 43], "phase_estimator_protocol": 6, "final_phas": [6, 20], "launch_experi": [6, 20], "launch": [6, 16, 20, 62, 69, 81, 85, 93, 94, 98], "asynchron": [6, 69, 81, 85, 108], "remot": [6, 81, 91, 92, 93, 98], "retrieve_experi": [6, 20], "handles_list": 6, "backendresult": [6, 16, 107], "run_experi": [6, 20], "algorithminfotheoryqp": [6, 20, 27, 44], "n_sampl": [6, 16, 44], "svore": [6, 84], "b": [6, 7, 8, 12, 14, 15, 16, 17, 26, 28, 30, 33, 34, 37, 40, 45, 56, 64, 68, 69, 70, 71, 74, 75, 77, 82, 84, 97, 102, 103, 104], "hast": [6, 84], "freedman": [6, 84], "1304": [6, 84], "0741": [6, 84], "co": [6, 12, 15, 44, 56, 65, 79, 96, 103], "resolv": [6, 15, 44, 47, 85], "depth": [6, 7, 8, 16, 27, 33, 37, 41, 44, 47, 51, 55, 56, 58, 63, 65, 72, 77, 78, 80, 81, 84, 85, 92, 94, 98, 101, 102, 103, 105], "sampl": [6, 12, 14, 15, 16, 27, 42, 44, 63, 69, 79, 81, 90, 91, 92, 94, 98, 107, 108], "uniform": [6, 11, 15, 44, 82, 85], "mu": [6, 9, 10, 17, 27, 44, 68, 84, 86, 104], "standard": [6, 8, 9, 10, 15, 16, 24, 25, 28, 44, 63, 69, 71, 74, 81, 82, 85, 92, 95, 96, 97, 98, 102, 103, 104, 107], "deviat": [6, 8, 9, 10, 16, 44, 98], "sigma": [6, 9, 10, 12, 13, 15, 17, 27, 38, 44, 96], "api": [6, 7, 8, 15, 16, 22, 23, 24, 25, 28, 31, 32, 48, 56, 60, 62, 68, 69, 81, 82, 83, 85], "algorithmkitaevqp": [6, 20, 27, 44], "n_bit": [6, 44], "n_extra_bit": 6, "kitaev": [6, 13, 42, 75, 79, 82, 84, 93, 107], "yu": [6, 84], "quant": [6, 19, 84], "ph": [6, 19, 84], "9511026": [6, 84], "govern": [6, 15], "highest": [6, 15, 16, 68], "power": [6, 15, 18, 63, 89], "involv": [6, 15, 16, 28, 30, 42, 58, 68, 69, 73, 81, 82, 85, 90, 92, 96, 97, 99, 104, 105], "repeatedli": [6, 81], "bit": [6, 7, 8, 15, 16, 18, 43, 44, 76, 94, 103], "unfavor": 6, "mani": [6, 8, 12, 15, 17, 22, 27, 28, 33, 40, 42, 43, 44, 49, 66, 69, 72, 73, 79, 82, 85, 90, 91, 93, 102, 103, 106, 108], "extra": [6, 7, 15, 38, 45, 56, 85], "manner": [6, 8, 13, 15, 16, 72, 79, 103], "191": [6, 84], "generalintegr": [6, 14], "linear": [6, 7, 9, 14, 15, 16, 18, 28, 29, 38, 39, 45, 56, 70, 74, 75, 76, 77, 82, 83, 84, 90, 92, 93, 96, 98, 107], "whose": [6, 8, 9, 13, 15, 16, 19, 39, 93], "final_propagation_evalu": [6, 20], "runner": [6, 45, 85], "step": [6, 8, 14, 15, 16, 17, 33, 36, 37, 38, 39, 40, 41, 43, 45, 47, 48, 69, 71, 72, 80, 81, 82, 85, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 105], "post_propagation_evalu": [6, 20, 45], "along": [6, 8, 14, 15, 16, 17, 25, 28, 62, 72, 75, 81, 82, 85, 90, 98, 99], "trajectori": [6, 89], "done": [6, 8, 9, 15, 18, 28, 30, 33, 53, 56, 69, 72, 74, 77, 82, 93, 99], "od": [6, 45], "solut": [6, 10, 14, 22, 28, 38, 45, 50, 68, 72, 84, 86, 93], "member": [6, 14, 15], "variabl": [6, 8, 9, 12, 15, 16, 17, 34, 53, 73, 85, 94, 105], "_backend": 6, "algorithmmclachlanrealtim": [6, 20, 46, 107], "mclachlan": [6, 45], "principl": [6, 22, 28, 33, 45, 46, 58, 80, 82], "evolv": [6, 11], "algorithmmclachlanimagtim": [6, 20, 46, 107], "imaginari": [6, 8, 11, 15, 16, 17, 18, 44, 45, 57, 64, 74, 77, 85, 105, 107], "qubitspac": [7, 11, 17, 20, 66, 69, 82, 83, 85, 99, 105, 107], "reference_circuit_build": [7, 20, 85], "circuit_resourc": [7, 20, 51, 55, 56, 58, 85, 90, 91, 94, 97, 98, 102, 103], "return_circuit": 7, "crude": [7, 58, 64], "resourc": [7, 18, 28, 33, 49, 55, 58, 62, 73, 81, 85, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 105], "unoptim": 7, "gatecount": 7, "box": [7, 11, 22, 28, 44, 58, 68, 72, 79, 81, 82, 85, 93], "rebas": [7, 81], "nativ": [7, 15, 16, 33, 72, 82, 96], "tket": [7, 15, 16, 81, 82, 85, 88, 89, 90, 91, 94, 97, 98, 102], "gateset": [7, 58, 81, 91], "cx": [7, 11, 16, 51, 52, 69, 80, 90, 94, 98], "tk1": [7, 75], "unmodifi": 7, "clone": [7, 15, 18, 20], "shallow": [7, 8, 15, 18, 53, 91, 97], "symbolictyp": [7, 15, 18], "default_pass": [7, 20], "compil": [7, 8, 15, 16, 17, 20, 23, 25, 33, 48, 56, 58, 62, 69, 72, 79, 80, 85, 90, 91, 94, 97, 98], "df_numer": [7, 20], "symbol_map": [7, 15, 18], "tol": 7, "ansatz_absolute_toler": 7, "get_numeric_represent": [7, 18, 20, 59], "lexicograph": [7, 8, 18, 56], "explod": 7, "substitut": [7, 11, 15, 16, 18, 49, 62, 85, 98, 104], "_supportsdtyp": [7, 18], "supportsindex": [7, 18], "sequenc": [7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 43, 44, 51, 56, 61, 79, 82, 97, 98], "_dtypedict": [7, 18], "what": [7, 8, 17, 34, 74, 82, 90], "omit": [7, 8, 12, 15], "df_symbol": [7, 20], "get_symbolic_represent": [7, 18, 20], "simplifi": [7, 8, 15, 16, 18, 20, 33, 39, 68, 80, 83, 84, 95], "being": [7, 8, 10, 12, 13, 14, 15, 16, 18, 34, 53, 69, 72, 74, 82, 97, 98, 99], "free_symbol": [7, 8, 15, 18, 20], "free": [7, 8, 10, 15, 16, 18, 73, 79, 90, 103], "unord": 7, "free_symbols_ord": [7, 8, 15, 18, 20, 41, 73, 74], "increas": [7, 8, 13, 14, 15, 18, 56, 62, 80, 81, 84, 90, 93, 97, 103], "symbolensembl": [7, 8, 9, 15, 18, 20, 85], "get_circuit": [7, 16, 20, 45, 55, 56, 58, 72, 75, 77, 78, 79, 80, 81, 90, 91, 94, 98], "get_circuit_no_ref": [7, 20], "referenceless": 7, "_buffer": [7, 8, 18], "_supportsarrai": [7, 8, 18], "_nestedsequ": [7, 8, 18], "make_hash": [7, 15, 18, 20], "hashabl": [7, 15, 18], "n_qubit": [7, 11, 15, 17, 18, 20, 55, 58, 69, 70, 78, 90, 94, 97, 98, 102], "n_symbol": [7, 15, 18, 20, 56, 94, 97], "reference_qubit_st": [7, 20], "reset_refer": [7, 20], "reset": [7, 16, 96], "match": [7, 8, 9, 12, 15, 16, 33, 90, 92, 96], "state_circuit": [7, 16, 20, 85, 90, 91, 94, 97, 98, 102], "state_symbol": [7, 18, 20, 22, 27, 28, 38, 39, 40, 41, 43, 44, 45, 50, 55, 56, 58, 63, 66, 69, 73, 74, 76, 77, 80, 90, 91, 101], "symbol_substitut": [7, 15, 18, 20, 62, 77, 85], "substat": 7, "guarante": [7, 28, 56, 68, 77, 82], "to_circuitansatz": [7, 20, 39, 85], "cast": [7, 8, 15], "circuitansatz": [7, 11, 16, 20, 45, 52, 69, 79, 80, 85], "to_qubitst": [7, 20, 85], "unsympifi": [7, 15, 18, 20, 85], "decim": [7, 8, 15, 18], "digit": [7, 15, 18, 76], "composedansatz": [7, 20, 53], "compos": [7, 8, 15, 16, 49, 51, 62, 65, 68, 85], "revers": [7, 8, 15, 17, 18, 20, 55, 57], "ab": [7, 8, 12, 15, 16, 84], "rangl": [7, 8, 11, 15, 16, 17, 21, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 56, 57, 58, 59, 64, 68, 74, 75, 76, 77, 78, 79, 80, 81, 82, 90, 93, 99, 101], "henc": [7, 21, 28, 37, 55, 56, 58, 65, 70, 78, 82, 93, 105], "d": [7, 8, 9, 12, 15, 18, 21, 27, 28, 30, 34, 58, 69, 70, 71, 79, 84, 86, 90, 92, 96, 105], "togeth": [7, 15, 16, 22, 28, 43, 45, 54, 62, 64, 72, 75, 81, 108], "famili": [7, 45, 49, 51, 57, 77, 97], "from_str": [7, 15, 17, 18, 20, 45, 54, 59, 62, 64, 74, 77, 80, 81, 82], "1j": [7, 8, 15, 39, 45, 57, 59, 62, 64, 66, 74, 75, 78, 81], "y0": [7, 15, 16, 37, 39, 45, 57, 59, 62, 63, 64, 66, 69, 74, 75, 78, 80, 81, 82, 92, 93, 94, 102], "x2": [7, 15, 16, 37, 39, 45, 57, 59, 62, 63, 64, 66, 69, 74, 75, 78, 81, 82, 83, 92, 93, 94, 102], "y1": [7, 15, 37, 63, 69, 80, 81, 82, 92, 93, 94, 102], "x3": [7, 15, 16, 37, 39, 45, 57, 59, 62, 63, 64, 66, 69, 74, 75, 78, 81, 82, 83, 92, 93, 94, 102], "ref": [7, 9, 16, 27, 50, 57, 74, 77, 80], "as_list": [7, 9, 20], "new_": 7, "new_a": 7, "new_b": 7, "ansatz2": [7, 62], "blow": [7, 15, 17, 83], "up": [7, 8, 9, 11, 15, 17, 28, 31, 41, 44, 55, 56, 63, 68, 69, 83, 85, 93, 94, 102, 103, 108], "to_qubitstate_direct": [7, 20], "empti": [7, 8, 9, 15, 16, 18, 20, 53, 71, 73, 82, 85, 96], "gate": [7, 11, 15, 16, 33, 37, 49, 50, 51, 55, 56, 57, 58, 62, 66, 72, 74, 75, 78, 79, 80, 82, 84, 90, 91, 93, 94, 97, 98, 102, 103], "fermion_operator_expon": [7, 20, 98], "fock_stat": [7, 15, 17, 28, 82, 103], "taper": [7, 8, 19, 24, 80, 84, 92, 98, 99, 105, 107], "tapering_exponent_check_behavior": [7, 83], "except": [7, 8, 15, 18, 19, 39], "also": [7, 8, 9, 11, 13, 15, 16, 18, 19, 21, 22, 25, 28, 29, 30, 31, 33, 34, 37, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 74, 77, 80, 81, 82, 83, 85, 90, 91, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 108], "tapererz2": [7, 8, 19, 20, 83], "act": [7, 8, 13, 15, 17, 19, 37, 56, 58, 72, 77, 79, 80, 82, 94, 101, 102], "treatment": [7, 82], "don": [7, 53, 102], "z2": [7, 8, 15, 63, 64, 66, 69, 81, 82, 92, 93, 94, 98, 102, 105, 107], "test": [7, 8, 11, 14, 15, 16, 18, 34, 39, 44, 66, 70, 74, 75, 78, 82, 84, 85, 92, 95, 101, 102, 105, 107], "throw": [7, 83, 85], "entir": [7, 8, 15, 16, 17, 22, 25, 28, 62, 66, 68, 77, 82, 99, 104], "danger": 7, "untest": [7, 15], "faster": [7, 15, 84, 97], "known": [7, 8, 15, 16, 17, 18, 19, 23, 40, 41, 47, 48, 56, 82, 83, 93, 98, 99], "safe": [7, 8, 9, 89], "unsaf": [7, 8], "offer": [7, 23, 33, 63, 68, 69, 77, 92, 93, 97, 98], "parent": [7, 8, 17, 67, 83], "fermionspaceansatzuccsd": [7, 11, 20, 22, 27, 28, 34, 37, 38, 41, 43, 44, 51, 58, 70, 73, 74, 76, 77, 80, 82, 83, 102, 103], "uccsd": [7, 10, 24, 34, 37, 38, 39, 43, 55, 58, 68, 73, 74, 82, 90, 92, 93, 94, 97, 99, 102, 103, 104, 105, 107], "fermionspaceansatzuccd": [7, 20, 54, 58, 77], "uccd": [7, 24, 54, 58], "effici": [7, 15, 19, 27, 33, 40, 41, 43, 49, 62, 72, 73, 75, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 97, 98, 99, 104, 107, 108], "synthes": [7, 92, 93, 104], "uniqu": [7, 15, 16, 17, 33, 37, 64], "fewer": [7, 15, 37, 58, 77], "allow": [7, 8, 14, 15, 16, 17, 18, 21, 25, 28, 33, 41, 45, 49, 50, 56, 58, 59, 61, 62, 65, 68, 70, 72, 81, 82, 83, 85, 92, 93, 95, 96, 97, 99, 104, 106], "unsympif": [7, 15, 18], "caus": [7, 8, 15, 18, 28, 85, 90, 92, 93, 98], "fermionspaceansatzchemicallyawareuccsd": [7, 20, 51, 63, 66, 77, 85, 92, 93, 94, 99, 104, 105], "0144680": [7, 84], "fermionspaceansatzkupccgd": [7, 20, 77], "k_input": [7, 40, 58, 101], "upccgd": 7, "variation": [7, 41, 42, 56, 91, 98], "independ": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 37, 44, 50, 55, 58, 62, 66, 67, 68, 77, 81, 82, 83, 95], "pair": [7, 9, 12, 15, 16, 17, 20, 44, 58, 62, 68, 77, 82, 97], "undistinguish": 7, "1810": [7, 16], "02327": [7, 16], "upcc": 7, "fermionspaceansatzkupccgsd": [7, 20, 40, 58, 77, 101], "upccgsd": [7, 58, 97, 101], "fulli": [7, 28, 62, 68, 72, 82, 85], "fermionspaceansatzkupccgsdsinglet": [7, 20, 77], "upccgsdsinglet": 7, "singlet": [7, 17, 38, 93], "fermionspaceansatzuccgd": [7, 20, 53, 58, 77], "uccgd": 7, "fermionspaceansatzuccgsd": [7, 20, 58, 77], "uccgsd": [7, 53, 58], "fermionspaceansatzuccsdsinglet": [7, 20, 77], "multiconfigurationansatz": [7, 20, 53, 56, 85], "variat": [7, 8, 11, 13, 14, 20, 28, 33, 34, 38, 45, 46, 48, 49, 50, 55, 56, 58, 68, 72, 82, 83, 84, 91, 92, 93, 94, 95, 97, 98, 99, 107, 108], "logic": [7, 10, 16, 20, 69, 79, 80, 81, 82, 84], "journal": [7, 16, 84, 86], "2022": [7, 84, 85, 86, 99, 105], "06": [7, 37, 84, 93, 94, 102], "742": [7, 84], "hous": [7, 65], "distanc": [7, 12, 71], "wise": [7, 8, 15, 94], "g1": 7, "figur": [7, 16, 27, 72, 77, 90, 91, 95, 97, 98, 102], "12": [7, 8, 18, 22, 28, 35, 38, 39, 42, 43, 45, 55, 63, 65, 69, 75, 76, 79, 81, 82, 84, 85, 89, 90, 91, 92, 93, 94, 95, 98, 101, 102, 103], "g2": 7, "11": [7, 8, 22, 26, 27, 28, 35, 38, 42, 43, 44, 63, 66, 69, 75, 76, 79, 81, 82, 84, 85, 89, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103], "higher": [7, 8, 15, 27, 39, 48, 58, 79, 90, 99, 103], "achiev": [7, 34, 37, 54, 56, 69, 82, 93, 96, 103], "nest": [7, 8, 68], "ladder": [7, 15, 37, 56, 78], "swap": [7, 8, 15, 16, 17, 56, 78, 84], "qubitstatestr": [7, 13, 15, 18, 20, 25, 56, 82], "multiconfigurationst": [7, 20, 56, 85], "input_st": 7, "fix": [7, 8, 12, 21, 28, 37, 44, 45, 56, 83, 85, 90, 107], "normal": [7, 8, 11, 15, 16, 18, 20, 28, 29, 48, 56, 82, 83], "multiconfigurationstatebox": [7, 20, 25, 56, 85], "wrapper": [7, 8, 11, 14, 15, 28, 54, 56, 97, 103], "statepreparationbox": [7, 11, 56, 85], "multiplex": [7, 56], "ry": [7, 55, 69, 77], "rz": [7, 16, 52, 69], "cqcl": [7, 85, 89], "github": [7, 85, 89], "io": [7, 15, 89, 97], "html": [7, 75, 79, 81, 85], "realgeneralizedbasisrotationansatz": [7, 20, 50, 85], "baserealbasisrotationansatz": 7, "ket": [7, 8, 15, 16, 18, 50, 74, 75, 77, 78, 81, 82], "psi": [7, 8, 11, 16, 21, 28, 37, 40, 41, 50, 56, 58, 74, 75, 76, 82, 90, 93, 101, 104], "thouless": [7, 50, 82, 84], "theorem": [7, 50, 82], "exp": [7, 43, 50, 74, 82], "ln": [7, 50, 82], "right": [7, 8, 14, 15, 16, 17, 37, 39, 43, 50, 55, 77, 79, 82, 93, 99, 104, 108], "1711": 7, "04789": 7, "ansatz_parameters_from_unitari": [7, 20, 50], "rotation_unitari": 7, "0a": [7, 17, 28, 82, 94, 96, 102], "0b": [7, 17, 28, 82, 94, 96, 102], "1a": [7, 17, 28, 82, 94, 96, 102], "1b": [7, 17, 28, 82, 94, 96, 102], "2a": [7, 17, 28, 94, 96], "decomposebox": [7, 16], "realrestrictedbasisrotationansatz": [7, 20, 50, 82, 85], "both": [7, 8, 9, 11, 13, 15, 16, 17, 18, 22, 28, 42, 45, 48, 50, 56, 58, 61, 62, 64, 69, 71, 73, 77, 78, 82, 83, 92, 93, 97, 98, 99, 102, 105], "realunrestrictedbasisrotationansatz": [7, 20, 50, 85], "rotation_unitary_a": 7, "rotation_unitary_b": 7, "generalized_basis_rotation_to_circuit": [7, 20], "restricted_basis_rotation_to_circuit": [7, 20, 82], "orb": [7, 15, 17, 26, 96, 100], "unrestricted_basis_rotation_to_circuit": [7, 20], "rotate_ansatz_restrict": [7, 20, 85], "hamiltonianvariationalansatz": [7, 20], "introduc": [7, 14, 15, 27, 28, 44, 61, 67, 68, 77, 79, 80, 85, 97, 99, 101, 102, 103], "1507": 7, "08969": 7, "produc": [7, 8, 16, 26, 28, 43, 44, 47, 77, 82, 83, 97], "split_hamiltonian": [7, 20], "split": [7, 15, 16, 18, 20, 69, 72, 82, 85, 95], "three": [7, 8, 12, 15, 37, 43, 44, 45, 46, 58, 65, 67, 68, 70, 74, 78, 81, 82, 85, 96, 97, 98, 108], "diag": [7, 8, 82], "hop": 7, "ex": 7, "sum_p": 7, "e_p": 7, "dagger_p": [7, 17, 68, 82], "a_p": [7, 15, 17, 82], "pqqp": 7, "dagger_q": 7, "a_q": [7, 15, 17, 82], "prrp": 7, "dagger_r": [7, 68], "a_r": [7, 15, 17, 82], "exchang": [7, 17, 37], "pqr": [7, 15, 68, 82], "a_": [7, 15, 17, 38, 68, 82], "extract": [7, 10, 15, 55, 78, 82, 102], "layeredansatz": [7, 20, 85], "rotations_def": 7, "n_layer": [7, 55], "inter_block_entangl": 7, "entangler_def": 7, "cap_lay": 7, "cap_def": 7, "layer": [7, 55, 78, 79, 97, 107], "replica": 7, "hea": [7, 41, 49, 55], "hierarchi": [7, 57, 84], "customgatedef": [7, 52], "collect": [7, 9, 10, 16, 18, 23, 33, 37, 41, 61, 62, 66, 67, 70, 72, 75, 82, 85, 91, 92, 93, 98, 102], "parametr": [7, 8, 15, 16, 47, 73], "optyp": [7, 16, 45, 51, 55, 77, 79, 80, 90, 91, 94, 97, 98, 102], "circbox": [7, 102], "possibli": [7, 8], "entangl": [7, 33, 55], "two_qubit": 7, "definit": [7, 9, 22, 28, 57, 82, 85], "hardwareefficientansatz": [7, 20, 55, 77], "rotation_oper": 7, "entangler_oper": 7, "hardwar": [7, 8, 33, 41, 44, 47, 48, 49, 62, 67, 69, 70, 72, 79, 80, 81, 84, 85, 90, 92, 94, 96, 101, 105, 106, 107, 108], "1704": 7, "05018": 7, "rxry": 7, "rxryrz": 7, "submodul": [8, 9, 10, 63, 65, 85], "directli": [8, 13, 15, 28, 37, 45, 51, 55, 65, 67, 74, 75, 78, 81, 82, 85, 90, 94, 96, 98, 99, 102], "kernel": [8, 16, 17, 20, 28, 45, 59, 62, 64, 66, 69, 73, 74, 75, 77, 78, 81, 92, 98], "langl": [8, 15, 16, 17, 21, 28, 37, 38, 39, 40, 41, 43, 45, 59, 64, 68, 74, 75, 77, 78, 79, 81, 82, 90, 93, 99, 101], "add_label": [8, 20], "label_children": 8, "assign": [8, 9, 15, 18], "overwrit": [8, 15, 16], "access": [8, 9, 13, 14, 15, 17, 22, 23, 28, 32, 36, 48, 55, 58, 72, 82, 85, 88, 89, 90, 91, 92, 93, 94, 97, 98, 102, 106, 108], "child": [8, 10, 15, 18, 65, 67, 84], "children": [8, 20, 65], "remain": [8, 15, 28, 45, 62, 68, 71, 72, 77, 85, 99, 105], "unlabel": 8, "immedi": [8, 16, 67, 92, 106], "attempt": [8, 9, 13, 15, 18, 19, 20, 27, 62, 74, 92], "statevector": [8, 10, 11, 15, 18, 20, 24, 39, 56, 59, 62, 64, 66, 68, 81, 82, 85, 91, 92, 94, 97, 99, 105, 107], "try": [8, 9, 15, 32, 34, 82, 95, 102], "aerstatebackend": [8, 11, 22, 28, 34, 37, 39, 40, 41, 45, 50, 56, 62, 68, 70, 73, 90, 95, 99, 102, 103, 104, 105], "qiskit": [8, 11, 16, 22, 28, 33, 34, 37, 38, 39, 40, 41, 43, 44, 45, 50, 56, 62, 63, 64, 66, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 90, 95, 99, 101, 102, 103, 104, 105], "qulacsbackend": [8, 34, 62, 92, 93, 97], "qulac": [8, 62, 92, 93, 97], "evaluat": [8, 16, 20], "evaluatabletyp": 8, "evaluatedtyp": 8, "evaluate_list": [8, 20], "evaluate_mean": [8, 20], "evaluate_median": [8, 20], "median": 8, "evaluate_std": [8, 20], "evaluate_var": [8, 20], "is_leaf": [8, 20], "leaf": [8, 16, 65, 67], "print_tre": [8, 20, 65], "tree": [8, 16, 61, 62, 67, 85], "indent": 8, "proport": 8, "walk": [8, 16, 20, 61, 65], "travers": 8, "expectationvaluebraderiv": [8, 16, 20], "iexpectationvaluederiv": 8, "partial_": 8, "theta": [8, 12, 16, 37, 39, 41, 45, 50, 52, 55, 56, 58, 59, 62, 71, 74, 75, 77, 81, 90, 91], "bra": [8, 15, 16, 18, 74, 77, 81, 82], "im": [8, 15, 45, 77], "expectationvalueketderiv": [8, 16, 20], "imetrictensor": 8, "theta_i": [8, 16, 40, 45, 74], "theta_j": [8, 15, 45, 74], "bra_stat": [8, 16, 20, 62], "ket_stat": [8, 16, 20, 62], "factori": 8, "ioverlap": 8, "qubitoperatorstr": [8, 13, 15, 16, 19, 20, 82, 85], "computablefunct": [8, 20, 59, 61, 62, 65, 85], "func": [8, 9, 16, 20], "computableint": [8, 20, 61, 65], "recurs": [8, 13, 56, 65, 66, 67], "mainli": [8, 15], "demonstr": [8, 24, 26, 27, 28, 34, 44, 48, 58, 59, 61, 63, 64, 65, 68, 69, 73, 79, 80, 82, 84, 90, 91, 92, 93, 94, 101, 102, 103, 104, 105, 107, 108], "purpos": [8, 15, 17, 34, 37, 43, 59, 62, 65, 69, 80, 82, 83, 90, 96, 97, 100, 101, 102, 103], "integ": [8, 13, 15, 16, 17, 18, 65, 68, 82, 85], "computablelist": [8, 20, 45, 65, 85, 99, 105], "k_list": 8, "foo": 8, "len": [8, 11, 13, 15, 18, 37, 41, 62, 75, 77, 82, 90], "clear": [8, 9, 16, 20, 69, 80, 92, 94], "remov": [8, 9, 13, 15, 17, 18, 19, 20, 36, 38, 39, 72, 82, 85, 103], "occurr": [8, 15], "extend": [8, 20, 26, 28, 29, 65, 89, 95, 99, 108], "9223372036854775807": 8, "insert": [8, 12, 15, 16, 20, 82, 104], "pop": [8, 9, 20], "indexerror": 8, "rang": [8, 9, 15, 18, 22, 27, 28, 33, 37, 41, 49, 58, 61, 69, 71, 74, 75, 79, 80, 82, 90, 92, 93, 98, 99], "IN": 8, "sort": [8, 15, 20, 39], "ascend": [8, 15, 18, 82], "stabl": [8, 93], "maintain": [8, 15, 17, 31, 37, 81, 82, 99, 104], "them": [8, 12, 15, 16, 18, 33, 34, 38, 39, 44, 53, 57, 62, 67, 68, 69, 72, 78, 83, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105], "descend": [8, 15], "flag": [8, 13, 16, 20, 28], "computablendarrai": [8, 20, 65, 66, 85], "array_lik": 8, "multi": [8, 20, 28, 49, 53, 56, 90, 96, 97, 99, 105], "dimension": [8, 15, 17, 28, 29, 73, 82, 83, 90, 101], "dress": 8, "defer": [8, 67], "seamlessli": [8, 23, 69, 106], "framework": [8, 33, 84, 89], "signatur": 8, "mathemat": [8, 57, 60, 82, 84], "instanti": [8, 11, 15, 16, 18, 19, 21, 22, 25, 28, 34, 40, 41, 51, 54, 56, 58, 62, 63, 68, 69, 71, 82, 83, 91, 94, 101, 102], "word": [8, 15, 16, 57, 62, 74, 75, 77, 85, 94], "qc_arrai": 8, "another_arrai": 8, "view": [8, 20, 26, 84, 89, 94, 100, 102, 103, 105], "transpos": [8, 20, 82], "np": [8, 22, 26, 28, 34, 40, 41, 50, 54, 66, 69, 71, 73, 75, 79, 82, 90, 96, 97, 98, 99, 101, 102, 103, 104], "axi": [8, 12, 17], "keepdim": 8, "argmax": [8, 20, 44], "argmin": [8, 20], "minimum": [8, 13, 14, 15, 37, 41, 68, 73, 96, 97, 101], "argpartit": [8, 20], "kth": 8, "kind": [8, 68], "introselect": 8, "partit": [8, 15, 16, 20, 28, 30, 62, 63, 64, 66, 68, 69, 75, 77, 84, 85, 90, 91, 92, 93, 94, 95, 98, 104, 107], "argsort": [8, 20], "astyp": [8, 15, 20], "subok": 8, "typecod": 8, "f": [8, 9, 14, 15, 17, 18, 21, 25, 27, 28, 39, 41, 43, 44, 50, 54, 58, 61, 62, 64, 68, 70, 80, 82, 84, 94, 96, 97, 101, 104], "layout": 8, "fortran": 8, "close": [8, 15, 17, 71, 90], "appear": [8, 9, 15, 16, 68, 74, 77], "equiv": 8, "same_kind": 8, "backward": [8, 12, 15, 18], "preserv": [8, 9, 12, 18, 39, 56, 58, 71, 82, 83, 84, 93], "float64": [8, 22, 28, 34, 40, 41, 50, 66, 69, 71, 75, 79, 82, 93, 94, 96, 97, 99, 101, 102, 103, 104], "float32": 8, "convers": [8, 12, 49, 65, 82, 83, 85, 107], "newli": [8, 15, 16], "alloc": 8, "satisfi": [8, 14, 17, 39, 42, 43, 68, 77, 79, 80], "arr_t": 8, "complexwarn": 8, "own": [8, 15, 22, 28, 33, 49, 68, 72, 81, 95, 107, 108], "share": [8, 13, 48, 77, 81, 82], "byteswap": [8, 20], "inplac": 8, "toggl": [8, 15], "endian": [8, 18], "big": [8, 16, 85, 102], "256": [8, 27], "8755": 8, "int16": 8, "hex": 8, "0x1": 8, "0x100": 8, "0x2233": 8, "13090": 8, "0x3322": 8, "ceg": 8, "fac": 8, "s3": 8, "newbyteord": [8, 20], "int64": [8, 54, 82], "uint8": 8, "i8": 8, "choic": [8, 16, 17, 37, 41, 43, 45, 54, 58, 72, 75, 82, 91, 96, 102], "mode": [8, 15, 17, 18, 27, 82, 107], "clip": [8, 20], "min": [8, 20, 27, 41, 73, 105], "max": [8, 10, 14, 15, 20, 27, 44], "limit": [8, 9, 10, 15, 27, 33, 71, 80, 85, 96, 98], "compress": [8, 15, 18, 20, 70, 82, 85, 93], "conj": [8, 20], "conjug": [8, 15, 16, 20, 73, 82, 97], "veri": [8, 45, 66, 79, 95, 96, 102, 105], "similar": [8, 15, 44, 56, 62, 71, 77, 82, 83, 94, 99, 103], "copyto": 8, "prefer": [8, 14, 72, 93], "c_contigu": [8, 20], "python": [8, 15, 17, 32, 33, 35, 36, 49, 58, 61, 65, 70, 72, 81, 85, 89, 106], "lead": [8, 13, 15, 19, 43, 55, 56, 58, 81, 83, 90, 96, 97, 101], "surpris": 8, "mutabl": 8, "ensur": [8, 9, 32, 33, 39, 54, 66, 67, 68, 79, 81, 83, 85, 95, 101], "deepcopi": 8, "ctype": [8, 20], "make": [8, 11, 15, 16, 18, 36, 45, 49, 54, 58, 59, 66, 68, 79, 80, 81, 85, 91, 95, 96, 97, 98, 99, 101, 102], "easier": [8, 15, 25, 33, 62, 85], "librari": [8, 23, 35, 72, 89, 97, 98], "among": [8, 33, 90], "stride": [8, 20], "themselv": [8, 9, 48, 62, 65, 67, 81], "possess": [8, 94], "ctypeslib": 8, "public": [8, 33, 84, 93, 101], "were": [8, 13, 15, 19, 37, 85, 98], "guid": [8, 10, 32, 69, 70, 72, 84, 92, 93, 99, 102, 104, 105, 106, 108], "undocu": 8, "well": [8, 15, 32, 34, 41, 45, 47, 49, 56, 58, 68, 70, 72, 82, 83, 90, 93, 94, 96, 108], "privat": [8, 32], "_ctype": 8, "pointer": 8, "area": 8, "align": [8, 12, 20, 85, 93, 104], "writeabl": [8, 20], "arbitrari": [8, 15, 16, 18, 49, 56, 58, 68, 82, 84, 95], "troubl": 8, "crash": 8, "bewar": 8, "exactli": [8, 15, 16, 68, 72], "_array_interface_": 8, "unlik": [8, 17, 40, 55, 56], "data_a": 8, "won": 8, "c_void_p": 8, "dealloc": 8, "spelt": 8, "length": [8, 9, 12, 15, 16, 17, 18, 22, 28, 68, 70, 71, 82, 98, 103], "ndim": [8, 20], "basetyp": 8, "platform": [8, 23, 25, 33, 36, 106], "c_intp": 8, "could": [8, 22, 28, 33, 34, 52, 53, 60, 68, 69, 79, 82, 85, 92, 95, 97, 102, 105], "c_int": 8, "c_long": 8, "c_longlong": 8, "jump": 8, "obj": [8, 9], "_as_parameter_": 8, "perhap": [8, 103], "you": [8, 10, 16, 32, 34, 59, 61, 65, 68, 86, 91, 92, 93, 96, 97, 99, 102, 104, 105], "want": [8, 22, 28, 34, 37, 39, 59, 65, 69, 72, 95], "c_doubl": 8, "keep": [8, 9, 16, 18, 49, 56, 57], "shape_a": 8, "c_short": 8, "strides_a": 8, "still": [8, 34, 39, 58, 61, 80, 94, 99], "someth": [8, 65], "as_paramet": 8, "int32": 8, "31962608": 8, "vari": [8, 39, 71, 72, 82, 90, 98], "c_uint32": 8, "__main__": [8, 61], "lp_c_uint": 8, "0x7ff2fc1fc200": 8, "c_uint": 8, "c_uint64": 8, "c_ulong": 8, "4294967296": 8, "_core": 8, "_intern": 8, "c_long_array_2": 8, "0x7ff2fc1fce60": 8, "0x7ff2fc1ff320": 8, "cumprod": [8, 20], "cumul": [8, 99], "cumsum": [8, 20], "buffer": [8, 16], "devic": [8, 20, 24, 25, 33, 41, 48, 49, 62, 67, 69, 73, 81, 91, 92, 93, 94, 95, 98, 102], "axis1": 8, "axis2": 8, "previou": [8, 9, 14, 37, 38, 39, 40, 48, 54, 56, 58, 62, 101, 105], "version": [8, 15, 17, 31, 33, 56, 68, 82, 85, 89], "futur": 8, "dot": [8, 15, 20, 64, 74, 75, 77], "arr": 8, "discourag": 8, "deprec": [8, 17, 85], "back": [8, 21, 28, 33, 80, 94], "scalar": [8, 13, 15, 17, 18, 19, 78, 82], "behav": [8, 20], "rare": 8, "distinct": [8, 16, 92, 105], "unpack": [8, 15], "style": [8, 61], "segment": 8, "f_contigu": [8, 20], "owndata": [8, 20], "o": [8, 12, 15, 22, 28, 35, 44, 57, 64, 71, 74, 75, 82, 83, 84, 85, 93, 95, 98, 103, 105], "borrow": 8, "anoth": [8, 9, 12, 15, 17, 18, 22, 28, 40, 50, 55, 56, 62, 65, 69, 71, 79, 95, 102], "w": [8, 15, 17, 21, 28, 74, 82, 84], "lock": [8, 81], "inherit": [8, 37], "time": [8, 11, 12, 14, 15, 16, 20, 27, 34, 37, 40, 43, 44, 45, 55, 56, 62, 69, 71, 72, 79, 80, 82, 83, 85, 89, 93, 98, 99, 101, 103, 107], "opposit": 8, "made": [8, 33, 62, 72, 85, 94, 104], "howev": [8, 15, 21, 22, 28, 30, 33, 34, 37, 41, 42, 45, 49, 51, 56, 57, 58, 66, 68, 69, 77, 79, 80, 82, 83, 93, 95, 96, 97, 98, 102, 103, 105], "circumst": [8, 17], "alter": [8, 98], "onto": [8, 28, 41, 104], "appropri": [8, 15, 18, 33, 48, 56, 71, 90, 93, 100, 101], "writebackifcopi": [8, 20], "pyarray_resolvewritebackifcopi": 8, "fnc": [8, 20], "carrai": [8, 20], "ca": [8, 15, 20, 22, 28, 85, 89, 99], "farrai": [8, 20], "fa": 8, "lowercas": [8, 15], "short": [8, 73, 100], "entri": [8, 12, 15, 17, 18, 34, 81, 82], "setflag": [8, 20], "arbitrarili": [8, 40], "truli": 8, "ultim": [8, 72, 90], "owner": 8, "expos": [8, 26], "simultan": [8, 14, 16, 62, 71, 73, 75, 77, 84, 85], "dim": 8, "items": [8, 20], "flat": [8, 20], "flatit": 8, "similarli": [8, 16, 22, 26, 28, 29, 40, 44, 51, 68, 70, 71, 72, 75, 77, 78, 80, 82, 83], "flatten": [8, 20], "collaps": [8, 90], "arang": 8, "reshap": [8, 20], "row": [8, 12, 14, 15, 16, 19, 74, 82, 92, 94], "major": [8, 15, 37, 56, 81, 82, 85], "ravel": [8, 20], "getfield": [8, 20], "complex128": [8, 15, 82], "16": [8, 28, 39, 41, 56, 63, 71, 82, 83, 84, 85, 93, 94, 95, 100, 101, 103], "32": [8, 63, 70, 77, 84, 93, 94, 103, 105], "size": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 27, 37, 45, 56, 63, 68, 69, 79, 81, 82, 94, 95, 96], "larger": [8, 15, 22, 28, 30, 33, 37, 65, 68, 90, 97, 102, 103, 106, 108], "begin": [8, 15, 16, 17, 22, 28, 34, 37, 38, 39, 40, 41, 44, 45, 50, 56, 69, 70, 73, 79, 90, 92, 93, 94, 97, 98, 99, 101, 102, 103, 104, 105], "our": [8, 15, 25, 37, 38, 39, 40, 41, 43, 58, 62, 66, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106], "imag": [8, 15, 16, 20, 26, 98, 100], "sqrt": [8, 15, 16, 25, 26, 39, 43, 53, 56], "0j": [8, 15, 66, 82], "70710678": 8, "int_typ": 8, "interpret": [8, 15, 16, 18, 33, 62, 72, 79, 81], "nd": 8, "suitabl": [8, 14, 15, 16, 58, 68, 69, 92, 96, 97, 102], "longdoubl": 8, "clongdoubl": 8, "becaus": [8, 15, 16, 17, 39, 68, 69, 85, 95, 97, 98, 105], "lose": 8, "void": 8, "speed": [8, 28, 30, 34, 84, 85, 103], "arithmet": 8, "random": [8, 9, 10, 11, 12, 15, 16, 18, 28, 30, 41, 58, 71, 79, 82, 90, 99, 101], "123": 8, "randint": 8, "itemset": [8, 20], "mt": [8, 20], "amax": 8, "amin": 8, "nbyte": [8, 20], "consum": 8, "sy": [8, 16, 97], "getsizeof": 8, "zero": [8, 9, 10, 11, 15, 16, 17, 18, 20, 34, 37, 68, 69, 73, 78, 82, 99], "480": 8, "prod": [8, 20], "nonzero": [8, 18, 20, 83], "th": [8, 12, 15, 37, 40, 55, 56, 74, 77, 78], "locat": [8, 10, 14, 15, 65, 73], "greater": [8, 15, 18, 51, 59, 68, 70, 81], "side": [8, 14, 15, 43], "undefin": [8, 34], "move": [8, 12, 15, 31, 71, 96, 97, 98], "behind": [8, 47, 97], "sinc": [8, 9, 16, 21, 28, 37, 44, 56, 62, 63, 64, 68, 77, 82, 90, 91, 94, 97, 101], "22": [8, 22, 28, 40, 44, 63, 82, 84, 85, 93, 94, 101, 103], "unspecifi": [8, 15], "thei": [8, 13, 15, 37, 42, 45, 48, 49, 62, 65, 67, 68, 69, 71, 72, 75, 81, 82, 85, 93, 94, 98, 99, 104, 105, 108], "come": [8, 28, 30, 51, 64, 81, 82, 97], "break": [8, 15, 55, 68, 98], "ti": [8, 56], "indirect": [8, 16, 77, 107], "ptp": [8, 20], "resiz": [8, 20], "new_shap": 8, "refcheck": 8, "pypi": 8, "reliabl": [8, 36, 79], "systemerror": 8, "behaviour": [8, 81], "bug": [8, 85, 87], "realloc": 8, "consecut": [8, 51, 68], "sure": [8, 79, 91], "shrink": 8, "enlarg": 8, "miss": [8, 9, 36], "doesn": [8, 45, 83], "referenc": 8, "prevent": [8, 22, 28, 39, 56, 85], "traceback": [8, 36], "recent": [8, 48], "round": [8, 11, 15, 16, 20, 34, 43, 70, 85], "around": [8, 12, 96], "searchsort": [8, 20], "sorter": 8, "setfield": [8, 20], "val": 8, "ey": 8, "000": [8, 16, 25, 71, 81, 95, 98], "5e": 8, "323": 8, "uic": 8, "affect": [8, 16, 21, 28], "actual": [8, 28, 41, 53, 59, 67, 81, 99, 102, 103], "never": [8, 15], "unpickl": 8, "properli": [8, 45], "There": [8, 22, 26, 28, 33, 41, 42, 48, 68, 72, 79, 80, 90, 91, 96, 100, 101, 102, 106], "upper": [8, 12, 15, 20, 77, 102], "letter": [8, 84], "stdin": 8, "line": [8, 12, 15, 22, 28, 82, 85, 91, 95, 100], "As": [8, 15, 17, 22, 27, 28, 34, 37, 39, 44, 54, 55, 57, 58, 62, 65, 66, 70, 73, 74, 81, 82, 83, 85, 91, 94, 95, 96, 97, 99, 101, 102, 103, 105], "unchang": [8, 15, 71], "attributeerror": 8, "incompat": [8, 15], "modif": [8, 12, 21, 28, 30, 71, 72, 77], "getter": 8, "suggest": [8, 104, 105], "int_": [8, 21, 28], "overflow": [8, 85], "30": [8, 27, 41, 44, 56, 63, 74, 77, 84, 85, 93, 94, 99, 101, 102, 103, 104, 105], "quicksort": 8, "mergesort": 8, "heapsort": 8, "timsort": 8, "datatyp": 8, "retain": [8, 9, 12, 15, 65, 82, 96, 105], "lexsort": 8, "squeez": [8, 20], "ax": [8, 9, 12, 27, 45], "std": [8, 9, 20, 98], "ddof": 8, "explan": [8, 41, 81, 97, 101], "lib": 8, "stride_trick": 8, "as_strid": 8, "safer": 8, "imagin": [8, 95], "40": [8, 28, 82, 84, 91, 94, 103], "tell": [8, 37, 94], "17": [8, 28, 43, 63, 81, 84, 85, 93, 94, 101, 103], "18": [8, 28, 38, 44, 56, 63, 66, 81, 84, 93, 94, 101, 103], "19": [8, 28, 44, 63, 73, 80, 84, 85, 92, 93, 94, 101, 103], "23": [8, 22, 28, 40, 43, 44, 63, 68, 70, 82, 84, 85, 89, 93, 94, 101, 103], "48": [8, 55, 84, 94, 103], "224": [8, 76], "1344": 8, "813": 8, "swapax": [8, 20], "interchang": 8, "to_devic": [8, 20], "tobyt": [8, 20], "exhibit": 8, "frombuff": 8, "invers": [8, 14, 15, 43, 53, 82], "u2": [8, 82], "x00": 8, "x01": 8, "x02": 8, "x03": 8, "tofil": [8, 20], "fid": 8, "sep": [8, 15], "binari": [8, 13, 15, 16, 43, 82], "recov": [8, 15, 28, 30, 52, 57], "fromfil": 8, "closest": [8, 15, 82], "conveni": [8, 14, 15, 42, 71, 79, 82, 83, 85, 94, 96], "quick": [8, 15, 28, 32, 69, 70, 79, 102], "lost": 8, "good": [8, 80, 94, 95, 96], "archiv": 8, "transport": 8, "machin": [8, 16, 36, 44, 90, 92, 93, 98], "overcom": 8, "expens": [8, 9, 15, 19, 40, 69, 82, 95, 99], "bypass": 8, "gzipfil": 8, "fileno": 8, "bytesio": 8, "tolist": [8, 20], "nearest": [8, 11, 15], "builtin": 8, "simpl": [8, 9, 11, 14, 15, 16, 17, 18, 22, 24, 27, 28, 30, 34, 49, 59, 61, 62, 63, 64, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 91, 92, 95, 96, 97, 98, 99, 102, 103, 107], "recreat": 8, "although": [8, 15, 28, 42, 48, 79, 95], "1d": [8, 11, 17, 28, 29], "almost": [8, 69, 79, 101], "uint32": 8, "a_list": 8, "a_tolist": 8, "addition": [8, 15, 18, 22, 28, 33, 41, 65, 82, 92, 93, 96, 98, 99, 104], "0d": 8, "typeerror": [8, 9, 11, 15, 16, 18, 77], "tostr": [8, 20], "alia": [8, 13, 15, 16, 18], "despit": [8, 93], "trace": [8, 15, 17, 20, 66, 99], "becom": [8, 12, 28, 30, 33, 44, 58, 68, 72, 80, 90, 105], "simpli": [8, 16, 27, 40, 52, 58, 91, 92, 97, 98, 103, 104], "var": [8, 20, 59], "former": [8, 15, 42, 48, 62, 79, 81, 83, 104], "invok": [8, 15, 16, 27, 59, 61, 65, 67, 83, 95], "descriptor": 8, "omiss": 8, "some_dtyp": 8, "reinterpret": 8, "ndarray_subclass": 8, "just": [8, 34, 53, 68, 101, 103], "look": [8, 9, 15, 33, 79, 95, 101, 102, 103, 108], "per": [8, 15, 17, 18, 40, 51, 55, 75, 90], "regular": [8, 12, 15, 16, 37, 74], "had": [8, 16, 85], "int8": 8, "nonneg": 8, "recarrai": 8, "255": 8, "xv": 8, "i1": [8, 15, 83], "record": 8, "width": [8, 15], "i2": [8, 42, 43, 44, 79, 83], "fine": [8, 14, 15, 45, 91, 95], "rest": [8, 15], "770": 8, "3340": 8, "3854": 8, "1284": 8, "1798": 8, "4368": 8, "4882": 8, "2312": 8, "2826": 8, "5396": 8, "5910": 8, "computablesinglechild": [8, 20, 85], "tqcone": 8, "computabletupl": [8, 20, 41, 61, 62, 65, 85], "k_tupl": 8, "commutatorcomput": [8, 20, 85], "operator_left": 8, "operator_right": 8, "hand": [8, 14, 15, 16, 43, 56, 92, 103], "expectationvaluesumcomput": [8, 20, 82, 85], "sum_i": [8, 11, 15, 16, 40, 56, 74, 75, 76, 77, 82, 83], "psi_i": [8, 64, 85], "holegfcomput": [8, 20, 85], "hole": 8, "green": [8, 60, 67, 84, 85, 86, 107], "lanczo": [8, 63, 107], "krylovsubspac": [8, 20, 63], "helper": [8, 63, 82, 85, 107], "alpha_n": 8, "beta_n": 8, "alpha_f": [8, 20], "beta_f": [8, 20], "construct_symbolic_recursive_gf": [8, 20], "gf_recursion_stop_toler": 8, "formula": [8, 15, 16, 18, 19, 74], "bn": 8, "construct_symbolic_recursive_gf_h": [8, 20], "e0": 8, "eta": [8, 82], "small": [8, 10, 15, 28, 30, 34, 58, 72, 77, 81, 82, 84, 85, 94, 95, 101, 102, 106, 107, 108], "construct_symbolic_recursive_gf_p": [8, 20], "construct_symbolic_recursive_lanczos_gf00": [8, 20], "construct_tridiagonal_represent": [8, 20], "tridiagon": [8, 107], "lowest_eigenvalu": [8, 20], "krylovsubspacecomput": [8, 20, 63, 85, 107], "2009": [8, 84], "13140": 8, "indirectli": 8, "l": [8, 14, 15, 16, 17, 34, 37, 40, 44, 55, 57, 72, 74, 82, 84, 90, 91, 93, 97, 98, 102, 103], "lanczoscoefficientscomput": [8, 20, 85, 107], "lanczosmatrixcomput": [8, 20, 85, 107], "manybodygfcomput": [8, 20, 85], "ground_stat": [8, 39], "ground_state_energi": [8, 103], "mutabledensematrix": 8, "infinitesim": 8, "default_evaluate_as_funct": [8, 20], "evaluate_as_funct": [8, 20], "gf": 8, "nonorthogonalmatricescomput": [8, 20, 64, 85], "hermitian_oper": [8, 38, 39, 93], "NO": [8, 64], "hc": [8, 9, 38, 64, 85, 93], "esc": 8, "span": [8, 11, 15, 38, 58, 93, 99, 105], "overlapmatrixcomput": [8, 20, 64, 85], "2205": 8, "09039": 8, "expand": [8, 15, 17, 40, 63, 83, 85, 93, 96, 103], "psi_j": [8, 64, 85, 93], "off": [8, 11, 15, 37, 39, 44, 62, 64, 80, 84], "lower": [8, 11, 12, 13, 15, 16, 17, 20, 48, 49, 55, 62, 68, 77, 94, 95, 98], "triangular": [8, 11], "pdm1234realcomput": [8, 20, 85, 99, 105], "symmetry_oper": [8, 19, 20, 66, 99, 105], "cas_elec": [8, 99, 105], "cas_orb": [8, 99, 105], "cu4": [8, 99], "pre": [8, 16, 17, 20, 28, 54, 68, 69, 70, 79, 82, 92, 99, 101, 105], "0051211": 8, "symmetryoperatorpauli": [8, 15, 17, 19, 20, 83], "sq": [8, 17], "particlegfcomput": [8, 20, 85], "qcm4comput": [8, 20, 85], "infimum": 8, "2311": 8, "02533": 8, "__init__": [8, 20, 61], "expansion_oper": [8, 38, 39, 93], "aim": [8, 33, 48, 51, 97, 98, 104], "ly": [8, 93], "rdm1234realcomput": [8, 20, 85], "restrictedonebodyrdmcomput": [8, 20, 66, 85], "_basecollinearonebodyrdmcomput": 8, "restrictedonebodyrdmrealcomput": [8, 20, 85], "pointgroup": [8, 15, 17, 19, 20, 39, 51, 82, 83, 90, 91, 92, 107], "datastructur": 8, "qubitpaulistr": [8, 15, 16, 79, 80], "unitid": 8, "check_energi": [8, 20], "eigv": 8, "eigenvector": [8, 9, 15, 38, 39, 40, 82, 84, 93, 102], "get_overlap_comput": [8, 20], "get_s2_comput": [8, 20], "get_sz_comput": [8, 20], "sz": [8, 39], "spinlessnbodypdmarrayrealcomput": [8, 20, 85], "spinless": 8, "psi_0": [8, 64, 77, 78, 93, 99], "uparrow": [8, 17, 82, 99], "downarrow": [8, 17, 82, 99], "four": [8, 12, 15, 39, 43, 53, 62, 70, 80, 82, 90, 95], "prtv": 8, "qsuw": 8, "spinlessnbodyrdmarrayrealcomput": [8, 20, 66, 85, 99, 105], "And": [8, 16, 38, 39, 62, 75, 81, 82, 99], "unrestrictedonebodyrdmcomput": [8, 20, 85], "unrestrictedonebodyrdmrealcomput": [8, 20, 85], "timer": [9, 11, 20, 22, 28, 34, 37, 38, 39, 40, 41, 45, 50, 70, 73, 92, 93, 94, 99, 101, 102, 103, 104, 105], "timerwith": [9, 20], "process": [9, 14, 15, 16, 19, 28, 33, 34, 37, 42, 43, 44, 48, 59, 62, 67, 69, 70, 72, 79, 82, 84, 90, 92, 93, 94, 97, 98, 99, 102], "context": [9, 23, 33, 43, 48, 93, 97, 99, 103, 104, 105, 107], "manag": [9, 16, 23, 25, 28, 29, 32, 35, 36, 49, 62, 67, 68, 79, 82, 85, 94, 99, 108], "1000000": 9, "inner": [9, 10, 15, 18, 20, 82], "block_count": [9, 20], "inquantocontext": [9, 20], "job_nam": 9, "working_file_nam": 9, "file_onli": 9, "__file__": 9, "suppress": [9, 16, 79, 97], "prefix": [9, 15, 20], "ensembl": 9, "as_set": [9, 20], "construct_from_arrai": [9, 20, 38, 39, 45, 66, 69, 73, 74, 90, 91], "assertionerror": 9, "construct_from_dict": [9, 20], "construct_random": [9, 20, 22, 28, 40, 50, 55, 58, 63, 74, 76, 77, 80, 90, 101], "drawn": 9, "randomli": [9, 10, 16, 44], "construct_zero": [9, 20, 40, 41, 73], "from_symbol": [9, 20], "issubset": [9, 20], "util": [9, 17, 20, 21, 22, 23, 26, 28, 33, 34, 39, 45, 56, 59, 61, 65, 68, 69, 82, 85, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105], "cachedict": [9, 16, 20], "hasher": 9, "max_size_in_byt": 9, "ignore_make_hash": 9, "mutablemap": 9, "admit": [9, 77], "address": [9, 38, 68, 85, 93, 101, 104], "hash": [9, 85], "aka": 9, "virtu": 9, "track": [9, 45, 49, 91, 92, 93, 98, 102], "weakref": 9, "lifetim": 9, "value_fn": 9, "cach": [9, 16, 19, 20, 59, 85, 99, 105], "hit": [9, 16], "convert_weaks_to_ref": [9, 20], "weak": [9, 101], "strong": [9, 84], "format_s": [9, 20], "n_byte": 9, "suffix": [9, 15], "get_size_in_byt": [9, 20], "keyerror": 9, "popitem": [9, 20], "setdefault": [9, 20], "lack": [9, 13], "cache_dict": [9, 16, 20], "decor": [9, 16, 61], "reevalu": 9, "cachetim": 9, "dict_to_matrix": [9, 20], "ordered_symbol": 9, "symbol_pair_to_valu": 9, "dict_to_vector": [9, 20, 73], "symbol_to_valu": 9, "hash_data": [9, 20], "xxhash": [9, 89], "typehasstr": 9, "hello": 9, "world": 9, "miywmzbrgzswk": 9, "haydoyjymu4d": 9, "matrix_to_dict": [9, 20], "pd_safe_eigh": [9, 20, 64, 85, 93], "lindep": 9, "lindep_tolerance_strict": 9, "sce": [9, 38, 64, 85, 93], "linearli": [9, 56, 80, 82], "subset": [9, 15], "fall": [9, 81], "vector_to_dict": [9, 20], "one_body_rdm_rhf": 10, "newton_maxit": 10, "newton_tol": 10, "occupation_rtol": 10, "numpy_rtol": [10, 15], "occupation_atol": 10, "numpy_atol": [10, 15], "pyscfrestrictedintegraloperatort": 10, "isclos": 10, "construct_random_paramet": [10, 20], "correlation_potential_pattern": [10, 20], "dmetrhffrag": [10, 20], "dmetrhffragmentdirect": [10, 20], "pattern_from_loc": [10, 20], "parameter_pattern": 10, "initial_chemical_potenti": 10, "run_on": [10, 20], "chemical_potenti": [10, 22, 28, 68], "basedmetrhffrag": 10, "energet": [10, 38, 103], "dmetrhffragmentact": [10, 20, 68], "fragment_energi": [10, 22, 28, 68], "dmetrhffragmentuccsdvq": [10, 20, 68], "wish": [10, 43, 52, 62, 69, 82, 101, 103], "advanc": [10, 15, 19, 23, 28, 62, 65, 82, 83, 84, 94], "recommend": [10, 13, 14, 16, 17, 28, 34, 36, 51, 62, 68, 72, 81, 85, 90, 92, 97, 99, 102, 106], "impuritydmetrohffrag": [10, 20, 22, 28, 68], "impuritydmetrohffragmentwithoutrdm": [10, 20], "baseimpuritydmetrohffrag": 10, "impuritydmetrohffragmentact": [10, 20, 68], "exact": [10, 11, 15, 16, 18, 22, 28, 39, 63, 68, 69, 79, 82, 84, 85, 91, 95, 103, 104, 107], "cost": [10, 15, 16, 20, 28, 29, 30, 41, 47, 62, 72, 73, 80, 85, 91, 98, 99, 102, 103], "grow": [10, 48, 80, 97, 103], "notabl": [10, 90, 96, 97, 98], "difficult": [10, 28], "drivergeneralizedhubbard": [11, 20, 70], "ring": [11, 12, 24, 68, 70, 107], "generaldriv": 11, "hubbard": [11, 22, 28, 63, 68, 70, 107], "chain": [11, 12, 16, 24, 28, 29, 70, 74, 84], "topologi": [11, 70], "site": [11, 63, 70], "neighbor": 11, "standalon": 11, "generate_chain": [11, 20], "off_diagon": 11, "connect": [11, 12, 16, 25, 28, 33, 70, 79, 84, 99, 102], "spars": [11, 13, 15, 16, 18, 82, 97, 99, 105], "generate_r": [11, 20], "driverhubbarddim": [11, 20, 63, 70], "negat": [11, 70], "On": [11, 15, 22, 28, 34, 41, 56, 61, 84, 92, 103], "driverisingcustomconnect": [11, 20], "connectivity_matrix": 11, "transvers": [11, 85], "Ising": [11, 85], "lattic": [11, 26, 71], "n_q": [11, 15], "j_": [11, 15, 16, 37, 43, 74], "z_i": 11, "z_j": 11, "x_i": [11, 17, 37, 82], "strength": [11, 24, 33, 85, 102], "ferromagnet": 11, "antiferromagnet": 11, "tfim": 11, "driverising1d": [11, 20, 85], "boundari": [11, 14, 15, 16, 28, 29, 70], "z_": [11, 15, 28, 30, 82], "driverising1dr": [11, 20], "get_noisy_backend": [11, 20, 69, 70, 85], "cx_err": [11, 70], "008": [11, 94], "ro_err": [11, 70], "noisi": [11, 14, 33, 41, 68, 69, 70, 73, 79, 84, 85, 90, 93, 94, 98, 108], "aer": [11, 70, 91, 108], "aerbackend": [11, 16, 38, 43, 44, 62, 63, 64, 66, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 90, 101], "depolar": [11, 70], "readout": [11, 16, 70, 79, 90], "data_in": 11, "dataset": [11, 92], "list_h5": [11, 20, 70, 85], "predefin": [11, 48, 97], "as_tupl": [11, 34, 45, 50, 59, 66, 68, 70, 74, 75, 81, 82, 83, 90, 91, 92], "namedtupl": [11, 16, 70], "qubit_hamiltonian": [11, 27, 37, 38, 39, 40, 41, 43, 44, 59, 62, 63, 64, 66, 70, 73, 81, 82, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105], "qubit_st": [11, 37, 39, 56, 82, 107], "hamiltonion": 11, "ith": [11, 17, 40], "random_circuit_ansatz": [11, 20], "return_sv": 11, "guess_mo_coeff": 11, "maxit": 11, "conv": 11, "advis": [11, 18], "criterion": [11, 97], "run_rohf": [11, 20, 70], "run_time_evolut": [11, 20], "initial_st": 11, "time_span": 11, "evolut": [11, 14, 15, 20, 43, 44, 45, 72, 85, 107], "switch": [11, 16, 27, 33, 71, 102], "run_vq": [11, 20, 22, 28, 34, 50, 70, 85, 92, 93, 94, 99, 102, 103, 104, 105], "with_gradi": [11, 34, 92, 93, 94, 99, 102, 103, 104, 105], "minimizerscipi": [11, 14, 20, 22, 28, 37, 40, 41, 82, 97, 101, 102, 103], "optimizationmethod": [11, 14, 20], "l_bfgs_b_smooth": [11, 14, 20], "black": [11, 22, 28, 44, 68, 72, 79, 82, 90, 91, 93, 98], "basebackendconfig": [11, 16], "h2_sto3g": [11, 27, 34, 37, 38, 39, 40, 41, 43, 44, 45, 50, 59, 62, 64, 70, 73, 74, 75, 76, 80, 81, 83, 90, 91, 92, 101, 102], "13684658": [11, 34, 70], "save_h5_system": [11, 20, 85], "fname": [11, 82], "hf_state": [11, 74, 83], "essenti": [11, 49, 54, 67, 68, 79, 82, 93, 97, 98, 99, 103, 104, 105], "distance_unit": [12, 71], "angstrom": [12, 26, 71, 94], "manipul": [12, 13, 15, 33, 49, 58, 69, 71, 72, 82, 83, 85, 96], "degre": [12, 17, 90, 99], "bohr": [12, 71], "radian": [12, 94], "geometr": [12, 71, 97, 102], "xyz": [12, 20, 22, 26, 28, 71, 72, 85, 94, 95, 100], "add_atom": [12, 20, 71], "cartesian": [12, 71, 103], "align_bond_to_axi": [12, 20], "atom_id": [12, 71], "bond": [12, 33, 70, 71, 96, 98], "translat": [12, 15, 17, 20], "ordin": [12, 15, 103], "param": [12, 15, 64, 74, 76, 77, 80], "align_bond_to_vector": [12, 20], "align_to_plan": [12, 20], "lie": [12, 16], "plane": [12, 92, 94, 98], "align_to_xy_plan": [12, 20], "align_to_xz_plan": [12, 20], "align_to_yz_plan": [12, 20], "atomic_coordin": [12, 20], "bond_angl": [12, 20, 71, 103], "deg": [12, 71], "angl": [12, 16, 49, 55, 56, 71, 79, 90, 103], "middl": [12, 74], "oxygen": 12, "rad": 12, "bond_length": [12, 20, 71, 103], "inter": 12, "internuclear": 12, "build_2atom_chain": [12, 20], "num_pair": 12, "d_intra": 12, "d_inter": 12, "homonuclear": 12, "diatom": [12, 96], "build_alternating_r": [12, 20], "element_a": 12, "bb": [12, 15, 82], "build_rectangl": [12, 20], "dx": [12, 84], "nx": 12, "dy": 12, "ny": 12, "rectangular": [12, 15], "build_r": [12, 20], "compute_distance_matrix": [12, 20, 71], "delete_atom": [12, 20], "atom_index": 12, "delet": [12, 15], "df_to_xyz": [12, 20], "dihedral_angl": [12, 20, 71], "dihedr": [12, 71], "from_xyz_str": [12, 20], "xyz_str": 12, "load_csv": [12, 20, 71], "fn": 12, "csv": [12, 71], "load_json": [12, 20, 71], "load_xyz": [12, 20, 71, 85], "load_zmatrix": [12, 20, 71], "modify_bond_angl": [12, 20, 71], "third": [12, 15, 56, 81, 96, 97], "modify_bond_angle_by_group": [12, 20], "subgroup": 12, "belong": [12, 16, 19, 22, 25, 28, 68, 82], "modify_bond_length": [12, 20, 71], "new_bond_length": [12, 71], "modify_bond_length_by_group": [12, 20, 71], "modify_dihedral_angl": [12, 20], "modify_dihedral_angle_by_group": [12, 20, 71], "3rd": [12, 99, 105], "4th": [12, 85, 99, 105], "1st": [12, 99, 105, 107], "2nd": [12, 28, 99, 105], "randomize_xyz": [12, 20], "05": [12, 14, 22, 28, 40, 50, 84], "freeze_atom": 12, "center": [12, 15, 20, 21, 28], "freez": [12, 15, 17, 20, 28, 68, 103], "rescale_position_vector": [12, 20, 71], "frame": [12, 102], "rotate_around_axi": [12, 20], "rotate_around_vector": [12, 20], "save_csv": [12, 20, 71], "save_json": [12, 20, 71], "save_xyz": [12, 20, 71, 85], "save_zmatrix": [12, 20, 71], "scan_bond_angl": [12, 20, 71], "scan": [12, 71, 90], "surfac": [12, 21, 28, 29, 85, 104], "scan_bond_angle_by_group": [12, 20, 71], "scan_bond_length": [12, 20, 71], "stretch": [12, 71, 98, 104], "scan_bond_length_by_group": [12, 20], "scan_dihedral_angl": [12, 20, 71], "fourth": 12, "scan_dihedral_angle_by_group": [12, 20], "set_subgroup": [12, 20], "regex": 12, "to_angstrom": [12, 20], "to_bohr": [12, 20], "to_zmatrix": [12, 20], "held": 12, "translate_by_vector": [12, 20], "xyz_to_df": [12, 20], "zmatrix_to_df": [12, 20], "3x3": 12, "build_supercel": [12, 20, 71], "supercel": [12, 17, 70, 71], "abc": 13, "strategi": [13, 16, 22, 28, 34, 39, 48, 51, 62, 68, 69, 79, 81, 82, 84, 91, 93, 96, 103, 107], "bravyi": [13, 19, 82, 84, 93, 107], "formal": [13, 15, 70, 82, 84], "seelei": [13, 82, 84], "richard": [13, 82, 84], "love": [13, 82, 84], "1208": 13, "5986": 13, "docstr": [13, 85], "flip_set": [13, 20], "flip": [13, 15, 82, 101], "update_set": [13, 20, 82], "parity_set": [13, 20, 82], "pariti": [13, 15, 16, 17, 78, 82, 83, 92, 94, 98, 99, 105], "rho_set": [13, 20, 82], "rho": [13, 21, 28, 82], "state_map_matrix": [13, 20, 82], "_mapping_flag": [13, 20], "character": [13, 48, 98], "ambiguous_qubit_numb": 13, "maxim": [13, 44], "generic": 13, "operator_map_typ": [13, 20], "cl": 13, "annihil": [13, 15, 17, 37, 39, 54, 68, 72, 82, 93, 99, 102], "compris": [13, 15, 17, 49, 69, 77, 82, 90, 96], "operator_map": [13, 20, 22, 27, 28, 37, 38, 39, 40, 41, 43, 44, 73, 82, 91, 92, 93, 94, 98, 101, 102, 103], "abs_tol": [13, 15, 18, 93], "abs_tol_oper": [13, 15, 18], "quadrat": [13, 56, 96], "quartic": 13, "trivial": [13, 28, 29], "symmetryoperatorfermionicfactor": [13, 15, 17, 20, 83], "erron": 13, "symmetryoperatorpaulifactor": [13, 15, 20], "state_map": [13, 20, 39, 53, 82], "fermionstatestr": [13, 18, 20, 53, 82, 85], "scipi": [13, 14, 15, 18, 34, 45, 73, 82, 85, 89, 97, 102], "treat": [13, 15, 18, 21, 28, 49, 68, 69, 95, 102, 104], "literatur": [13, 43, 56, 70, 82], "incur": [13, 83, 95], "versu": 13, "spmatrix": [13, 18], "state_map_convent": [13, 20], "qubitmappingbravyikitaev": [13, 20, 82, 85, 102], "wherein": [13, 15, 16, 18, 82, 98, 104], "logarithm": 13, "ann": 13, "298": 13, "210": [13, 15], "2002": [13, 84], "remainder_set": [13, 20], "remaind": [13, 15, 48, 75], "qubitmappingpar": [13, 20, 85], "therebi": 13, "enforc": [13, 15, 77, 81, 101], "anticommut": [13, 15, 17, 19, 20, 82], "commensur": 13, "qubitmappingparaparticular": [13, 20], "paraparticular": [13, 82], "hilbert": [13, 15, 17, 18, 49, 72, 82, 83], "paraparticl": [13, 82, 107], "boson": 13, "consid": [13, 15, 17, 22, 28, 29, 30, 33, 42, 43, 44, 53, 55, 56, 58, 61, 62, 72, 75, 79, 80, 82, 83, 90, 92, 93, 95, 98, 101, 102, 103], "drop": [13, 15, 85], "harmless": 13, "elsewher": [13, 88, 107], "2101": 13, "11607": 13, "minimizerrotosolv": [14, 20, 99, 104, 105], "max_iter": [14, 73], "minimizer_convergence_toler": 14, "order_independ": 14, "rotosolv": [14, 73], "391": [14, 84, 93], "2021": [14, 84], "learn": [14, 44, 98], "sinusoid": 14, "landscap": 14, "throughout": [14, 33, 41, 85, 99, 105], "summari": [14, 80, 81, 97], "minimizersgd": [14, 20], "learning_r": [14, 73], "decay_r": [14, 73], "callback": 14, "acceler": [14, 24], "269": [14, 84], "2020": [14, 84], "stepsiz": 14, "descent": [14, 73, 97], "decai": 14, "histori": 14, "summar": [14, 15, 82], "assist": 14, "minimizerspsa": [14, 20, 73, 85], "perturb": [14, 28, 73, 84, 85, 99], "spsa": [14, 85], "www": [14, 86, 89], "jhuapl": 14, "edu": 14, "spall_implementation_of_the_simultan": 14, "602": 14, "101": [14, 16, 71], "stability_const": 14, "perturbation_sampl": 14, "perturbation_samples_init": 14, "gradient_smooth": 14, "powerseri": 14, "denomin": [14, 16, 20], "routin": [14, 33, 73, 79, 85, 97, 103, 107], "popular": [14, 31, 47], "cg": [14, 73], "bfg": [14, 34, 37, 40, 97, 102, 103], "slsqp": 14, "cobyla": [14, 22, 28, 101], "enum": [14, 15, 16], "associ": [14, 15, 16, 17, 18, 19, 32, 36, 56, 68, 82, 83, 92, 93, 95, 96, 97, 98, 99, 102, 104, 105], "calibr": [14, 16, 20, 69, 85, 91], "aid": [14, 26, 72, 99, 100, 104, 105], "naiveeulerintegr": [14, 20, 45], "time_ev": 14, "linear_solv": [14, 45], "linear_solver_scipy_linalg": [14, 20], "euler": 14, "monoton": [14, 15, 18], "decreas": [14, 19, 37, 98, 103], "differenti": [14, 15, 45, 104], "linalg": [14, 15, 18], "unknown": 14, "linear_solver_scipy_pinvh": [14, 20, 45], "pinvh": 14, "moor": 14, "penros": 14, "invert": 14, "linear_problem": 14, "mapsto": [14, 58], "qualnam": [14, 15, 16], "enumer": [14, 94, 100], "empir": [14, 21, 28], "smoother": 14, "ftol": 14, "leq": 14, "ep": 14, "jacobian": [14, 15, 16, 74], "forward": [14, 16, 37, 56, 83, 94, 97, 98], "l_bfgs_b_coars": [14, 20], "coarser": 14, "rapid": 14, "0001": [14, 22, 28, 95], "09": [14, 40, 45, 92, 99, 103, 104, 105], "08": [14, 16, 40, 85, 93, 94, 98, 103], "scipyivpintegr": [14, 20], "solve_ivp": 14, "scipyodeintegr": [14, 20], "odeint": 14, "from_fermionoper": [15, 20], "_one_bodi": 15, "_two_bodi": 15, "from_fcidump": [15, 20, 85], "fcidump": [15, 72, 85, 102], "pars": [15, 18, 62, 64], "norm": [15, 17, 18, 20, 73, 82], "to_compact_integral_oper": [15, 20], "compacttwobodyintegr": 15, "fold": [15, 85], "eight": [15, 43, 85], "two_body_iijj": [15, 20], "ii": [15, 34, 37, 56, 68, 72], "jj": 15, "chemist": [15, 17], "compacttwobodyintegralss4": [15, 20], "compacttwobodyintegralss8": [15, 20, 85], "rather": [15, 16, 17, 19, 55, 56, 77, 79, 83, 90, 101], "longer": [15, 70, 85], "suppos": [15, 44], "might": [15, 16, 52, 59, 65, 73, 75], "faulti": 15, "frobeniu": 15, "to_uncompacted_integral_oper": [15, 20], "one_body_aa": 15, "one_body_bb": 15, "two_body_aaaa": 15, "two_body_bbbb": 15, "two_body_aabb": 15, "eri_aabb": 15, "eri_bbaa": 15, "_one_body_aa": 15, "_one_body_bb": 15, "_two_body_aaaa": 15, "_two_body_bbbb": 15, "_two_body_aabb": 15, "slater": [15, 56, 82, 104], "care": [15, 58, 82, 83], "compact_arrai": 15, "basecompacttwobodyintegr": 15, "pictur": [15, 82], "check_s4_symmetri": [15, 20], "uncompact_arrai": 15, "leftrightarrow": 15, "from_uncompacted_integr": [15, 20], "check_symmetri": 15, "uncompact": 15, "u_ij": 15, "u_kl": 15, "n_p": [15, 77], "n_r": 15, "pp": 15, "check_s8_symmetri": [15, 20], "diagonalizedonebodyintegr": [15, 20], "rp": [15, 17], "rq": [15, 68], "get_el": [15, 20], "get_ful": [15, 20], "doublefactorizedtwobodyintegr": [15, 20], "rotation_matric": [15, 20, 82], "outer_param": [15, 82], "inner_param": [15, 82], "core_tensor_as_arrai": 15, "ldlt": 15, "uq": 15, "uv": 15, "lambda_v": 15, "xdfcoretensor": [15, 20, 85], "vr": 15, "fcidumprestrict": [15, 20, 72, 82, 85], "facilit": [15, 33, 48, 58, 61, 67, 73, 82, 91], "vanilla": 15, "against": [15, 18, 28, 68, 82, 95, 97, 107], "psi4": [15, 82, 102], "nwchem": [15, 82], "get_system_specif": [15, 20], "one_body_list": 15, "two_body_list": 15, "one_body_to_arrai": [15, 20], "permutation": [15, 17], "to_arrai": [15, 16, 20], "two_body_to_tensor": [15, 20], "norb": 15, "nelec": 15, "orbsym": 15, "isym": 15, "chemistry_operator_toler": 15, "fcidumpunrestrict": [15, 20, 72, 82, 85], "spin_index_format": [15, 82], "minor": [15, 17, 82, 85], "design": [15, 16, 27, 33, 48, 61, 62, 67, 68, 69, 73, 75, 79, 80, 81, 82, 85, 93, 98, 99, 103, 105], "spinorb": 15, "denot": [15, 22, 27, 28, 68, 90, 93, 94, 98], "delimit": [15, 82], "aa": [15, 82], "2m": 15, "odd": [15, 17], "valid_format": [15, 20], "from_tupl": [15, 20], "from_list": [15, 20, 39, 66], "fo": [15, 17], "op": [15, 16, 45, 82, 94], "f1": [15, 17, 28, 34, 54, 70, 82, 83, 93, 94, 101, 102], "f2": [15, 17, 28, 34, 54, 70, 82, 83, 93, 94, 101, 102], "trotterizecoefficientsloc": [15, 20], "upon": [15, 17, 19, 43, 65, 77, 81, 82, 90, 91, 97, 98, 105], "wherea": [15, 44, 61, 70, 79, 81, 82, 83, 102], "operatorlist": [15, 85], "capit": [15, 20], "charact": [15, 19, 83], "casefold": [15, 20], "caseless": 15, "fillchar": 15, "pad": [15, 20, 82, 85], "substr": 15, "utf": 15, "strict": 15, "codec": 15, "unicodeencodeerror": 15, "xmlcharrefreplac": 15, "register_error": 15, "endswith": [15, 20], "expandtab": [15, 20], "tabsiz": 15, "tab": 15, "failur": [15, 19], "brace": 15, "format_map": [15, 20], "isalnum": [15, 20], "least": [15, 18, 44, 90], "isalpha": [15, 20], "alphabet": [15, 18], "isascii": [15, 20], "ascii": 15, "0000": [15, 63, 105], "007f": 15, "too": [15, 33], "isdecim": [15, 20], "isdigit": [15, 20], "isidentifi": [15, 20], "iskeyword": 15, "reserv": 15, "def": [15, 22, 28, 59, 61, 68, 73, 79, 103], "islow": [15, 20], "isnumer": [15, 20], "isprint": [15, 20], "printabl": 15, "repr": 15, "isspac": [15, 20], "whitespac": 15, "istitl": [15, 20], "titl": [15, 20, 86, 90, 91, 98], "uncas": 15, "ones": [15, 16, 17, 18, 68], "isupp": [15, 20], "uppercas": 15, "concaten": [15, 16, 17, 78], "ljust": [15, 20], "justifi": 15, "lstrip": [15, 20], "char": 15, "maketran": [15, 20], "usabl": 15, "unicod": 15, "removeprefix": [15, 20], "removesuffix": [15, 20], "old": [15, 16, 85, 94], "rfind": [15, 20], "rindex": [15, 20], "rjust": [15, 20], "rpartit": [15, 20], "rsplit": [15, 20], "maxsplit": 15, "front": 15, "rstrip": [15, 20], "trail": 15, "intention": 15, "punctuat": 15, "splitlin": [15, 20], "keepend": 15, "startswith": [15, 20], "strip": [15, 20], "swapcas": [15, 20], "titlecas": 15, "lookup": 15, "__getitem__": 15, "lookuperror": 15, "untouch": 15, "zfill": [15, 20], "apply_bra": [15, 20, 82], "post": [15, 16, 20, 33, 34, 42, 44, 45, 62, 69, 79, 93, 94, 104], "apply_ket": [15, 20, 82], "approx_equal_to": [15, 18, 20], "neglig": [15, 18, 99, 105], "normal_ord": [15, 20, 70, 82], "costli": 15, "approx_equal_to_by_random_sub": [15, 18, 20], "lineardictcombin": [15, 18], "as_scalar": [15, 20], "f0": [15, 17, 28, 34, 54, 70, 82, 83, 93, 94, 101, 102], "caca": [15, 20], "f3": [15, 28, 34, 54, 70, 82, 83, 93, 94, 101, 102], "ccaa": [15, 20], "other_oper": 15, "commutes_with": [15, 20, 82], "symbol_sub_typ": [15, 18], "compresssymbolsubtyp": [15, 18], "duplic": [15, 18, 58], "deal": [15, 18, 22, 28, 68, 82, 97], "intact": [15, 18], "uniti": [15, 18, 56, 74], "signific": [15, 16, 18, 34, 44, 69, 85, 97], "priori": [15, 18, 56, 83], "best": [15, 18, 31, 33, 36, 82, 108], "suit": [15, 18, 31, 39, 41, 62, 66, 73, 96], "a_1": [15, 18], "a_2": [15, 18], "ldot": [15, 18, 101], "a_n": [15, 18], "evalf": [15, 18, 20], "index_map": 15, "openfermion": [15, 89], "freeze_orbit": 15, "prune": 15, "continu": [15, 21, 28, 62, 97, 105], "unoccupi": [15, 17, 28, 58, 68, 82, 96], "fos0": 15, "fos1": 15, "input_str": [15, 18], "coeff1": [15, 18], "coeff1_1": [15, 18], "term1_1": [15, 18], "coeff1_n": [15, 18], "term1_n": [15, 18], "coeffn": [15, 18], "coeffn_1": [15, 18], "termn_1": [15, 18], "anihil": 15, "infer_num_spin_orb": [15, 20], "is_all_coeff_complex": [15, 18, 20], "is_all_coeff_imag": [15, 18, 20], "pure": [15, 18, 45], "is_all_coeff_r": [15, 18, 20], "is_all_coeff_symbol": [15, 18, 20], "is_antihermitian": [15, 20, 82, 85], "is_any_coeff_complex": [15, 18, 20], "is_any_coeff_imag": [15, 18, 20], "is_any_coeff_r": [15, 18, 20], "is_any_coeff_symbol": [15, 18, 20], "is_commuting_oper": [15, 20], "is_hermitian": [15, 20, 82, 85], "is_normal_ord": [15, 20, 82], "is_norm": [15, 18, 20], "is_parallel_with": [15, 18, 20], "is_self_invers": [15, 20, 82, 85], "is_two_body_number_conserv": [15, 20, 82], "check_spin_symmetri": 15, "is_unit_1norm": [15, 18, 20], "is_unit_2norm": [15, 18, 20], "is_unit_norm": [15, 18, 20, 82], "is_unitari": [15, 20, 82], "itemsview": [15, 18], "key_from_str": [15, 18, 20], "key_str": [15, 18], "list_class": [15, 20], "norm_coeffici": [15, 18, 20], "runtim": [15, 16, 28, 35, 62, 103], "f4": [15, 54, 70, 82, 93, 94], "op_no": 15, "norm_valu": [15, 18], "norm_ord": [15, 18], "num_spin_orb": [15, 20], "permuted_oper": [15, 20], "f5": [15, 54, 70, 82, 93, 94], "f6": [15, 82], "noreturn": [15, 18], "remove_global_phas": [15, 18, 20], "global": [15, 17, 18, 45, 68], "set_global_phas": [15, 18, 20], "reversed_ord": [15, 18, 20], "sympifi": [15, 18, 20, 75, 78, 82], "sympif": [15, 18], "to_latex": [15, 17, 20, 85], "imaginary_unit": 15, "latex": [15, 17], "8j": [15, 93], "2j": [15, 82], "operator_symbol": 15, "f_": 15, "qos1": 15, "x1": [15, 16, 37, 39, 45, 57, 59, 62, 63, 64, 66, 69, 74, 75, 77, 78, 79, 81, 82, 83, 92, 93, 94, 102], "y2": [15, 37, 63, 69, 78, 81, 82, 92, 93, 94, 102], "z3": [15, 63, 64, 69, 78, 81, 82, 83, 92, 93, 94, 102], "qos2": 15, "z0": [15, 63, 64, 69, 77, 79, 80, 81, 82, 83, 92, 93, 94, 102], "x4": [15, 93, 94], "qos3": 15, "qo": 15, "4j": [15, 17], "x_": [15, 37, 74, 75, 77, 79, 82], "y_": [15, 37], "i_": [15, 37], "3j": 15, "show_label": 15, "trotter_numb": [15, 27, 43, 44, 80, 82], "trotter_ord": 15, "coefficients_loc": 15, "suzuki": [15, 43], "operatorlistt": 15, "op1": [15, 82], "x0": [15, 37, 63, 69, 77, 78, 79, 81, 82, 83, 92, 93, 94, 102], "z1": [15, 63, 64, 69, 77, 78, 80, 81, 82, 83, 92, 93, 94, 102], "z5": [15, 82, 93, 94], "6j": 15, "trotter_oper": 15, "operator_prune_toler": 15, "999": [15, 82], "001": [15, 16, 25, 70, 82, 94, 97], "005": 15, "nonlinear": 15, "op2": [15, 82], "fto": 15, "compressscalarsbehavior": [15, 20], "only_identities_and_zero": [15, 20], "top": [15, 33, 38, 59], "factorycoefficientsloc": [15, 20], "from_oper": [15, 20], "collapse_as_linear_combin": [15, 20], "ignore_outer_coeffici": 15, "constitu": [15, 16], "operatort": 15, "collapse_as_product": [15, 20], "instqnc": 15, "leftmost": [15, 82], "thu": [15, 28, 30, 43, 44, 54, 57, 72, 77, 82, 83, 95, 103], "compress_scalars_as_product": [15, 20], "zero_one_toler": 15, "inner_coeffici": 15, "coefficients_to_compress": 15, "prepend": 15, "bring": 15, "simplif": 15, "catch": [15, 19], "qol": [15, 82], "105": [15, 71], "linearlistcombin": 15, "additional_coeffici": 15, "leav": [15, 16, 73, 82], "operator_class": [15, 20], "retrotter": [15, 20], "new_trotter_numb": 15, "initial_trotter_numb": 15, "new_trotter_ord": 15, "initial_trotter_ord": 15, "untrotter": [15, 20], "ababab": 15, "abbaabba": 15, "retrotteris": 15, "sublist_indic": 15, "constitut": [15, 49, 74], "op3": [15, 82], "long_oper": 15, "short_oper": 15, "trotterize_as_linear_combin": [15, 20, 85], "untrotterize_partit": [15, 20], "correspondingli": 15, "fermion_annihil": [15, 20], "fermion_cr": [15, 20], "f_op_str": [15, 82], "apply_st": [15, 20], "state_typ": 15, "statetyp": 15, "is_empti": [15, 20], "is_particle_conserv": [15, 20], "index_to_latex": 15, "c_": [15, 38, 68, 76, 93], "integraltyp": [15, 20], "orbitaloptim": [15, 20, 82], "v_init": [15, 82], "occ": [15, 82, 96], "split_rot": [15, 82], "point_group": [15, 17, 19, 20, 51, 66, 82, 85, 90, 91, 92, 94, 107], "orbital_irrep": 15, "reduce_free_paramet": [15, 82], "orbitaltransform": [15, 20, 82], "irreduc": [15, 17, 19, 39, 83], "v_final": [15, 82], "init": [15, 27], "construct_random_vari": [15, 20], "domain": [15, 21, 28], "gram_schmidt": [15, 20, 82], "gram": [15, 82], "schmidt": [15, 68, 82], "orthonorm": [15, 20, 22, 28, 68, 82], "map_variables_to_rotation_matrix": [15, 20], "map_variables_to_skew_matrix": [15, 20], "skew": 15, "orb_init": 15, "initial_vari": 15, "random_initial_vari": 15, "tu": [15, 82], "coefftyp": [15, 16], "attach": 15, "op0": 15, "qs0": [15, 18], "qs1": [15, 18], "7j": 15, "op4": 15, "all_nontrivial_qubit": [15, 20, 85], "_tket": [15, 85, 94], "unit_id": 15, "nontrivi": 15, "all_qubit": [15, 20, 85], "deem": [15, 78], "anticommutes_with": [15, 20], "antihermitian_part": [15, 20, 105], "p_str_a": 15, "p_str_b": 15, "p_str_c": 15, "mismatch": [15, 18], "dot_stat": [15, 20, 50], "accept": [15, 16, 18, 28, 30, 37, 41, 45, 54, 56, 85, 105], "deleg": 15, "dot_state_ndarrai": [15, 20], "dens": [15, 18, 82], "slower": 15, "ilo": [15, 18], "BE": [15, 18], "eigenspectrum": [15, 20, 39, 63, 85], "hamming_weight": [15, 18, 20, 39, 63], "nroot": 15, "hamming_weight_threshold": 15, "check_hermitian": 15, "check_hermitian_atol": 15, "filter": [15, 17, 39, 51, 66], "hermit": 15, "ensure_hermitian": [15, 20, 85], "elimin": [15, 93], "insignific": 15, "exponentiate_commuting_oper": [15, 20], "additional_expon": 15, "check_commut": 15, "mutual": [15, 57], "p_i": [15, 16, 74, 75, 77, 82], "prod_i": [15, 16, 55, 74, 83], "trigonometr": [15, 85], "exponentiate_single_term": [15, 20], "coeff_cutoff": 15, "suffici": [15, 90, 91, 98, 101, 102, 103], "disabl": [15, 16, 85], "oppos": [15, 82, 94], "cut": 15, "illusori": 15, "growth": [15, 17, 83], "from_qubitpaulioper": [15, 20, 85], "qop": [15, 80], "unsympify_coeffici": 15, "qubitpaulioper": [15, 85], "coeffic": 15, "from_serializ": [15, 20], "pauli_list": [15, 20], "serializ": 15, "to_list": [15, 20], "untrust": 15, "unseri": 15, "hermitian_factoris": [15, 20, 105], "iq": 15, "re_qo": 15, "im_qo": 15, "hermitian_part": [15, 20, 59, 62, 105], "is_hermitian_coeff": [15, 20], "register_qubit": 15, "zero_to_max": 15, "paddingincompatibleargumentserror": 15, "paddinginferenceerror": 15, "paddinginvalidregistererror": 15, "i0": [15, 83], "qs_pad": 15, "pauli_str": [15, 20, 82, 92, 94], "qubitwise_anticommutes_with": [15, 20], "necessit": 15, "qubitwise_commutes_with": [15, 20], "state_expect": [15, 20, 59, 82], "state_expectation_ndarrai": [15, 20], "unus": [15, 18], "symplectic_represent": [15, 20, 82], "symplect": [15, 17, 82], "2n": [15, 17, 77, 82, 98], "rightmost": [15, 82], "num_qubit": [15, 18, 20], "to_qubitpaulioper": [15, 20, 85], "implicitli": [15, 16, 74, 82], "to_serializ": [15, 20], "serial": [15, 17], "to_sparse_matrix": [15, 20, 82], "csc_matrix": [15, 82], "toeplitz_decomposit": [15, 20, 85], "herm_qo": 15, "antiherm_qo": 15, "totally_commuting_decomposit": [15, 20], "commutator_absolute_toler": 15, "expandexponentialproductcoefficientsbehavior": [15, 20], "bring_into_oper": [15, 20], "in_expon": [15, 20], "outside_expon": [15, 20], "build_subset": [15, 20], "compatibility_matrix": [15, 20], "adjac": 15, "graph": [15, 16, 69], "compute_jacobian": [15, 20], "as_sympy_spars": 15, "c_i": [15, 16, 56, 76, 77], "immutablesparsematrix": 15, "j_ij": 15, "y3": [15, 37, 63, 69, 81, 82, 92, 93, 94, 102], "jacobian_matrix": 15, "dot_state_as_linear_combin": [15, 20], "dot_state_as_product": [15, 20], "qubitpaulioperatorstr": 15, "0th": [15, 39], "equality_matrix": [15, 20], "expand_exponential_product_commuting_oper": [15, 20], "expansion_coefficients_behavior": 15, "combine_scalar": 15, "_i": [15, 37, 39, 82, 83, 102], "polynomi": [15, 82], "action": [15, 82, 94, 102], "sin": [15, 56, 103], "symbol_format": 15, "fresh": [15, 17, 96], "incompatibility_matrix": [15, 20], "parallelity_matrix": [15, 20], "qubitwise_compatibility_matrix": [15, 20], "qubitwise_incompatibility_matrix": [15, 20], "reduce_exponents_by_commut": [15, 20], "_list": 15, "split_totally_commuting_set": [15, 20], "to_sparse_matric": [15, 20, 85], "doc": [15, 31, 85, 102], "fact": [15, 45, 48, 74], "mathrm": [15, 38, 39, 43, 44, 50, 57, 82, 104], "unweight": [15, 82], "ba": 15, "from_qubitpaulistr": [15, 20, 85], "qp": 15, "qubit_label": 15, "qubit_index": 15, "x5": [15, 93, 94], "from_symplectic_row": [15, 20], "symplectic_row": 15, "qubits_regist": 15, "qubit_id_list": [15, 20], "qubit_list": [15, 20], "necess": [15, 56], "caution": [15, 18, 55], "register_s": [15, 20], "at_least_on": 15, "plu": [15, 68], "overload": 15, "to_qubitpaulistr": [15, 20, 85], "to_circuit": [15, 20], "to_dict": [15, 20, 85], "show_indic": 15, "swap_script": 15, "text_label": 15, "subscript": 15, "superscript": 15, "alic": 15, "bob": 15, "one_body_offset": 15, "basedoublefactorizedhamiltonian": 15, "u_t": 15, "a_t": 15, "a_u": [15, 82], "omega_i": 15, "fermion_oper": [15, 17, 20, 82, 94, 107], "yield_one_body_offset": 15, "anywai": 15, "onebodyrdm": 15, "1rdm": 15, "cancel": 15, "get_block": [15, 20], "get_occup": [15, 20], "as_int": 15, "mean_field_rdm2": [15, 20], "n_spin_orb": [15, 17, 20, 54, 66, 99, 105], "set_block": [15, 20], "edit": [15, 71, 84], "2rdm": 15, "symmetryoperatorfermion": [15, 17, 20, 83], "symmetryoper": 15, "sector": [15, 17, 19, 56, 83, 92, 98, 99, 105], "is_symmetry_of": [15, 20, 83], "symmetry_sector": [15, 19, 20, 83], "broken": 15, "okai": 15, "mathbb": [15, 17, 19, 43, 44, 79, 99, 105], "_2": [15, 17, 19, 40, 62, 75, 82, 91, 92, 96, 97, 98, 99, 101, 104, 105], "know": [15, 38, 39, 94, 101], "particularli": [15, 58, 69, 82, 83, 99, 104, 105], "overal": [15, 41, 43, 72, 90, 102, 103, 104], "to_symmetry_operator_fermion": [15, 20, 83], "hard": 15, "to_symmetry_operator_pauli": [15, 20], "ok": 15, "one_body_offset_aa": 15, "one_body_offset_bb": 15, "two_body_so": 15, "omega_p": 15, "analog": [15, 43, 82, 104], "rdm1_aa": [15, 82], "rdm1_bb": [15, 82], "rdm2_aaaa": 15, "rdm2_bbbb": 15, "rdm2_aabb": 15, "rdm2_bbaa": 15, "pauliaverag": [16, 20, 38, 62, 63, 64, 66, 69, 74, 80, 81, 85, 90, 91, 92, 93, 94, 98, 101, 107], "shots_per_circuit": [16, 25, 38, 62, 63, 64, 66, 69, 74, 75, 76, 77, 80, 81, 90, 91, 92, 93, 94, 98, 101], "8000": [16, 80, 98], "pauli_partition_strategi": [16, 62, 63, 64, 66, 75, 77, 90, 91, 92, 93, 94, 98], "paulipartitionstrat": [16, 62, 63, 64, 66, 75, 77, 90, 91, 92, 93, 94, 98], "nonconflictingset": 16, "pauli_color_method": 16, "graphcolourmethod": [16, 85], "lazi": 16, "protocollistitem": 16, "qermitrunmixin": 16, "computablecompliantmixin": 16, "1407": 16, "7863": 16, "1510": 16, "04279": 16, "get_compiled_circuit": [16, 56, 80, 98], "noise_mitig": [16, 69, 91, 92, 93, 94, 98], "noisemitig": [16, 69], "build_from": [16, 20, 62, 63, 66, 74, 75, 77, 78, 80, 85, 93], "build_protocols_from": [16, 20, 62, 64, 75, 85], "protocollist": [16, 20, 39, 64, 75, 85], "compile_circuit": [16, 20, 25, 62, 63, 64, 66, 69, 74, 75, 76, 77, 78, 81, 85, 90, 91, 92, 93, 94, 98], "optimization_level": [16, 81], "preoptimize_pass": [16, 81, 85], "overridden": 16, "whereupon": 16, "preoptim": 16, "automat": [16, 25, 27, 72, 83, 92], "credit": [16, 20, 80, 91, 92, 98], "syntax_check": [16, 80], "use_websocket": 16, "syntax": [16, 82, 91, 93], "checker": [16, 93], "yet": [16, 26, 92, 103], "quantinuumbackend": [16, 79, 80, 90, 91, 92, 93, 98], "web": 16, "dataframe_circuit_shot": [16, 20, 63, 80, 81, 85, 92, 94], "dataframe_measur": [16, 20, 63, 69, 81, 92, 94], "dataframe_partit": [16, 20, 85], "info": [16, 34, 56], "evaluate_expectation_uvalu": [16, 20, 92, 98], "evaluate_expectation_valu": [16, 20, 69, 81, 90, 91, 92, 94, 98], "ufloat": 16, "get_circuitshot": [16, 20], "circuitshot": 16, "get_evaluator_for_result": [16, 20], "backend_result": 16, "get_evaluators_for_result": [16, 20], "backend_result_sampl": 16, "backendresultsampl": 16, "compile_symbol": [16, 85], "That": [16, 17, 61, 93], "deeper": [16, 77, 98], "advantag": [16, 28, 29, 33, 37, 41, 59, 62, 66, 68, 69, 77, 90, 97, 106], "get_shot": [16, 20, 80], "is_built": [16, 20], "is_compil": [16, 20], "is_numer": [16, 20], "unsubstitut": 16, "is_run": [16, 20], "is_symbol": [16, 20], "process_circuit": 16, "n_circuit": [16, 20, 75, 93, 98], "rebuild": [16, 20, 90], "baseshotbasedprotocol": 16, "get_result": 16, "wait": [16, 62, 81, 94], "launchretrievemixin": 16, "run_mitex": [16, 20, 69], "mitex": [16, 69, 107], "characteris": [16, 94], "qermit": [16, 85, 89, 107], "observableexperi": 16, "run_mitr": [16, 20, 69], "mitr": [16, 69, 107], "hadamardtest": [16, 20, 74, 81, 85, 107], "hadamard": [16, 44, 74, 75, 78, 107], "wikipedia": 16, "articl": [16, 84], "assembli": 16, "computeuncomput": [16, 20, 77, 85, 101], "baseoverlapsquaredprotocol": 16, "uncomput": [16, 78], "vacuum": [16, 17, 28, 29, 39, 82, 101], "cp": 16, "instanceaft": 16, "trio": 16, "evaluate_overlap_squar": [16, 20], "wa": [16, 36, 37, 45, 62, 69, 74, 85, 91, 98, 101, 105], "destructiveswaptest": [16, 20, 85], "destruct": 16, "1303": 16, "6814": 16, "ancilla": [16, 42, 43, 44, 74, 75, 77, 78, 79], "succe": 16, "bitwis": [16, 78], "AND": [16, 78, 102], "swaptest": [16, 20, 62, 85], "en": 16, "wiki": 16, "swap_test": 16, "hadamardtestoverlap": [16, 20, 64, 85, 107], "baseoverlapprotocol": 16, "special": [16, 23, 28, 29, 30, 41, 45, 49, 51, 62, 64, 81, 83, 107], "u_a": 16, "ap": [16, 84], "pra": 16, "1103": [16, 84], "physreva": [16, 84], "032331": [16, 84], "iopscienc": 16, "iop": 16, "1088": [16, 84], "1367": [16, 84], "2630": [16, 84], "ab867b": [16, 84], "divid": [16, 68, 83, 104, 108], "numbertyp": 16, "evaluate_overlap": [16, 20], "evaluate_overlap_imag": [16, 20], "evaluate_overlap_r": [16, 20], "factorizedoverlap": [16, 20, 85, 107], "u_b": 16, "shown": [16, 26, 27, 28, 33, 39, 40, 43, 44, 56, 68, 70, 73, 77, 81, 82, 102], "prxquantum": [16, 84], "030307": [16, 84], "swapfactorizedoverlap": [16, 20, 85], "ancillari": [16, 77, 84], "obviat": 16, "computeuncomputefactorizedoverlap": [16, 20, 85], "sparsestatevectorprotocol": [16, 20, 22, 28, 34, 37, 39, 40, 41, 45, 62, 73, 81, 85, 97, 99, 105], "caching_decor": 16, "_basestatevectorprotocol": 16, "phaseshiftrulemixin": 16, "extern": [16, 23, 34, 49, 102], "handler": 16, "cache_hit_report": [16, 20], "keep_cach": 16, "backendstatevectorprotocol": [16, 20, 85, 90], "symbolicprotocol": [16, 20, 81, 85], "statebasedprotocolmixin": 16, "therefor": [16, 17, 33, 37, 47, 61, 62, 68, 85, 94, 95, 99], "slow": 16, "hadamardtestderivativeoverlap": [16, 20, 85], "10000": [16, 62, 63, 64, 66, 69, 90, 91, 92, 98, 101], "partial_i": 16, "partial_j": 16, "prx": [16, 84], "physrevx": [16, 84], "021050": [16, 84], "iii": [16, 34, 68, 70], "dummi": [16, 74, 79, 80], "u_i": [16, 74], "rule": [16, 27, 74], "ki": [16, 17, 74], "lj": [16, 74], "partial_k": [16, 74], "partial_l": [16, 74], "theta_k": [16, 40], "diff_symbol": [16, 74], "decomposemultiqubitscx": 16, "empiricaldistribut": 16, "evaluate_derivative_overlap": [16, 20, 74], "get_dataframe_derivative_overlap": [16, 20, 74], "ingredi": [16, 28, 72, 85], "prefactor": [16, 74], "minu": [16, 17, 70], "sign": [16, 70, 85, 101], "hadamardtestderiv": [16, 20, 85], "1701": [16, 17, 19, 84], "01450": [16, 84], "optimisation_level": [16, 20, 80, 85], "evaluate_dbra": [16, 20], "evaluate_dket": [16, 20], "evaluate_dket_complex": [16, 20], "evaluate_gradi": [16, 20], "dpsi": 16, "n_round": [16, 43], "deterministicqpecircuitprotocol": 16, "iterativephaseestimationsinglecircuit": [16, 20, 85], "preced": 16, "measurementpluralityphaseestim": [16, 20], "shotbasedphaseestim": 16, "frequent": [16, 82], "linearinterpolatorphaseestim": [16, 20], "interpol": 16, "iterativephaseestim": [16, 20, 44, 80, 85], "compilation_level": [16, 20, 79], "compilationlevel": [16, 20], "baseiterativephaseestimationcircuit": 16, "backendconfig": 16, "beta_iqp": [16, 20], "eoe_totally_commut": [16, 80], "ctrlu_strat": 16, "ctrlustrat": [16, 20], "build_from_circuit": [16, 20, 79], "get_ctrlu": [16, 79], "clear_cach": [16, 20], "get_distribuiton": [16, 20], "get_iqpe_circuit": [16, 20], "get_measurement_outcom": [16, 20, 79], "k_iqp": [16, 20], "update_k_and_beta": [16, 20, 79, 80], "iterativephaseestimationquantinuum": [16, 20, 80, 85], "compilationlevelquantinuum": [16, 79], "dynam": [16, 28, 45, 79, 84, 97, 99, 105], "encoding_method": [16, 79, 80], "encoding_opt": [16, 79, 80], "terms_map": [16, 79, 80], "paulis_map": [16, 79, 80], "time_split": 16, "pauli_exp_box": [16, 20], "circuitencoderquantinuum": [16, 20, 79, 80], "plainopt": [16, 20], "icebergopt": [16, 20, 79, 80], "delta": [16, 98], "get_ctrlu_totally_commut": 16, "icebergcod": 16, "iterativephaseestimationstatevector": [16, 20, 27, 85], "state_backend": [16, 92, 93], "unitary_backend": 16, "prototyp": [16, 62, 79], "recogn": [16, 27, 43, 44], "get_distribut": [16, 20, 79], "get_stat": 16, "get_unitari": 16, "now": [16, 25, 27, 28, 30, 31, 40, 41, 43, 44, 45, 66, 69, 73, 74, 80, 82, 85, 90, 91, 93, 94, 96, 99, 101, 102, 103], "mock": 16, "readi": [16, 43, 62, 69, 72, 90, 92, 93], "projectivemeasur": [16, 20, 24, 25, 85, 107], "get_dominant_basis_st": [16, 20, 25], "1278": 16, "1275": 16, "get_zero_state_prob": [16, 20], "get_zero_state_uncertainti": [16, 20], "0033353223232545307": 16, "get_dataframe_basis_st": [16, 20, 76], "uncertainti": [16, 62, 76, 89, 92], "003339": 16, "003335": 16, "011": [16, 82, 94], "1266": 16, "003325": 16, "110": [16, 71], "1262": 16, "003321": 16, "1254": 16, "003312": 16, "111": [16, 28, 29, 74, 75, 78, 81, 93], "1241": 16, "003297": 16, "1223": 16, "003276": 16, "010": [16, 94], "1201": 16, "003251": 16, "counter": 16, "max_row": [16, 82], "domin": 16, "get_phaseless_qubit_st": [16, 20], "account": [16, 17, 25, 45, 55, 66, 68, 80, 90, 91, 92, 93, 98, 99, 105], "circuitshotmixin": 16, "state1": 16, "state2": 16, "buildclearmixin": 16, "protocol_pa": 16, "protocol_ho": 16, "1000": [16, 27, 62, 75, 76, 78, 81, 90, 91, 93, 101], "statu": [16, 91], "depth2q": [16, 62, 63, 64, 80, 81, 92, 94], "count2q": [16, 63, 80, 81], "depthcx": [16, 63, 80, 81, 92, 94], "countcx": [16, 63, 80, 81], "skip_compil": 16, "recompil": 16, "compile_circuits_n": [16, 20], "dataframe_protocol_circuit": [16, 20, 62, 64], "pmsv": [16, 20, 24, 85, 90, 91, 92, 93, 94, 98, 107], "stabil": [16, 17, 27, 69, 79, 80, 84, 85, 91, 92, 93, 98], "pmsv_atol": 16, "verif": [16, 69, 84, 91, 92, 93, 94, 98], "2109": [16, 84], "08401": 16, "nonconflict": 16, "commutingset": [16, 62, 63, 64, 66, 75, 77, 90, 91, 92, 93, 94, 98], "measurement_setup": 16, "measurementsetup": 16, "setup": [16, 22, 28, 79, 94, 108], "measurement_circuit": 16, "spam": [16, 20, 85, 91], "qubit_subset": 16, "spamcorrect": 16, "calibration_shot": [16, 69], "transit": [16, 58, 91, 98], "tomographi": 16, "calibrate_process": [16, 20], "calibrate_retriev": [16, 20], "combinedmitig": [16, 20, 85], "mitms1": 16, "mitms2": 16, "ms1": 16, "ms2": 16, "backendresultbootstrap": [16, 20], "n_sample_s": 16, "bootstrap": [16, 107], "resampl": [16, 107], "outcomearrai": 16, "from_readout": 16, "get_count": 16, "result_bootstrap": 16, "get_sampled_result": [16, 20], "calculate_mean_with_uncertainti": [16, 20], "sampled_result": 16, "backendresultsplit": [16, 20], "shuffl": 16, "result_split": 16, "n_plus_stat": [16, 20, 79, 80], "plain": [16, 20, 79, 80], "syndrome_interv": [16, 20, 79], "sx_insert": [16, 20, 79], "conditional_exit": [16, 20], "iceberg": [16, 20, 24, 79, 80], "syndrom": [16, 79], "decoupl": [16, 79], "exit": 16, "compiler_opt": 16, "conditional_branch": 16, "merge_classical_branch": 16, "conditional_sq_g": 16, "No": [16, 36, 38], "dob": [16, 84], "analyz": [16, 33, 42, 45, 79, 80, 82, 90, 91, 96, 98, 102], "frag": 16, "as_integer_ratio": [16, 20], "ratio": 16, "bit_count": [16, 20], "bin": 16, "0b1101": 16, "bit_length": [16, 20], "37": [16, 63, 69, 84, 93, 94, 103, 104], "0b100101": 16, "ration": 16, "from_byt": [16, 20], "byteord": 16, "bytearrai": 16, "littl": [16, 94], "host": 16, "to_byt": [16, 20], "overflowerror": 16, "pauliexpbox": [16, 57, 80], "zp": 16, "ip": [16, 80], "pauli_gadget_rzz": [16, 20], "gadget": [16, 75], "rzz": 16, "chiefli": [17, 82], "orb_irrep": [17, 20, 51, 66, 82, 90, 91, 92], "occupationspac": 17, "mostli": [17, 72, 108], "tool": [17, 23, 33, 34, 49, 56, 70, 72, 80, 82, 83, 85, 97], "column_orb": [17, 20], "column_spin": [17, 20], "spin_alpha": [17, 20], "spin_beta": [17, 20], "spin_down": [17, 20], "spin_up": [17, 20, 66], "construct_contraction_mask_from_oper": [17, 20], "construct_double_excitation_oper": [17, 20, 39], "azimuth": [17, 39], "construct_double_ucc_oper": [17, 20, 37, 69, 82, 90, 91, 97], "construct_generalized_double_excitation_oper": [17, 20], "construct_generalized_double_ucc_oper": [17, 20], "distinguish": [17, 40, 96], "crossov": 17, "8b01004": [17, 84], "construct_generalized_pair_double_excitation_oper": [17, 20], "construct_generalized_pair_double_ucc_oper": [17, 20], "construct_generalized_single_excitation_oper": [17, 20], "construct_generalized_single_ucc_oper": [17, 20], "construct_n_body_spinless_pdm_oper": [17, 20], "orca": 17, "make_dm1234": [17, 28, 99], "pdm2": [17, 28, 99], "tau": 17, "p_": [17, 57, 78], "q_": 17, "r_": 17, "pdm3": [17, 28, 99], "t_": [17, 58], "nu": 17, "construct_n_body_spinless_rdm_oper": [17, 20], "sr": [17, 28, 99], "construct_number_alpha_oper": [17, 20, 85], "construct_number_beta_oper": [17, 20, 85], "construct_number_oper": [17, 20, 45], "construct_one_body_operator_from_integr": [17, 20], "one_body_spati": 17, "spatial_mask": 17, "configur": [17, 18, 20, 25, 45, 49, 53, 56, 58, 64, 67, 71, 73, 82, 85, 92, 93, 94, 96, 97, 98, 99, 102, 103, 105, 106, 107], "construct_one_body_spatial_rdm_oper": [17, 20, 66], "operator_pattern": 17, "s_i": 17, "s_j": 17, "construct_operator_from_str": [17, 20], "construct_orbital_number_oper": [17, 20, 45], "construct_scalar_oper": [17, 20], "construct_single_excitation_oper": [17, 20, 39], "construct_single_ucc_oper": [17, 20, 37, 69, 82, 90, 91, 97], "construct_singlet_double_excitation_oper": [17, 20], "p_0": 17, "q_0": 17, "r_0": 17, "s_0": 17, "p_1": 17, "q_1": 17, "r_1": 17, "s_1": 17, "construct_singlet_double_ucc_oper": [17, 20], "construct_singlet_generalized_double_excitation_oper": [17, 20], "construct_singlet_generalized_single_excitation_oper": [17, 20], "q1": 17, "construct_singlet_generalized_single_ucc_oper": [17, 20], "construct_singlet_single_excitation_oper": [17, 20], "construct_singlet_single_ucc_oper": [17, 20], "construct_spin_oper": [17, 20], "construct_sz_oper": [17, 20], "_z": [17, 39], "construct_triplet_generalized_single_excitation_oper": [17, 20], "triplet": [17, 24, 85], "construct_triplet_generalized_single_ucc_oper": [17, 20], "construct_two_body_operator_from_integr": [17, 20], "two_body_spati": 17, "s_k": 17, "s_l": 17, "construct_two_body_operator_from_tensor": [17, 20], "two_body_tensor": 17, "construct_two_body_spatial_rdm_oper": [17, 20], "contract_occupation_spac": [17, 20], "active_spatial_orb": 17, "contract_occupation_st": [17, 20], "occupation_st": 17, "contraction_mask": 17, "contract_oper": [17, 20], "contract_state_mask": [17, 20], "state_mask": 17, "contracted_system": [17, 20], "convert_mask_to_index_map": [17, 20], "state_valu": 17, "column_valu": 17, "legaci": 17, "releas": 17, "signifi": 17, "from_stat": [17, 20], "c_1": [17, 39, 56], "generate_cyclic_mask": [17, 20], "window": [17, 35], "generate_cyclic_window_mask": [17, 20], "generate_occupation_st": [17, 20, 54], "n_fermion": [17, 54], "generate_occupation_state_from_list": [17, 20, 73, 82], "occupation_state_list": 17, "generate_occupation_state_from_spatial_occup": [17, 20], "generate_subspace_singl": [17, 20], "generate_subspace_singlet_singl": [17, 20, 38, 93], "generate_subspace_triplet_singl": [17, 20], "get_orb_irreps_datafram": [17, 20], "operator_to_latex": [17, 20], "freedom": [17, 99], "as_str": 17, "print_stat": [17, 20, 28, 82, 94, 96, 102], "mark": [17, 25, 28, 74, 85, 95, 98, 99], "2b": [17, 28, 94, 96], "3a": [17, 28], "3b": [17, 28], "quantum_label": [17, 20], "quantum_numb": [17, 20], "quantum_number_orb": [17, 20], "quantum_number_spin": [17, 20], "v5": 17, "symmetry_operators_z2": [17, 20, 66, 82, 83, 99, 105], "spin_ord": 17, "abab": 17, "return_factor": [17, 83], "symmetry_operators_z2_in_sector": [17, 20, 69, 91, 92, 94, 98], "fermionspacebrillouin": [17, 20, 28, 29], "column_kp": [17, 20], "kp": 17, "kpoint": 17, "k_i": 17, "k_k": 17, "k_l": 17, "k_j": 17, "active_orb": 17, "active_kp": 17, "fermion_state_list": 17, "quantum_number_kp": [17, 20], "qn_spin": 17, "fermionspacesupercel": [17, 20], "n_rp": [17, 20], "column_rp": [17, 20], "check_translation_invari": [17, 20], "invari": 17, "construct_one_body_operator_from_big_integr": [17, 20], "construct_permutation_oper": [17, 20], "construct_reverse_rp_permutation_oper": [17, 20], "construct_shift_rp_permutation_oper": [17, 20], "construct_swap_rp_permutation_oper": [17, 20], "rp1": 17, "rp2": 17, "construct_two_body_operator_from_big_integr": [17, 20], "fss": [17, 18], "generate_fock_state_from_list": [17, 20], "fock_state_list": 17, "generate_fock_state_from_spatial_big_occup": [17, 20], "generate_fock_state_from_spatial_occup": [17, 20], "is_operator_permutation_invari": [17, 20], "fock_space_invariance_threshold": 17, "permutation_matrix": [17, 20], "quantum_number_rp": [17, 20], "reverse_rp_permut": [17, 20], "shift_rp_permut": [17, 20], "swap_rp_permut": [17, 20], "translate_oper": [17, 20], "rightarrow": [17, 28, 30, 82], "regard": [17, 18, 19, 39, 48, 82, 83, 88, 92, 95, 96, 97, 98, 103], "techniqu": [17, 19, 28, 43, 48, 68, 69, 80, 91, 92, 93, 96, 97, 98, 99, 103, 104, 105], "construct_double_qubit_excitation_oper": [17, 20, 37], "construct_imag_pauli_exponent_oper": [17, 20], "construct_real_pauli_exponent_oper": [17, 20], "construct_single_qubit_excitation_oper": [17, 20, 37], "y_k": 17, "y_i": [17, 82], "x_k": 17, "count_spin": [17, 20], "qstate": 17, "Will": 17, "n_one": [17, 20], "08213": [17, 19, 84], "chain_filt": [17, 20], "upward": 18, "statestr": [18, 20], "varieti": [18, 28, 33, 34, 41, 48, 71, 72, 73, 82], "fs0": 18, "fs1": 18, "fss0": 18, "fss1": 18, "fs2": 18, "fs3": 18, "basis_st": [18, 20], "statestringt": 18, "from_ndarrai": [18, 20, 85], "state_vector": [18, 82], "absenc": 18, "modet": 18, "from_sparrai": [18, 20], "statet": 18, "placehold": [18, 67], "unimpl": 18, "is_basis_st": [18, 20], "num_mod": [18, 20], "single_term": [18, 20, 39, 63], "string_class": [18, 20], "to_ndarrai": [18, 20, 82], "qss0": 18, "qss1": 18, "to_sparrai": [18, 20], "matrix_typ": 18, "csr_arrai": 18, "vdot": [18, 20, 50, 82], "capac": [18, 103], "rai": 18, "immut": 18, "all_mod": [18, 20], "frozenset": 18, "from_index": [18, 20], "state_index": 18, "from_list_int": [18, 20], "effort": [18, 48, 72, 97], "mode_class": [18, 20], "occupations_ord": [18, 20], "to_index": [18, 20], "qss": 18, "qs2": 18, "qs3": 18, "fashion": 18, "userdict": 18, "compute_representation_compon": [19, 20, 83], "sum_n": 19, "chi_r": 19, "chi_i": 19, "get_generators_symbol2irrep_dict": [19, 20], "groupnam": 19, "get_irrep2symbol_dict": [19, 20], "get_supported_point_group_dict": [19, 20], "get_symbol2irrep_dict": [19, 20], "irrep_direct_product": [19, 20, 83], "mini_character_t": [19, 20], "point_group_label": [19, 83], "irrep_label": [19, 83], "redund": [19, 39, 59, 62, 66, 67, 82], "print_character_t": [19, 20, 83], "pretti": [19, 94], "supported_group": [19, 20, 83], "skip_fast_find_x_oper": 19, "et": [19, 58, 69, 104, 105], "al": [19, 26, 58, 69, 84, 104, 105], "tapered_oper": [19, 20, 83], "tapered_st": [19, 20], "manual": [19, 28, 30, 33, 34, 41, 44, 62, 64, 72, 73, 80, 82, 85, 102, 108], "regener": 19, "find_x_oper": [19, 20], "tapering_unitari": [19, 20], "taperable_qubit": [19, 20], "xoperatorminimalerror": [19, 20], "skip_minim": 19, "cache_on_regener": 19, "eq": [19, 38, 39, 40, 43, 44, 45, 102], "61": [19, 28, 84, 94], "exclus": [19, 58, 83, 105], "fulfil": 19, "criteria": [19, 37, 82], "symmetryz2qubit": 19, "necessarili": [19, 42, 82, 104], "resort": 19, "brute": 19, "bruteforcingxoperatorwarn": 19, "recalcul": [19, 37], "regardless": [19, 67], "qubit_oper": [19, 22, 28, 82, 85, 107], "relabel_qubit": 19, "gambetta": [19, 84], "mezzacapo": [19, 84], "temm": [19, 84], "relabel": 19, "goe": 19, "unexpect": 19, "untap": 19, "x_oper": 19, "viii": 19, "clifford": [19, 82, 83], "composit": [20, 38, 39, 63, 64, 66, 67, 82, 85, 93, 99, 105], "mitig": [20, 24, 33, 72, 81, 84, 85, 89, 90, 92, 93, 94, 98, 107, 108], "66": [21, 28, 51, 84], "medium": [21, 28], "solvat": [21, 28], "inquanto": [21, 22, 29, 30, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108], "ddcosmo": [21, 28, 84], "respond": [21, 28], "caviti": [21, 28], "sphere": [21, 28], "epsilon_": [21, 28], "omega": [21, 28, 107], "mathbf": [21, 28, 30, 104], "spheric": [21, 28], "harmon": [21, 28], "67": [21, 28, 84], "environ": [21, 23, 28, 30, 36, 68, 85, 91, 95, 97, 98, 104, 106, 108], "adopt": [21, 28, 30], "tot": [21, 28, 30, 68, 98], "presenc": [21, 28, 56, 104], "subtract": [21, 28, 30, 58, 84], "driver_cosmo": [21, 28], "7122": [21, 28, 30, 102], "fsp": [21, 28, 80], "fst": [21, 28], "mf_solvent_e_tot": [21, 28], "proced": [21, 28], "113": [21, 28, 93], "wide": [22, 28, 33, 41, 69, 82], "l\u00f6wdin": [22, 28, 68, 95], "sto": [22, 24, 28, 29, 34, 70, 82, 90, 92, 93, 94, 95, 101, 102, 103, 107], "3g": [22, 24, 28, 29, 34, 70, 82, 90, 92, 93, 94, 95, 101, 102, 103, 107], "hamiltonian_operator_lowdin": [22, 28, 50, 68], "rdm1_hf_lowdin": [22, 28], "hamiltonian_operator_pyscf": [22, 28], "rdm1_hf_pyscf": [22, 28], "discuss": [22, 28, 39, 48, 58, 60, 64, 67, 71, 74, 75, 77, 81, 82, 83, 95, 102], "outlin": [22, 28, 39, 90, 92, 93, 98, 99, 104, 105], "reader": [22, 28, 60, 62, 85, 95], "main": [22, 28, 41, 42, 67, 72, 79, 83, 106, 108], "introduct": [22, 27, 28, 33, 82, 84, 97, 104], "mayb": [22, 28], "driven": [22, 28], "phenol": [22, 24, 28], "c6h5oh": [22, 28], "921240800": [22, 28], "001254500": [22, 28], "000000000": [22, 28, 104], "223482600": [22, 28], "216975000": [22, 28], "176941000": [22, 28], "209145000": [22, 28], "882124000": [22, 28], "000763689": [22, 28], "171469000": [22, 28], "208183000": [22, 28], "225726600": [22, 28], "216305000": [22, 28], "284492000": [22, 28], "060545780": [22, 28], "771286100": [22, 28], "161194000": [22, 28], "715459000": [22, 28], "156595000": [22, 28], "970767000": [22, 28], "000448048": [22, 28], "709985000": [22, 28], "155694000": [22, 28], "792751600": [22, 28], "145930000": [22, 28], "630400000": [22, 28], "901564000": [22, 28], "maskoh": [22, 28, 95], "maskcch": [22, 28], "maskchch1": [22, 28], "maskchch2": [22, 28], "froh": [22, 28], "frcch": [22, 28], "frchch1": [22, 28], "frchch2": [22, 28], "corr": [22, 28, 95], "301": [22, 28, 101], "79567724451834": 22, "efr": [22, 28, 95], "114": [22, 28], "783458372729": 22, "049838818654647454": 22, "9065410150268": 22, "152": [22, 28], "8830668346832": 22, "005690013606132638": 22, "91015358197376": 22, "150": [22, 28], "8382702664888": 22, "001497056258777718": 22, "94448653913514": 22, "153": [22, 28, 105], "44135729451392": 22, "004749782126681978": 22, "7965762435463": 22, "78406015411949": 22, "04973186128703411": 22, "9078353892905": 22, "88478642548085": 22, "005423346447399169": 22, "9115539401111": 22, "83961285075628": 22, "0012572548814855367": 22, "9458871008683": 22, "44262085160807": 22, "004532549349313797": 22, "007436949984238595": 22, "86256397736906": 22, "82804988189538": 22, "041915004179937654": 22, "302": [22, 28], "00287612087743": 22, "010881189241": 22, "014138160577033432": 22, "014360282328": 22, "93805407033048": 22, "016332731511111476": 22, "04870529436596": 22, "53530162450699": 22, "011407964501488621": 22, "0074413042099895615": 22, "8626031555279": 22, "828075893464": 22, "041910382966189985": 22, "0029325671198": 22, "01095598148788": 22, "01414976761890685": 22, "0144213310974": 22, "93811245576188": 22, "016343168387420448": 22, "04876634836927": 22, "53535661374275": 22, "011417426261539632": 22, "007441306704673336": 22, "25891343152523": 22, "consequ": [22, 28, 33, 105], "across": [22, 28, 39, 51, 66, 81, 90, 94], "intra": [22, 28], "howeverm": [22, 28], "bespok": [22, 28, 72, 73], "easi": [22, 28, 34, 68, 85, 97, 98], "mandatori": [22, 28, 68, 97], "page": [22, 24, 26, 28, 34, 48, 62, 64, 84, 85, 91, 92, 98, 108], "myfrag": [22, 28, 68], "your": [22, 25, 28, 36, 68, 72, 86, 89, 91, 92, 93, 107, 108], "vqe_rdm1": [22, 28, 68], "fr": [22, 28, 68], "simpler": [22, 28, 59, 68, 74, 85, 104], "jw": [22, 28, 37, 38, 39, 82, 90, 103], "h_op": [22, 28], "long": [22, 28, 56, 58, 62, 68, 72, 79, 82, 83, 103], "energy_water_frozen": [22, 28], "hamiltonian_operator_ao": [22, 28], "myfmofragmentvq": [22, 28], "full_integral_oper": [22, 28], "monom": [22, 28], "5180388948642456": [22, 28], "886013952482359": [22, 28], "6863458716694648": [22, 28], "8009644337834714": 22, "8134981363881533": 22, "8009642542761402": 22, "AT": [22, 28, 34, 37, 38, 39, 40, 41, 45, 50, 70, 73, 92, 93, 94, 99, 101, 102, 103, 104, 105], "2025": [22, 28, 34, 37, 38, 39, 40, 41, 45, 50, 70, 73, 85, 99, 101, 102, 103, 104, 105], "03": [22, 28, 34, 37, 38, 39, 40, 41, 45, 50, 70, 73, 94, 96, 103], "07": [22, 28, 34, 37, 38, 39, 40, 41, 45, 50, 70, 73, 84, 85, 103], "00": [22, 28, 34, 37, 38, 39, 40, 41, 45, 50, 70, 71, 73, 76, 92, 93, 94, 99, 101, 102, 103, 104, 105], "27": [22, 26, 28, 56, 58, 63, 78, 84, 85, 93, 94, 101, 103], "650710": 22, "durat": [22, 27, 28, 34, 37, 38, 39, 40, 41, 44, 45, 50, 70, 73, 90, 92, 93, 94, 99, 101, 102, 103, 104, 105], "3144756": 22, "314476": 22, "045083": 22, "1840709": 22, "184071": 22, "332888": 22, "3018345": 22, "301834": 22, "8244970693393998": 22, "8373292776161905": 22, "824497051962278": 22, "819217": 22, "7028046": 22, "702805": 22, "29": [22, 34, 37, 38, 39, 40, 45, 56, 63, 78, 84, 85, 91, 93, 94, 103], "672929": 22, "3956757": 22, "04": [22, 28, 38, 85, 93, 94, 98, 103], "395676": 22, "34": [22, 28, 63, 74, 84, 94, 95, 103], "223469": 22, "6114744": 22, "611474": 22, "745456689215109": 22, "189591290931857": 22, "745456662426457": 22, "0836303422595184": 22, "5405971696301792": 22, "0836303328479882": 22, "351264804432338": 22, "sever": [23, 26, 33, 40, 41, 42, 43, 44, 45, 62, 71, 82, 85, 95, 96, 100, 101, 102, 103, 107], "program": 23, "grant": [23, 84, 93], "cloud": [23, 106], "jupyt": [23, 26, 94, 97, 98, 100], "streamlin": [23, 33, 34, 102], "focu": [23, 31, 33, 72, 80, 95, 96, 97, 99, 102], "gpu": 23, "comprehens": [23, 45, 46, 92, 97, 98, 99], "enhanc": [23, 28, 69, 90, 91, 97, 99, 105], "research": [23, 33, 48, 80, 85, 96, 97, 98, 108], "task": [23, 64, 82, 94, 95, 98], "algorithm_vqe_mp2_amplitud": 24, "py": [24, 85, 94, 107], "oh": [24, 83, 95, 103], "oscillator_strength": 24, "oscil": [24, 45, 85], "algorithm_vqe_ccsd_amplitud": 24, "double_factorization_n2_pyscf": 24, "statevector_accelerated_vqe_lih": 24, "dmet_one_phenol_vqe_pyscf": 24, "impurity_dmet_h7_pyscf": 24, "hydrogen": [24, 38, 39, 41, 43, 45, 57, 68, 79, 80, 84, 95, 102, 103, 107], "impurity_dmet_h2x3_express_pyscf": 24, "dihydrogen": [24, 101, 107], "impurity_dmet_ch2_pyscf": 24, "ch2": [24, 26, 70, 100], "fmo_h2x3_integral_operator_ccsd": 24, "fmo_lih_h2x2_sto3g_integral_oper": 24, "fmo_h2x3_integral_operator_vq": 24, "fmo_li2_lih_h2_sto3g_integral_oper": 24, "fmo_lih_h2x2_sto3g_integral_operator_ccsd_d": 24, "fmo_h2x3_integral_oper": 24, "fmo_h2x3_integral_operator_vqe_pyscf": 24, "fmo_h2x3_631g_integral_oper": 24, "pt2o5_vqe_in_b3lyp": 24, "pt5o2": 24, "tapering_pmsv": 24, "algorithm_bayesian_noise_awar": 24, "bqpe": 24, "algorithm_bayesian_quantinuum_iceberg": 24, "algorithm_bayesian": 24, "noiseless": [24, 34, 69, 79, 92, 93, 94, 99, 107], "vizual": 24, "example_molecul": 24, "example_unitcel": 24, "cutensornetbackend": 24, "compare_to_statevector": 24, "use_shot": 24, "cutensornetshotsbackend": 24, "qnexu": [24, 81, 85, 106], "client": [24, 25, 85, 94, 106], "example_protocol_list": 24, "example_qnexu": 24, "algorithm_vqe_uccsd": [24, 107], "ot": [25, 82], "authent": [25, 85], "auth": 25, "login": [25, 80, 91, 94], "my_project_ref": 25, "demo": [25, 94], "datetim": [25, 103], "add_properti": 25, "property_typ": 25, "my": 25, "aerconfig": 25, "lc_q": 25, "lc_ansatz": 25, "project_ref": [25, 94], "opt": [25, 39, 96, 97, 99], "databas": [25, 70, 94], "abil": [25, 68, 85, 103], "circuit_annot": 25, "compile_job_annot": 25, "execute_job_annot": 25, "dominant_st": 25, "notebook": [26, 90, 94, 95, 100, 101, 108], "central": 26, "visualiz": 26, "0000000": [26, 28, 71, 99, 100], "4113170": [26, 100], "2222370": [26, 100], "7056590": [26, 100], "5070120": [26, 100], "1711360": [26, 100], "2535060": [26, 100], "c6h6_geom": 26, "snippet": [26, 58, 80, 100, 102, 107], "alb2": 26, "alb2_geom": 26, "ch1": [26, 100], "ch3": [26, 100], "ch4": [26, 70, 100], "ch5": [26, 100], "ch6": [26, 100], "benzen": 26, "ngl_mo": [26, 100], "render": [26, 58, 75, 94], "graphic": [26, 95], "gui": [26, 100], "yamamoto": [27, 69, 79, 84, 86], "duffield": [27, 79, 84], "kikuchi": [27, 79, 84], "mu\u00f1oz": [27, 79, 84, 99, 105], "ramo": [27, 79, 84, 86, 99, 105], "idea": [27, 43, 44, 47, 54, 103], "propto": 27, "posterior": 27, "reflect": [27, 55, 68, 70, 85], "fourier": [27, 42, 43, 79], "von": 27, "mise": 27, "technic": [27, 33, 68, 79, 84, 101], "target_data": [27, 43, 44], "fermion_hamiltonian": [27, 37, 40, 41, 43, 44, 94, 101], "fermion_fock_spac": [27, 40, 41, 43, 44], "qubit_operator_list": [27, 43, 44], "preliminari": [27, 43, 44, 102], "ansatz_paramet": [27, 43, 44, 80], "107": [27, 41, 43, 44, 71, 73, 102], "zip": [27, 43, 44, 93, 103], "state_prep": [27, 43, 44, 80], "Then": [27, 34, 43, 44, 45, 56, 66, 79, 80, 94, 101, 103], "jax": [27, 35, 89], "config": [27, 56], "jax_enable_x64": 27, "300": 27, "feedback": [27, 42, 80], "matplotlib": [27, 90, 91, 98, 103], "pyplot": [27, 90, 91, 98, 103], "plt": [27, 90, 91, 98, 103], "n_updat": 27, "fourier_mod": 27, "i_upd": 27, "xmin": [27, 91, 98], "xmax": [27, 91, 98], "linspac": [27, 45, 103], "plot": [27, 45, 90, 91, 98, 103, 107], "xlabel": [27, 90, 91, 98, 103], "ylabel": [27, 90, 91, 98, 103], "640x480": 27, "31": [27, 45, 50, 63, 77, 84, 85, 90, 91, 93, 94, 101, 103, 104], "41": [27, 59, 62, 82, 84, 94, 103], "energy_mu": [27, 44], "energy_sigma": [27, 44], "6f": [27, 44, 99, 105], "136970": 27, "000935": 27, "\u00e5": [28, 29, 103], "705570": 28, "247285": 28, "336424": 28, "090886": 28, "330989": 28, "481273": 28, "24": [28, 44, 55, 63, 84, 85, 89, 93, 94, 101, 103], "26": [28, 45, 46, 56, 63, 84, 89, 93, 94, 101, 103], "347908": 28, "28": [28, 40, 44, 63, 78, 84, 85, 93, 94, 101, 103], "compact_hamiltonian": 28, "Or": [28, 34], "pyscf_hamiltonian": 28, "latter": [28, 30, 42, 48, 54, 56, 64, 79, 102], "experienc": 28, "solid": [28, 29, 49], "pbc": [28, 29], "pd": [28, 29, 82], "2x2x1": [28, 29], "slab": [28, 29], "pgto": [28, 29], "cell_pd221": [28, 29], "50129075763134": [28, 29], "75064537881567": [28, 29], "764257549713281": [28, 29], "geometry_pd221": [28, 29], "75064538": [28, 29], "37532269": [28, 29], "38212877": [28, 29], "12596807": [28, 29], "driver_pd221": [28, 29], "lanl2dz": [28, 29, 96], "cell_h2": [28, 29], "875": [28, 29, 82], "driver_h2": [28, 29], "0760400910891228": 28, "1265450345356904": 28, "1440347834365332": 28, "1516885473648508": 28, "1516885475166099": 28, "31g": [28, 51, 99], "h2o": [28, 70], "h2o_geom": 28, "00000": [28, 71], "11779": 28, "75545": 28, "47116": 28, "4a": 28, "4b": 28, "5a": 28, "5b": 28, "6a": 28, "6b": 28, "7a": 28, "7b": 28, "8a": 28, "8b": 28, "9a": 28, "9b": 28, "10a": 28, "10b": 28, "11a": 28, "11b": 28, "12a": 28, "12b": 28, "96867354": 28, "inact": 28, "98544091": 28, "innov": 28, "emploi": [28, 37, 53, 68, 70, 90, 91, 92, 93, 96, 97, 98, 99, 104, 105], "pioneer": 28, "hybrid": [28, 47, 68, 72, 73, 84, 99], "62": [28, 84, 94], "63": [28, 79, 84, 85, 99], "mc": [28, 84, 99], "fci4pdm_kern_sf": [28, 99], "driver_casscf": [28, 99], "nevpt2_energi": [28, 99, 105], "8652654987828": [28, 99], "8887816123883": 28, "619242252227520": 28, "00000000004410": 28, "si": [28, 99], "00001592193746": 28, "sijr": [28, 99], "00022778543426": 28, "00007024585305": 28, "srsi": [28, 99], "00023752960486": 28, "00127421263256": 28, "sij": [28, 99], "00002667509292": 28, "sir": [28, 99], "00013326098661": 28, "001985631585805": 28, "adiabat": [28, 84, 99], "incorpor": [28, 82, 84, 90, 97, 103, 105], "reorder_dm12": [28, 99], "ac0_energi": [28, 99, 105], "tutori": [28, 31, 33, 34, 70, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 107], "7956772445181": 28, "78345837272926": 28, "0498388186545764": 28, "9065410150267": 28, "88306683468312": 28, "005690013606153954": 28, "9101535819748": 28, "83827026648868": 28, "0014970562588096925": 28, "944486539135": 28, "4413572945138": 28, "004749782126703295": 28, "796576243546": 28, "78406015411986": 28, "049731861286957724": 28, "9078353892904": 28, "88478642548088": 28, "005423346447404498": 28, "9115539401121": 28, "83961285075623": 28, "0012572548815210638": 28, "9458871008682": 28, "44262085160804": 28, "004532549349343995": 28, "0074369499841595065": 28, "86256397736815": 28, "82804988189523": 28, "04191500417994476": 28, "0028761208763": 28, "0108811892396": 28, "014138160576804282": 28, "01436028232797": 28, "93805407032937": 28, "016332731510898313": 28, "0487052943648": 28, "5353016245061": 28, "011407964501296775": 28, "007441304209987716": 28, "8626031555276": 28, "82807589346434": 28, "041910382966122484": 28, "00293256711956": 28, "0109559814879": 28, "014149767618894415": 28, "0144213310984": 28, "93811245576183": 28, "016343168387393803": 28, "0487663483691": 28, "53535661374278": 28, "011417426261518315": 28, "0074413067046706334": 28, "25891343152546": 28, "8009644337834723": 28, "8134981363881528": 28, "8009642542761393": 28, "33": [28, 63, 73, 74, 79, 84, 93, 94, 103], "322886": 28, "3045431": 28, "304543": 28, "709753": 28, "1809327": 28, "180933": 28, "970148": 28, "2993879": 28, "299388": 28, "8244970693394003": 28, "8373292776161887": 28, "8244970519622767": 28, "463780": 28, "6157966": 28, "615797": 28, "227894": 28, "3401164": 28, "340116": 28, "44": [28, 82, 84, 94], "723144": 28, "5466023": 28, "546602": 28, "745456689215108": 28, "1895912909318636": 28, "745456662426452": 28, "0836303422595193": 28, "5405971696301868": 28, "0836303328479868": 28, "351264804432345": 28, "64": [28, 30, 51, 84, 102], "accuraci": [28, 30, 33, 37, 84, 90, 91, 97, 99, 103, 104, 105], "surround": [28, 30, 48, 104], "65": [28, 30, 84], "thereof": [28, 30], "phi_": [28, 30, 43, 44], "bigg": [28, 30, 68], "nabla": [28, 30], "sum_m": [28, 30], "q_m": [28, 30], "nuclei": [28, 30, 33, 72], "ten": [28, 30, 33, 98], "pregener": [28, 30], "nunmpi": [28, 30], "49786797": [28, 30], "32194696": [28, 30], "99931375": [28, 30], "18600456": [28, 30], "11946466": [28, 30], "44596843": [28, 30], "88243873": [28, 30], "92663564": [28, 30], "61939515": [28, 30], "2329004": [28, 30], "48483291": [28, 30], "111317": [28, 30], "7732865": [28, 30], "26870462": [28, 30], "83567444": [28, 30], "02280506": [28, 30], "49617119": [28, 30], "35213897": [28, 30], "15767837": [28, 30], "81139107": [28, 30], "80446741": [28, 30], "80956945": [28, 30], "11945493": [28, 30], "15393569": [28, 30], "25833491": [28, 30], "36763998": [28, 30], "48973473": [28, 30], "7656713": [28, 30], "98101748": [28, 30], "26885502": [28, 30], "068638356203663": [28, 30], "driver_qmmm": [28, 30], "0760400910891157": 29, "com": [31, 32, 85, 86, 87, 88, 89, 94], "enquiri": [31, 32, 88], "contact": [31, 32, 36, 88, 91, 92, 93, 98], "broad": [31, 33, 99, 102, 107], "overview": [31, 33, 72, 84, 98, 99], "quickstart": 31, "instruct": [31, 34, 48, 72, 91, 94, 98], "repositori": 32, "repo": 32, "licens": [32, 85, 89], "team": 32, "venv": 32, "conda": [32, 35, 36], "meet": [32, 68], "troubleshoot": 32, "art": 33, "industri": 33, "academia": 33, "ecosystem": 33, "novel": [33, 99], "meaning": [33, 34, 47, 48, 72], "reaction": 33, "challeng": [33, 68, 96, 104], "often": [33, 42, 43, 58, 62, 69, 72, 73, 82, 97, 100, 106], "thousand": 33, "predict": [33, 80, 83], "better": [33, 51, 82, 85, 90, 105], "highli": [33, 81, 84, 95, 97], "outperform": 33, "unlock": 33, "whilst": [33, 34, 72, 108], "deploi": 33, "collabor": [33, 106], "partner": 33, "robust": [33, 73, 85, 97], "intermedi": [33, 41, 49, 56], "nisq": [33, 41, 80], "carbon": [33, 84], "captur": [33, 58, 84, 94, 97, 99], "metal": [33, 84, 96, 105], "organ": [33, 84], "dissoci": [33, 98, 103, 108], "onlin": [33, 91], "beyond": [33, 62, 98, 99, 105], "era": [33, 41], "scope": [33, 62], "regim": [33, 90], "fault": 33, "firstli": [33, 41, 48, 94, 102], "answer": 33, "secondli": 33, "signal": [33, 43, 84], "improv": [33, 47, 58, 69, 85, 91, 97, 99, 102, 103], "easili": [33, 34, 45, 53, 70, 71, 79, 96, 97, 98, 102, 103], "pipelin": 33, "fig": [33, 43, 44, 48, 68, 82], "codebas": 33, "schemat": [33, 72, 82], "protein": 33, "bind": [33, 89], "chromophor": 33, "inquant": [33, 72], "excel": [33, 98], "thirdli": 33, "sdk": 33, "spectra": 33, "amount": [33, 69, 103], "modular": [33, 72], "toolbox": 33, "scientist": 33, "script": [33, 58, 107, 108], "exploit": [33, 51, 74, 77, 79, 80, 82, 94], "consider": [33, 98], "accumul": [33, 90], "intricaci": 33, "architectur": [33, 80, 81], "rout": 33, "shortcut": 33, "underneath": 33, "think": [33, 54, 57, 90], "much": [33, 34, 48, 56, 81, 82, 95, 102, 103], "explor": [34, 56, 65, 68, 91, 96, 98, 99, 105], "inspect": [34, 48, 63, 65, 81, 91, 94, 102], "h2_sto3g_data": [34, 70, 102], "energy_ccsd": [34, 70], "7430177069924179": [34, 70, 102], "270292724390438": [34, 70, 102], "45680735030941033": [34, 70, 102], "48890859745047327": [34, 70, 102], "6800618575841273": [34, 70, 102], "6685772770134888": [34, 70, 102], "1796686795630157": [34, 70, 102], "17966867956301558": [34, 70, 102], "1796686795630155": [34, 70, 102], "7028135332762804": [34, 70, 102], "1368465754747636": [34, 70], "intuit": [34, 95], "feed": 34, "lastli": [34, 70], "02": [34, 92, 93, 103], "277030": 34, "1325977": 34, "132598": 34, "d0": [34, 37, 41, 54, 69, 74, 90, 91, 94, 97, 102], "10723347230091589": [34, 37, 41, 102], "s0": [34, 41, 74, 94, 97, 102], "inquir": [34, 72], "usng": 34, "1368465": 34, "examin": [34, 75, 81, 90, 91, 94, 95, 98, 102, 103, 105, 108], "forbidden": [34, 82], "doubli": 34, "plenti": 34, "accordingli": 34, "bigger": [34, 103], "comfort": 34, "dive": 34, "permit": 34, "hood": 34, "ran": [34, 84], "proper": 34, "flexibl": [34, 51, 61, 68, 69, 81, 85], "linux": 35, "maco": [35, 36], "wsl": 35, "libomp": [35, 36], "lapack": [35, 36], "homebrew": [35, 36], "forg": 35, "webpag": [35, 97], "inher": [35, 69], "keyr": [36, 85, 89], "hpc": 36, "servic": 36, "password": [36, 85, 89], "protect": [36, 84], "administr": 36, "credenti": [36, 72, 90, 91, 92, 98, 106], "unix": 36, "alt": 36, "pip": [36, 100, 102], "activate_inquanto_licens": 36, "get_machine_id": 36, "dylib": 36, "openmp": 36, "mac": 36, "met": [37, 68, 97], "straight": [37, 56], "trade": 37, "theta_": [37, 50, 55, 58], "assembl": 37, "jw_map": [37, 58, 94, 102], "scipy_minim": [37, 97], "param_report": [37, 41], "228972": 37, "1001773": 37, "100177": 37, "1368465754720531": [37, 41, 102], "fermionic_adapt": 37, "365876": 37, "0964357": 37, "096436": 37, "_j": [37, 39, 82, 102], "neq": [37, 82], "foral": 37, "iy_i": 37, "k_": [37, 44], "l_": [37, 57], "candid": 37, "net": 37, "complementari": [37, 72], "517041": 37, "0972883": 37, "097288": 37, "614749": 37, "0090886": 37, "009089": 37, "624186": 37, "0087605": 37, "008761": 37, "676460": 37, "0275934": 37, "027593": 37, "704590": 37, "0232511": 37, "023251": 37, "728340": 37, "0229585": 37, "022958": 37, "r_1_1": 37, "125j": 37, "notic": [37, 59, 85, 93, 98], "six": [37, 54, 98], "Of": 37, "establish": [37, 40, 83, 90, 93], "algebra": [37, 82, 89, 90], "asymptot": [37, 43], "psi_": [38, 39, 68, 82, 93], "dagger_i": [38, 72, 82, 102], "cheaper": [38, 80], "later": [38, 41, 81, 82, 90, 92, 93, 94], "107233493519281": 38, "protocol_express": [38, 93], "2000": [38, 84, 90], "711024": 38, "6779713": 38, "677971": 38, "cse": 38, "389091": 38, "0007800": 38, "000780": 38, "135": 38, "487": 38, "415": 38, "279j": 38, "003": [38, 93, 94], "007j": 38, "056": 38, "003j": [38, 93], "031": [38, 82], "022j": [38, 93], "009": [38, 82], "004j": 38, "861": 38, "169j": 38, "038": 38, "026j": [38, 93], "126": 38, "702j": 38, "314": 38, "511j": 38, "096j": 38, "046": [38, 82, 95], "066j": 38, "96": 38, "208j": 38, "m_": [39, 44], "delta_": [39, 82], "gr": 39, "pull": 39, "10723347230091537": 39, "vqe_stat": 39, "e_exact": 39, "eigval": 39, "615635": 39, "0860535": 39, "086054": 39, "701727": 39, "0004051": 39, "000405": 39, "552": 39, "136": 39, "495": 39, "137": [39, 84], "spectrum": [39, 99], "bitstr": [39, 76, 94], "994256": 39, "000000j": 39, "0011": [39, 56, 76, 98], "988545": 39, "107028": 39, "1100": [39, 53, 56, 76], "011455": 39, "1th": 39, "707107": 39, "0110": [39, 76], "1001": [39, 56, 76], "2th": 39, "s2": [39, 97], "neglect": 39, "asymmetr": 39, "penal": 40, "lambda_i": [40, 101], "expectation_valu": [40, 41, 82, 101], "269291": 40, "7214218": 40, "721422": 40, "insist": 40, "deflationari": [40, 101], "ansatz_2": [40, 101], "recip": 40, "importantli": [40, 82], "suppli": [40, 41, 57], "_final_valu": 40, "_final_paramet": 40, "state_energi": 40, "state_paramet": 40, "012476": 40, "9711849": 40, "971185": 40, "983746": 40, "4704748": 40, "470475": 40, "51": [40, 56, 84, 94, 103], "454368": 40, "0228724": 40, "022872": 40, "1368465754720485": 40, "4951737702568082": 40, "13583641112894157": 40, "5515572309171555": 40, "gd0k0": [40, 101], "05361671754140668": 40, "gd0k1": [40, 101], "05361672405818852": 40, "gs0k0": [40, 101], "2958344824577017e": 40, "gs0k1": [40, 101], "220947363381795e": 40, "gs1k0": [40, 101], "gs1k1": [40, 101], "2662842090145385e": 40, "gd0k0_2": 40, "1747772971751682": 40, "gd0k1_2": 40, "3965782319110953": 40, "gs0k0_2": 40, "5697169942984053": 40, "gs0k1_2": 40, "09511947736526252": 40, "gs1k0_2": 40, "5697171706767198": 40, "gs1k1_2": 40, "9683768181415687": 40, "1453236153515856": 40, "3965782278609027": 40, "0205477940746475": 40, "6657162701734984": 40, "0205493358131585": 40, "22309282323286492": 40, "1329763003951452": 40, "3705337004911948": 40, "1930166918638527": 40, "2469910939300157": 40, "6442914428502857": 40, "48790175100308797": 40, "vqa": 41, "hope": 41, "vec": 41, "precursor": [41, 82, 83], "briefli": [41, 59], "thereaft": 41, "parameter": [41, 44, 45, 46, 58, 68, 72, 74, 75, 79, 84, 94, 97, 102], "minimis": 41, "analyt": [41, 84], "emul": [41, 48, 80, 81, 85, 90, 92, 93, 94, 98, 106, 108], "preprocess": [41, 102], "thought": 41, "_algorithm_vq": 41, "0x7f9e38360e50": 41, "901786": 41, "4814312": 41, "481431": 41, "function_evalu": 41, "1368465754720543": [41, 73], "10723348543796112": 41, "vqe_with_gradi": 41, "394394": 41, "0959856": 41, "095986": 41, "impact": [41, 51, 90, 91, 97, 98, 99, 102, 103], "significantli": [42, 56, 80, 96, 103], "qft": [42, 43, 44, 79], "explain": [42, 44], "discret": [43, 44], "longrightarrow": 43, "jk": [43, 93], "rewritten": 43, "otim": [43, 77, 82], "fraction": [43, 68], "kickback": 43, "xrightarrow": 43, "canonci": 43, "propos": [43, 44, 58, 79], "qualiti": 43, "subcircuit": 43, "modestli": 43, "chose": 43, "4f": 43, "1667": 43, "commonli": [44, 79, 99, 103], "inspir": [44, 49, 54, 55, 77], "evid": [44, 105], "primari": [44, 79, 80, 82, 97, 98], "subsect": [44, 58, 68, 81, 82], "conceptu": [44, 79], "processor": [44, 84], "epsilon": 44, "closer": [44, 69], "energy_resolut": 44, "125000": 44, "015625": 44, "event": 44, "beta_": 44, "prod_": [44, 57, 58, 82], "underset": 44, "operatornam": [44, 104], "083303": 44, "019350": 44, "vq": [45, 46, 85, 107], "schr\u00f6dinger": [45, 46], "tdse": [45, 46], "eom": [45, 46], "review": [45, 46, 84, 94, 97, 106], "ordinari": 45, "wavepacket": 45, "particle_number_oper": 45, "orbital_number_oper": 45, "theta1": [45, 74, 78], "c1": [45, 71, 83, 94], "add_gat": [45, 79], "from_nam": 45, "u3": 45, "theta2": 45, "501": 45, "algodeint": 45, "556388": 45, "9491026": 45, "949103": 45, "evs_express": 45, "ev": [45, 73], "asarrai": [45, 66], "stationari": 45, "tune": [47, 91], "year": [48, 86], "grown": 48, "dramat": [48, 103], "intensifi": 48, "reliant": [48, 103], "studi": [48, 68, 70, 82, 95, 104], "heaviest": 48, "burden": 48, "chapter": 48, "motiv": 49, "multiconfigur": [49, 104], "43": [50, 82, 84, 89, 94], "relationship": [50, 82], "textbf": [50, 82], "42": [50, 56, 82, 84, 91, 94, 102, 103], "variaton": 50, "ra": 50, "hamiltonian_lowdin": 50, "energy_hf": [50, 102], "1175058842043306": [50, 102], "12440620192256865": 50, "45": [50, 58, 63, 78, 84, 94, 103], "371759": 50, "3782146": 50, "378215": 50, "117505884195969": 50, "04443313": 50, "95103332": 50, "1990091": 50, "2322858": 50, "14642999": 50, "16713913": 50, "96063852": 50, "16672251": 50, "98783978": 50, "02520736": 50, "14785981": 50, "04092234": 50, "02750505": 50, "25877542": 50, "1253255": 50, "95737781": 50, "phi_0": 50, "phi_1": 50, "phi_2": 50, "phi_3": 50, "141592653589793": 50, "theta_1_0": 50, "526348563129208": 50, "theta_2_0": 50, "7179010586215773": 50, "theta_2_1": 50, "3111780679781251": 50, "theta_3_0": 50, "027836442642734202": 50, "theta_3_1": 50, "0105744336026967": 50, "theta_3_2": 50, "8624009177850533": 50, "benefit": 51, "regroup": 51, "arrang": [51, 68, 82], "overhead": [51, 72], "synthesi": [51, 56, 84], "47": [51, 84, 94, 101, 103], "chemically_aware_ansatz": 51, "659": 51, "1398": 51, "gates_2q": [51, 56, 90, 91, 94, 97, 98, 102, 103], "688": 51, "gates_1q": [51, 56, 103], "710": 51, "336": [51, 82], "817": 51, "162": 51, "655": 51, "rearrang": [51, 82], "exemplifi": 51, "space_pg": 51, "345": 51, "750": 51, "368": 51, "382": [51, 82], "142": 51, "369": 51, "303": 51, "circ": [52, 69, 77, 79, 80], "redefin": [52, 90, 105], "subcirc": 52, "theta_index": 52, "fresh_symbol": 52, "t_0": 52, "add_custom_g": 52, "vdg": 52, "my_ansatz": [52, 54], "fss_ref": 53, "fss_1001": 53, "fss_0110": 53, "matter": [53, 68, 82], "fstate_multiconf": 53, "ansatz_given": 53, "ansatz_uccgd": 53, "ansatz_multiref": 53, "multirefer": [53, 56, 85, 96, 104, 105], "complic": 53, "cherri": 53, "pick": 53, "conjunct": [53, 77, 97], "envisag": 53, "thin": 54, "illustr": [54, 65, 69, 90, 91, 92, 93, 97, 100], "let": [54, 77, 78, 79, 80, 93, 98, 101], "scratch": [54, 72], "d1": [54, 94, 97], "term_list": 54, "adjoint": [54, 58, 82], "anti_hermitian_term_list": 54, "agnost": 55, "sens": [55, 56], "unwant": [55, 56, 97], "r_x": 55, "boldsymbol": [55, 58, 74, 75, 82], "ent": 55, "r_y": [55, 56], "r_z": [55, 56], "cnot": [55, 70, 78, 90, 97], "rx": [55, 69, 77], "report_hea": 55, "n_paramet": [55, 56, 58, 98, 102], "hea_circuit": 55, "methodologi": [56, 96, 97, 98, 101, 102], "proof": 56, "multicontrol": 56, "univers": [56, 81, 84, 97], "49": [56, 84, 94], "g_1": 56, "pmatrix": 56, "g_2": 56, "config1": 56, "config2": 56, "c_2": 56, "multi_st": 56, "enter": 56, "accomplish": [56, 77, 82, 94], "config3": 56, "c_3": 56, "72": 56, "98": [56, 95], "56": [56, 73, 74, 84, 94, 103], "disjoint": 56, "mind": [56, 57], "36": [56, 63, 69, 84, 94, 103], "tripl": 56, "111000": 56, "100011": 56, "000111": 56, "qs_2bodyrot": 56, "ms_2bodyrot": 56, "ms_circ_2bodyrot": 56, "n_gate": 56, "qs_3bodyrot": 56, "ms_3bodyrot": 56, "ms_circ_3bodyrot": 56, "ncircuit": 56, "35": [56, 63, 79, 80, 82, 84, 94, 103], "321": [56, 73], "347": 56, "crucial": [56, 81, 91, 93, 95, 99], "toffoli": 56, "52": [56, 84, 94, 103], "le": 56, "cautiou": 56, "plug": 56, "qss_ref": 56, "qss_2": 56, "qss_list": 56, "theta0": [56, 74, 78], "53": [56, 64, 84, 94, 103], "occupt": 56, "akin": [56, 82], "debug": [56, 107], "scalabl": [56, 69, 82, 84, 97], "leftarrow": 57, "ip_": 57, "lambda_": [57, 101], "leverag": [57, 93], "bare": [57, 61, 78], "bone": 57, "qlist": 57, "46": [58, 63, 84, 94], "dagger_": [58, 68, 82], "theta_1": [58, 74], "theta_2": [58, 62], "ansatz_uccsd": 58, "ansatz_uccd": 58, "report_uccsd": 58, "uccsd_resourc": 58, "report_uccd": 58, "uccd_resourc": 58, "nnumber": 58, "uccsd_circuit": 58, "uccd_circuit": 58, "83": [58, 84], "57": [58, 73, 80, 84, 94, 103], "singular": 58, "analys": 58, "mislead": 58, "approx": 58, "absorb": [58, 70], "lee": [58, 84], "uccg": 58, "gsd": 58, "pg": [58, 83], "prod_k": 58, "ansatz_uccgsd": 58, "ansatz_kupccsd": 58, "acquir": [59, 68], "c_varianc": [59, 62], "entail": 59, "furthermor": [59, 61], "my_evaluator_funct": 59, "isinst": [59, 61], "dataclass": 59, "23089952010568682": 59, "portion": 59, "fortun": 59, "mycomput": 61, "_evalu": 61, "value_evalu": 61, "dispatch": [61, 89], "myothercomput": 61, "other_valu": 61, "my_evalu": 61, "elif": 61, "_evaluated_differ": 61, "functool": 61, "singledispatchmethod": 61, "myevalu": 61, "__call__": 61, "_evaluated_in_class": 61, "_evaluated_differently_in_class": 61, "other_value_evaluated_differ": 61, "value_evaluated_in_class": 61, "other_value_evaluated_differently_in_class": 61, "mypartialevalu": 61, "But": 61, "c_partial": 61, "0x7fc310c69690": 61, "_tupl": 61, "harmoni": 61, "cf": 61, "one_evaluated_in_class_two_evaluated_differently_in_class": 61, "versatil": [62, 68], "sv_evalu": [62, 73], "sv": [62, 69], "23089952010568748": 62, "abl": [62, 67, 85], "submit": [62, 63, 80, 81, 91, 92, 93, 94, 106], "pa": 62, "pa_evalu": 62, "20430236328482154": 62, "eventu": [62, 68], "subsitut": 62, "ill": 62, "_pauli_averag": [62, 63, 64, 92, 93, 94], "0x7fbb0135acd0": 62, "sv_runner_vari": 62, "pa_runner_vari": 62, "21325353361740473": 62, "quickli": [62, 69, 80, 85, 95], "unavail": 62, "quit": 62, "familiar": [62, 72, 73, 106], "yourself": 62, "topic": [62, 98, 102], "computable_tupl": 62, "140439448081360": 62, "140439447285200": 62, "0x7fba9b6a53d0": 62, "0x7fba9b5e2dd0": 62, "9869527172517875": 62, "20709664898096042": 62, "computable_tuple2": 62, "140439447286672": 62, "0x7fba9b5e3390": 62, "mixtur": [62, 96], "computable_tuple_mix": 62, "ovlp_protocol": 62, "eval_protocol": 62, "140439408408272": 62, "140439742533200": 62, "140441155860240": 62, "02899999999999997": 62, "protocol_list": [62, 64], "shot_evalu": 62, "partial_result": 62, "final_result": 62, "9869804954120797": 62, "22476991621493553": 62, "_trotter_ansatz": [62, 66], "025633390578446377": 62, "seri": [63, 71, 89, 91, 96, 97, 98], "krylov_subspace_comput": 63, "0x7f9009cadf10": 63, "krylov_subspac": 63, "0970": 63, "009953": 63, "8812": 63, "004728": 63, "4608": 63, "008875": 63, "1606": 63, "009871": 63, "1628": 63, "009867": 63, "9844": 63, "001760": 63, "8786": 63, "004776": 63, "1114": 63, "009938": 63, "000000": [63, 69, 71, 81, 93, 94], "4764": 63, "008793": 63, "38": [63, 75, 82, 84, 93, 94, 99, 103], "58": [63, 68, 84, 94, 95], "54": [63, 64, 70, 83, 84, 94, 99, 103], "30000": [63, 94, 98], "306": 63, "psi_1": [64, 77, 78], "o_": 64, "focus": [64, 82, 90, 91, 97, 100, 104], "om_comput": 64, "om_result_statevector": 64, "77": [64, 82], "ji": 64, "shot_backend": 64, "expval_protocol": 64, "140437083706576": 64, "140437083741072": 64, "140437138288272": 64, "0x7fba0e7cd4d0": 64, "0x7fba0e7d5b90": 64, "_hadamard_overlap": 64, "0x7fba11bdae90": 64, "breakdown": [64, 74, 82], "om_result_shotbas": 64, "772": 64, "015j": [64, 93], "straightforwardli": 64, "h2_data": 64, "no_comput": 64, "no_protocol": 64, "energy_casci": 64, "1368465754720547": 64, "9825372067689363": 64, "moreov": [65, 68, 81, 92], "primarili": 65, "cint": 65, "mirror": [65, 92, 94, 98], "ctupl": 65, "clist": 65, "cnode": 65, "carr": 65, "csum": 65, "divis": 65, "cfunc": 65, "naiv": 66, "rdm_oper": 66, "broadcast": 66, "ndarray_broadcast": 66, "rdm_comput": [66, 99, 105, 107], "zq": [66, 82], "yq": 66, "xq": [66, 82], "25j": [66, 82], "_ndarrai": 66, "9879487246653036": 66, "448477954431592e": 66, "3465787677460238e": 66, "19j": 66, "012051275334697197": 66, "rdm_measur": 66, "9867": 66, "0029": 66, "0041j": 66, "013299999999999979": 66, "h2_631g_symmetri": [66, 70], "qubit_spac": [66, 82, 83, 107], "_rdm_real": 66, "0x7fbc50912fd0": 66, "prime": 67, "exp_val_comput": 67, "happen": 67, "exp_val": 67, "evaluator_funct": 67, "tailor": [67, 82, 104], "categor": [67, 85], "quantit": 67, "condens": 68, "59": [68, 84, 92, 94, 95, 97, 98, 103], "tradit": 68, "simplest": [68, 73, 94, 99], "emb": [68, 104], "cup": 68, "env": 68, "_p": [68, 82], "_q": 68, "_r": 68, "overlin": 68, "hexagon": 68, "h2_3_ring_sto3g": [68, 70], "one_body_rdm_hf_lowdin": 68, "elabor": 68, "classnam": 68, "constraint": [68, 91, 101, 103], "a_f": 68, "60": [68, 84, 94], "environment": 68, "frac12": 68, "toi": 68, "ideal": 68, "mask1": 68, "mask2": 68, "mask3": 68, "fragment1": 68, "fragment2": 68, "fragment3": 68, "notin": 68, "flow": 68, "folder": [68, 95], "twice": 68, "crystallin": 68, "gain": [68, 91, 98, 105], "insight": [68, 91, 97, 98, 99, 105], "influenc": [68, 96, 102], "Near": 69, "decoher": [69, 84, 90], "imperfect": [69, 92, 93, 98], "combat": 69, "mitgat": 69, "showcas": [69, 73, 96, 98, 99], "noisy_backend": [69, 90], "gen_uncorrelated_spam_mitr": 69, "uc_spam_mitr": 69, "energy_valu": [69, 92, 98], "547861816220181": 69, "extrapol": 69, "zne": 69, "zero_noise_extrapol": 69, "gen_zne_mitex": 69, "zne_mitex": 69, "noise_scaling_list": 69, "zne3": 69, "5196420749021882": 69, "49180000000000": 69, "synchron": [69, 85], "who": [69, 81], "4407999999999999": 69, "5000999800039994": 69, "h2_sto3g_symmetri": [69, 70], "10723347230091483": 69, "1368465754720525": 69, "no_pmsv_energi": 69, "nwithout": 69, "9382": 69, "003461": 69, "9338": 69, "003578": 69, "1834": 69, "009831": 69, "1884": 69, "009821": 69, "9364": 69, "003510": 69, "9240": 69, "003824": 69, "1946": 69, "009809": 69, "9514": 69, "003080": 69, "9290": 69, "003701": 69, "9274": 69, "003741": 69, "9362": 69, "003515": 69, "9552": 69, "002960": 69, "9264": 69, "003766": 69, "1808": 69, "009836": 69, "0720246772983035": 69, "appendix": 69, "pmsv_energi": 69, "nwith": 69, "972352": 69, "002408": 69, "9404": 69, "183075": 69, "010099": 69, "9477": 69, "192182": 69, "010088": 69, "9465": 69, "47271": 69, "182902": 69, "010101": 69, "9475": 69, "195767": 69, "9450": 69, "1285645055559776": 69, "five": [69, 81, 102], "percent": 69, "50000": [69, 74, 90, 91, 98], "aris": [69, 105], "push": 69, "nfile": 70, "nhamiltonian": 70, "nh2": 70, "hehp_sto3g_symmetri": 70, "h2_2_ring_sto3g": 70, "h2_1_pbc_631g": 70, "ch4_sto3g_symmetri": 70, "h2_1_ring_sto3g": 70, "h2_1_pbc_sto3g": 70, "beh2_purvis_a_purvis_cas44_symmetri": 70, "h2_5_pbc_sto3g": 70, "beh2_purvis_e_purvis_cas22_symmetri": 70, "h3_sto3g_m2_u": [70, 82], "h2o_sto3g": [70, 82], "h3p_chain_sto3g": 70, "nh3_sto3g_symmetri": 70, "ch2_sto3g_m3_u": 70, "h3_chain_sto3g": 70, "h2_2_ring_631g": 70, "h3p_sto3g_c2v": 70, "lih_sto3g_symmetri": 70, "h2_sto3g_long": 70, "beh2_sto3g": 70, "h2_3_pbc_sto3g": 70, "h2_4_ring_sto3g": 70, "h2o_sto3g_symmetri": 70, "nh3_sto3g": 70, "h5_sto3g_m2": 70, "heh_sto3g_u": 70, "lih_sto3g": [70, 82], "lih_631g": 70, "h2_5_ring_sto3g": 70, "h2_4_pbc_sto3g": 70, "h2_2_pbc_sto3g": 70, "beh2_purvis_a_purvis_symmetri": 70, "ch2_sto3g_m3": 70, "hehp_sto3g": 70, "h2_1_ring_631g": 70, "h2_2_pbc_631g": 70, "h2_631g": 70, "beh2_purvis_e_purvis_symmetri": 70, "h3_sto3g_m2": 70, "h5_sto3g_m2_u": 70, "beh2_sto3g_symmetri": 70, "h4_square_sto3g_m3": 70, "ch4_sto3g": 70, "beh2_purvis_e_purvis_cas44_symmetri": 70, "beh2_purvis_a_purvis_cas22_symmetri": 70, "7122\u00e5": 70, "e_tot": 70, "mo_energi": 70, "117505884204331": [70, 73], "625524": 70, "1329337": 70, "132934": 70, "noisy_a": 70, "hubbard_dimer_driv": 70, "dimer_ham": 70, "dimer_spac": 70, "dimer_hf_st": 70, "finit": [70, 85, 107], "hubbard_ring_driv": 70, "hubbard_chain_driv": 70, "ring_ham": 70, "ring_spac": 70, "ring_hf_stat": 70, "chain_ham": 70, "chain_spac": 70, "chain_hf_stat": 70, "nring": 70, "nchain": 70, "doublet": 70, "impli": [70, 79], "beh2": [70, 85], "purvi": [70, 85], "shepard": 70, "brown": 70, "bartlett": [70, 84], "1983": 70, "835": 70, "845": 70, "tetragon": 70, "2x1x1": 70, "3x1x1": 70, "4x1x1": 70, "5x1x1": 70, "73\u00e5": 70, "735\u00e5": 70, "seper": 70, "9\u00e5": 70, "h3": [70, 71, 94], "heh": 70, "772\u00e5": 70, "64\u00e5": 70, "511\u00e5": 70, "nh3": 70, "735": 71, "643702": 71, "795892": 71, "109891": 71, "water_zmatrix": 71, "104": [71, 103], "water_xyz": 71, "1271610": 71, "7580820": 71, "5086420": 71, "ngeometri": 71, "968148": 71, "25038": 71, "127161": 71, "o1": 71, "758082": 71, "508642": 71, "ethane_xyz": 71, "7688350": 71, "0157000": 71, "1533240": 71, "8796220": 71, "5078500": 71, "53767": 71, "73395111184878": 71, "180": [71, 103], "98941082": 71, "516164": 71, "equilibrium": [71, 80, 103], "90": 71, "989410821414947": 71, "0269116572392": 71, "stagger": 71, "eclips": 71, "ethan": [71, 104], "methyl": 71, "ch3_1": 71, "ch3_2": 71, "768835": 71, "c2": [71, 83], "01570": 71, "153324": 71, "879622": 71, "50785": 71, "h4": 71, "h6": 71, "h7": 71, "h8": 71, "000000e": 71, "031165": 71, "796220e": 71, "415654": 71, "349405e": 71, "water_geom": 71, "103": 71, "106": [71, 84], "108": 71, "99999999999999": 71, "diamond": 71, "fcc": 71, "576": [71, 93], "cfcc_geom": 71, "ncartesian": 71, "788": 71, "894": 71, "c3": 71, "682": 71, "c4": 71, "c5": 71, "c6": 71, "c7": 71, "470": 71, "c8": 71, "modern": [72, 84], "brought": 72, "born": 72, "oppenheim": 72, "dagger_k": 72, "broadli": [72, 82], "precomput": [72, 102], "educ": 72, "fed": 72, "deliv": 72, "queue": 72, "tip": 72, "customiz": 72, "prebuilt": 72, "stack": [72, 106], "inject": [72, 74], "few": [73, 81, 102, 103], "sv_protocol": 73, "evg": 73, "vqe_object": 73, "vqe_gradi": 73, "gradient_dict": 73, "359": 73, "guidanc": [73, 98, 106], "successfulli": [73, 102, 103], "136847": 73, "1368465754720545": 73, "loc": [73, 98], "087635": 73, "fun": 73, "011499023526666223": 73, "10723350002059162": 73, "nit": 73, "nfun": 73, "3393815": 73, "339381": 73, "sgd": 73, "433407": 73, "35933735912603115": 73, "132153514601271": 73, "054487281372526786": 73, "17778365523875422": 73, "1357239648371473": 73, "08144509079704804": 73, "0870438927078119": 73, "1365789761834755": 73, "09464378821405425": 73, "042508542578840264": 73, "1367828405791485": 73, "10108947180749589": 73, "020746679121849076": 73, "1368313985785874": 73, "10423534605115126": 73, "01012412847800237": 73, "1368429616408462": 73, "10577049463234582": 73, "004940280683155357": 73, "1368457149778974": 73, "10651960255782578": 73, "0024106935679378827": 73, "1368463705791982": 73, "10688514244785736": 73, "0011763364084181327": 73, "1368465266849066": 73, "10706351347231782": 73, "0005740118592296173": 73, "njac": 73, "10715055242023318": 73, "4493942": 73, "449394": 73, "especi": [73, 104], "888629": 73, "174": 73, "328": 73, "166": 73, "012": [73, 76], "159": 73, "finish": [73, 92, 93, 98], "5141364": 73, "514136": 73, "1100030552770472": 73, "phaseshift": [74, 85], "h_i": [74, 75, 82], "braket": [74, 106], "theta_0": 74, "bar": [74, 77, 78, 98, 107], "rewrit": 74, "gamma_i": 74, "gamma_0": 74, "gamma_1": 74, "u_j": 74, "gamma_j": 74, "p_j": [74, 101], "gamma_k": 74, "_0": [74, 82], "_k": [74, 102], "n_k": 74, "u_n": 74, "gamma_n": 74, "gamma_": [74, 99], "u_k": 74, "0555": 74, "024231892818773207": 74, "00484637856375464": 74, "hadamardtestderi": 74, "ijk": [74, 75, 77], "gamma_l": 74, "v_k": 74, "v_l": 74, "v_i": 74, "u_1": [74, 77, 78], "u_0": [74, 77, 78], "carefulli": 74, "superposit": 74, "5000": [74, 81, 90, 91, 92, 94, 98], "9417154046806644": 74, "3965781047011498": 74, "6797144480784211": 74, "00000000000000": 74, "u7": 74, "250000000000000": 74, "u16": 74, "reveal": [74, 90], "u14": 74, "u17": 74, "14th": 74, "17th": 74, "brayvi": 75, "1396047217640506": 75, "z_0": 75, "h_2": [75, 82, 102], "z_2": 75, "h_3": 75, "z_1": 75, "h_4": 75, "z_3": 75, "h_5": 75, "z_0z_2": 75, "h_6": 75, "z_1z_3": 75, "h_7": 75, "z_0z_1": 75, "h_8": 75, "z_1z_2": 75, "h_9": 75, "y_0x_1x_2y_3": 75, "x_0x_1y_2y_3": 75, "y_0y_1x_2x_3": 75, "x_0y_1y_2x_3": 75, "z_0z_3": 75, "z_2z3": 75, "render_circuit_jupyt": [75, 79, 81, 90, 91, 94, 97, 98], "ipython": [75, 79, 81, 89, 97], "rerun": 75, "1310036205644844": 75, "y_0": 75, "x_1": 75, "x_2": 75, "y_3": 75, "600": 76, "015492": 76, "013184": 76, "164": 76, "011709": 76, "003443": 76, "pm": 77, "2n_p": 77, "12e3": 77, "num": [77, 78], "217": 77, "04965": 77, "024458333333333332j": 77, "_bra": 77, "_ket": 77, "219": 77, "040783333333333345": 77, "0032333333333333337j": 77, "04296666666666668": 77, "000683333333333333j": 77, "304": 77, "044441666666666664": 77, "004800000000000016j": 77, "fidel": [78, 79, 81], "ansatz0": 78, "ansatz1": 78, "634": [78, 93], "6499999999999999": 78, "xor": [78, 94], "m_i": 78, "6439999999999999": 78, "eigenphas": 79, "ctrlu": 79, "cu1": 79, "init_st": 79, "qopl": 79, "prep_ansatz": 79, "56789": 79, "subroutin": 79, "concern": [79, 82, 90, 101], "remark": 79, "thank": 79, "mid": 79, "reus": [79, 83], "dub": [79, 80, 84], "benedetti": [79, 84], "amaro": [79, 84], "david": [79, 84, 86], "device_nam": [79, 91, 92, 93, 94, 98], "accompani": [79, 97], "decod": 79, "unencod": [79, 80], "gx_": 79, "gi_": 79, "reconstruct": 79, "qpol": 79, "qps_xx": 79, "qps_ixx": 79, "undergo": 79, "puali": 79, "qps_zixx": 79, "qps_zxxx": 79, "aramet": 79, "modest": 79, "sensibl": 80, "realist": [80, 90], "equip": [80, 82, 97], "mimic": 80, "feasibl": 80, "fham": 80, "fst_hf": 80, "qham": 80, "40000": [80, 98], "n_gates_of_typ": 80, "depth_by_typ": [80, 98], "zzphase": [80, 94], "quota": 80, "hqc": [80, 91, 92, 98], "qtnm_backend": 80, "measure_al": 80, "qtnm_circ": 80, "1sc": 80, "theoret": [80, 105], "sec": 80, "398": 80, "1809": 80, "qop_totally_commut": 80, "0112": 80, "3322": 80, "n_trotter": 80, "evo_ope_exp": 80, "eoe_tot_com": 80, "07113": 80, "add_pauliexpbox": 80, "tq": 80, "560": 80, "305": 80, "102": 80, "203": [80, 93], "crz": 80, "rzzriz": 80, "cryi": 80, "rzyyriyi": 80, "629": [80, 82], "523": 80, "218": 80, "zixx": 80, "zxxx": 80, "terms_map_y2x": 80, "sdg": 80, "332": 80, "326": 80, "307": 80, "straightforward": [80, 90, 91, 104, 105], "multifunct": 81, "parti": 81, "categori": 81, "strictli": 81, "divers": 81, "overarch": 81, "substanti": [81, 103], "disk": 81, "send": [81, 98], "976": 81, "006890": 81, "264": 81, "030516": 81, "172": 81, "031167": 81, "232": [81, 84], "030775": 81, "204": [81, 93], "030973": 81, "2737539745256363": 81, "tackl": [82, 108], "atyp": 82, "depict": [82, 99, 104], "geq": 82, "ON": 82, "eta_0": 82, "eta_1": 82, "eta_p": 82, "eta_": 82, "mathcal": 82, "bigoplus_": 82, "binom": 82, "sai": [82, 84], "uccsd_excit": 82, "exhaust": 82, "0_": 82, "on_vector": 82, "discontinu": 82, "new_stat": 82, "dagger_3": 82, "f_op1": 82, "f_op2": 82, "f_op_string_conj": 82, "f_op": 82, "f_op_conj": 82, "f_op_sum": 82, "ye": [82, 84], "far": 82, "875j": 82, "fol": 82, "op_trotter": 82, "convention": 82, "bigotim": 82, "p_n": 82, "sophist": 82, "counterpart": 82, "coord": 82, "mention": [82, 102], "clearli": 82, "wouldn": 82, "dagger_j": [82, 102], "mathinn": 82, "x_j": 82, "y_j": 82, "increment": 82, "qubit_operator_bk": 82, "x7": 82, "dense_fermionic_st": 82, "sparse_fermionic_st": 82, "dense_qubit_st": 82, "sparse_qubit_st": 82, "superclass": 82, "Such": [82, 103], "upuparrow": 82, "downdownarrow": 82, "integral_oper": 82, "050650": 82, "746695": 82, "109103": 82, "168024": 82, "026783": 82, "f10": 82, "1496": 82, "009754": 82, "f11": 82, "f8": 82, "f9": 82, "1497": 82, "1498": 82, "228088": 82, "1499": 82, "1500": 82, "935480": 82, "1501": 82, "107196": 82, "396888": 82, "z11": 82, "z10": 82, "114044": 82, "228984": 82, "z9": 82, "626": 82, "011161": 82, "z4": [82, 93, 94], "z6": 82, "z7": 82, "z8": 82, "x11": 82, "627": 82, "029058": 82, "628": 82, "034437": 82, "y5": [82, 93, 94], "y11": 82, "630": 82, "414556": 82, "631": 82, "stat": 82, "ortho_group": 82, "rv": 82, "n_orbit": [82, 102], "414919": 82, "245166": 82, "051826": 82, "112958": 82, "4460": 82, "050081": 82, "4461": 82, "4462": 82, "299636": 82, "4463": 82, "4464": 82, "535908": 82, "4465": 82, "neffect": 82, "5140974066187696": 82, "996": 82, "226": 82, "924": 82, "632": 82, "163": 82, "069": 82, "541": 82, "712": 82, "fdr": 82, "nh": 82, "set_opt": 82, "pvdz": 82, "wfn": 82, "return_wfn": 82, "_get_const": 82, "nuclear_repulsion_energi": 82, "_chemistry_integral_oper": [82, 91], "5291772106699999": 82, "transfer": 82, "316": 82, "949": 82, "66314574": 82, "267": 82, "309": 82, "802": 82, "068": 82, "goal": [82, 93, 95, 97, 98, 102, 103], "887": 82, "my_unitari": 82, "new_c": 82, "oo": 82, "initial_orbit": 82, "final_orbit": 82, "minimising_unitari": 82, "systemat": 82, "39": [82, 84, 93, 94, 103], "varepsilon_1": 82, "t_u": 82, "varepsilon_2": 82, "sim": [82, 84], "79": [82, 84, 104], "arriv": 82, "_t": 82, "prrq": 82, "81": [82, 93], "doublefactorizedhamiltonian": [82, 85], "df_ham": 82, "core_tensor": 82, "n_gamma": 82, "n_lambda": 82, "extent": 82, "recal": 82, "82": 82, "87": [82, 84], "bracket": 82, "u1": [82, 92, 98], "15627858132068": 82, "99140515493988": 82, "30673410272335": 82, "057439359193436": 82, "028943982634141": 82, "621602713403972": 82, "593693566394927": 82, "028": [82, 94], "014": [82, 94], "897": 82, "438": 82, "775": 82, "908": 82, "355": [82, 95], "006": [82, 93, 94], "416": 82, "825": 82, "4448764396689815": 82, "6036682667825736": 82, "6032107009666192": 82, "5661066153622433": 82, "f7": 82, "5485420002371266": 82, "23407908501568664": 82, "22952218815953337": 82, "f12": 82, "f13": 82, "1490526762037985": 82, "14893969791230924": 82, "1397782700855605": 82, "1354413634847845": 82, "0577968331031903": 82, "056671682571070386": 82, "14882680525560812": 82, "13967232156760168": 82, "13533870223620306": 82, "05775302451401368": 82, "05662872681854202": 82, "13108093920700759": 82, "12701388507810177": 82, "054200578972106485": 82, "053145437937600445": 82, "12307301961848317": 82, "05251889519846896": 82, "051496492071754295": 82, "022411364906931505": 82, "02197507527311114": 82, "02154727903741131": 82, "115": [82, 84], "048": 82, "062": 82, "085": 82, "564": 82, "464": 82, "677": 82, "736": 82, "645": 82, "756": 82, "033": 82, "502": 82, "459": 82, "733": 82, "rotate_ansatz_gener": 82, "df_oper": 82, "rotated_ansatz": 82, "rotated_oper": 82, "term_comput": 82, "verifi": [83, 92, 94, 96, 98], "inde": [83, 103], "inconsist": [83, 85], "difficulti": [83, 103], "multiplicand": 83, "excess": [83, 96], "knowledg": 83, "symmetry_operators_fermion": 83, "h2_hamiltonian": 83, "symmetry_operators_qubit": 83, "i3": 83, "c2h": 83, "c3v": 83, "d2": [83, 97], "d3h": 83, "td": 83, "human": 83, "readabl": 83, "\u03c3_v": 83, "a1": 83, "a2": 83, "b1": 83, "b2": 83, "direct_product": 83, "b1g": 83, "b2g": 83, "b3g": 83, "au": 83, "b2u": 83, "b3u": 83, "tapered_hamiltonian": 83, "29264467227722657": 83, "8248612119271042": 83, "17966867956301552": 83, "reference_st": 83, "violat": [83, 92, 94, 98, 103], "diniz": [84, 86], "gabriel": [84, 86], "manriqu": [84, 86], "zsolt": [84, 86], "sennan": 84, "wassil": 84, "magnin": 84, "yann": 84, "shishenina": 84, "elvira": 84, "cordier": 84, "philipp": 84, "llewellyn": 84, "philip": 84, "krompiec": [84, 86, 99, 105], "michal": [84, 86], "ran\u010di\u0107": 84, "marko": 84, "epj": 84, "technol": 84, "1140": 84, "epjqt": 84, "s40507": 84, "022": [84, 94], "00155": [84, 98], "han": 84, "hon": 84, "sang": 84, "chan": [84, 95], "nathan": [84, 86], "fitzpatrick": [84, 86], "2023": [84, 85, 91, 94], "2303": 84, "06161": 84, "48550": 84, "yuta": 84, "conor": 84, "keever": 84, "luuk": 84, "coopman": 84, "michael": 84, "lubasch": 84, "marcello": 84, "realiz": 84, "05533": 84, "szabo": 84, "ostlund": 84, "dover": 84, "book": 84, "2012": [84, 95, 104, 105], "isbn": 84, "9780486134598": 84, "trygv": 84, "helgak": 84, "poul": 84, "\u00f8": 84, "rgensen": 84, "jepp": 84, "olsen": 84, "wilei": 84, "chichest": 84, "york": 84, "978": 84, "471": 84, "96755": 84, "53147": 84, "alberto": 84, "peruzzo": 84, "jarrod": 84, "mcclean": 84, "peter": 84, "shadbolt": 84, "man": 84, "hong": 84, "yung": 84, "xiao": 84, "qi": 84, "zhou": 84, "\u00e1": 84, "aspuru": 84, "guzik": 84, "jeremi": 84, "brien": 84, "photon": 84, "nat": 84, "commun": 84, "4213": 84, "2014": 84, "1038": 84, "ncomms5213": 84, "oscar": 84, "higgott": 84, "daochen": 84, "wang": [84, 101], "stephen": 84, "brierlei": [84, 101], "1805": 84, "08138": 84, "22331": 84, "harper": 84, "grimslei": 84, "sophia": 84, "econom": 84, "edwin": 84, "barn": 84, "nichola": 84, "mayhal": 84, "3007": 84, "s41467": 84, "019": 84, "10988": 84, "yordan": 84, "yordanov": 84, "armao": 84, "crispin": 84, "arvidsson": 84, "shukur": 84, "228": 84, "s42005": 84, "021": 84, "00730": 84, "wu": 84, "lidar": 84, "4506": 84, "4525": 84, "1499208": 84, "abelian": [84, 92, 94, 98], "1995": 84, "cleve": 84, "artur": 84, "ekert": 84, "chiara": 84, "macchiavello": 84, "michel": [84, 86], "mosca": 84, "revisit": 84, "proc": 84, "roi": 84, "soc": 84, "lond": 84, "454": 84, "339": [84, 101], "1998": 84, "1098": 84, "rspa": 84, "0164": 84, "daniel": 84, "abram": 84, "seth": 84, "lloyd": 84, "rev": 84, "5162": 84, "5165": 84, "dec": 84, "link": [84, 92, 93, 98, 108], "physrevlett": 84, "nielsen": 84, "isaac": 84, "chuang": 84, "10th": 84, "anniversari": 84, "cambridg": 84, "press": 84, "decemb": [84, 85], "2010": 84, "49548": 84, "kimchi": 84, "schwartz": 84, "carter": 84, "jong": 84, "95": [84, 91], "042308": 84, "2017": [84, 105], "ayush": 84, "asthana": 84, "ashutosh": 84, "kumar": 84, "vibin": 84, "abraham": 84, "zhang": 84, "lukasz": 84, "cincio": 84, "sergei": 84, "tretiak": 84, "pavel": 84, "ioniz": 84, "affin": 84, "sci": 84, "2405": 84, "2418": 84, "andrew": [84, 86], "maslov": 84, "yunseong": 84, "nam": 84, "neil": 84, "ross": 84, "yuan": 84, "su": 84, "speedup": 84, "natl": 84, "acad": 84, "9456": 84, "9461": 84, "septemb": [84, 85], "1073": 84, "pna": 84, "1801723115": 84, "alexei": 84, "alexand": 84, "shen": 84, "mikhail": 84, "vyalyi": 84, "american": [84, 85], "krysta": 84, "matthew": 84, "kentaro": [84, 86], "samuel": 84, "\u00f1": 84, "oz": [84, 86], "june": [84, 85], "miroslav": 84, "\u0161\u00ed\u010d": 84, "ek": 84, "\u00f6": 84, "johansson": 84, "vitali": 84, "shumeiko": 84, "wendin": 84, "76": 84, "030306": 84, "2007": 84, "mallei": 84, "babbush": 84, "kivlichan": 84, "romero": 84, "barend": 84, "kelli": 84, "roushan": 84, "tranter": [84, 86], "ding": 84, "campbel": 84, "chen": 84, "chiaro": 84, "dunsworth": 84, "fowler": 84, "jeffrei": 84, "lucero": 84, "megrant": 84, "mutu": 84, "neelei": 84, "neill": 84, "quintana": 84, "sank": 84, "vainsench": 84, "wenner": 84, "covenei": 84, "neven": 84, "martini": 84, "juli": [84, 85], "2016": 84, "031007": 84, "wieb": 84, "chri": 84, "granad": 84, "117": 84, "010503": 84, "jun": 84, "brian": 84, "tarasinski": 84, "barbara": 84, "terhal": 84, "023022": 84, "feb": 84, "aafb8": 84, "ewout": 84, "van": 84, "den": 84, "berg": 84, "ayesian": 84, "469": 84, "suguru": 84, "endo": 84, "zhao": 84, "ying": 84, "simon": 84, "benjamin": 84, "octob": [84, 85], "joonho": 84, "william": 84, "huggin": 84, "martin": 84, "gordon": 84, "birgitta": 84, "whalei": 84, "311": [84, 93, 97, 98], "324": 84, "januari": [84, 85], "adriano": 84, "barenco": 84, "andr": 84, "\u00e9": 84, "berthiaum": 84, "deutsch": 84, "jozsa": 84, "siam": 84, "1541": 84, "1557": 84, "1997": 84, "1137": 84, "s0097539796302452": 84, "juan": 84, "carlo": 84, "garcia": 84, "escartin": 84, "pedro": 84, "chamorro": 84, "posada": 84, "ou": 84, "mandel": 84, "052330": 84, "maria": [84, 86], "schuld": 84, "vill": 84, "bergholm": 84, "christian": 84, "gogolin": 84, "josh": [84, 86], "izaac": 84, "killoran": 84, "unpil": 84, "baek": 84, "bryan": 84, "gorman": 84, "073009": 84, "jul": 84, "diptarka": 84, "hait": 84, "jame": 84, "shee": 84, "oskar": 84, "leimkuhl": 84, "torin": 84, "stetina": 84, "nonorthogon": [84, 107], "gian": 84, "giacomo": 84, "guerreschi": 84, "smelyanskii": 84, "2211": 84, "06703": 84, "novemb": [84, 85], "cristina": 84, "cirstoiu": 84, "sila": 84, "dilk": 84, "mill": 84, "seyon": 84, "sivarajah": 84, "duncan": [84, 86], "volumetr": 84, "enchmark": 84, "rror": 84, "itig": 84, "ermit": 84, "1059": 84, "irfan": [84, 86], "khan": [84, 86], "hideaki": 84, "sawada": 84, "iron": [84, 98, 108], "crystal": [84, 104], "033110": 84, "aug": [84, 94], "physrevresearch": 84, "jacob": 84, "224109": 84, "4768229": 84, "pub": 84, "aip": 84, "jcp": 84, "19024657": 84, "_onlin": 84, "yihan": 84, "15465582": 84, "mario": 84, "motta": 84, "erika": 84, "zhendong": 84, "austin": 84, "minnich": 84, "ryan": 84, "garnet": 84, "lic": 84, "npj": 84, "225": 84, "1960": 84, "ian": 84, "craig": 84, "gidnei": 84, "120": [84, 93, 95], "110501": 84, "bo": 84, "peng": 84, "karol": 84, "kowalski": 84, "compound": 84, "4179": 84, "4192": 84, "rodnei": 84, "monika": 84, "musia": 84, "\u0142": 84, "291": 84, "352": 84, "februari": [84, 85], "revmodphi": 84, "abhinav": 84, "anand": 84, "schleich": 84, "sumner": 84, "alperin": 84, "lea": 84, "phillip": 84, "jensen": 84, "sukin": 84, "manuel": 84, "\u00ed": 84, "az": 84, "tinoco": 84, "jakob": 84, "kottmann": 84, "matthia": 84, "degroot": 84, "izmaylov": 84, "15176": 84, "tudorovskaya": [84, 86], "kirsopp": [84, 86], "warrier": 84, "papanastasi": 84, "singh": 84, "initio": 84, "ion": 84, "trap": 84, "refriger": 84, "158": 84, "214114": 84, "kandala": 84, "antonio": 84, "kristan": 84, "maika": 84, "takita": 84, "marku": 84, "brink": 84, "jerri": 84, "chow": 84, "jai": 84, "magnet": 84, "549": 84, "7671": 84, "242": 84, "246": 84, "nature23879": 84, "miguel": 84, "arrazola": 84, "olivia": 84, "di": [84, 86], "matteo": 84, "nicol": 84, "quesada": 84, "soran": 84, "jahangiri": 84, "alain": 84, "delgado": 84, "luca": 84, "anselmetti": 84, "wierich": 84, "robert": [84, 86], "parrish": 84, "\u00e4": 84, "tze": 84, "113010": 84, "nov": 84, "ac2cb3": 84, "charl": 84, "bennett": 84, "divincenzo": 84, "norman": 84, "margolu": 84, "shor": 84, "tycho": 84, "sleator": 84, "john": 84, "smolin": 84, "harald": 84, "weinfurt": 84, "elementari": 84, "3457": 84, "3467": 84, "adenilton": 84, "da": 84, "silva": 84, "park": 84, "multiqubit": 84, "042602": 84, "oct": 84, "niemann": 84, "rhitam": 84, "datta": 84, "Wille": 84, "ieee": 84, "46th": 84, "symposium": 84, "ismvl": 84, "volum": 84, "247": 84, "252": 84, "1109": 84, "mateusz": 84, "ostaszewski": 84, "edward": 84, "stoke": 84, "giusepp": 84, "carleo": 84, "spall": 84, "hopkin": 84, "apl": 84, "digest": 84, "482": 84, "492": 84, "gerald": 84, "knizia": [84, 95], "109": [84, 93], "186404": 84, "1428": 84, "1432": 84, "sebastian": 84, "wouter": 84, "jim": 84, "nez": 84, "hoyo": 84, "qime": 84, "sun": 84, "2706": 84, "2719": 84, "preprint": 84, "2210": 84, "05702": 84, "guo": 84, "kantharuban": 84, "sivalingam": 84, "frank": 84, "nees": 84, "ewa": 84, "pastorczak": [84, 99], "katarzyna": 84, "pernal": [84, 99], "3493": 84, "3503": 84, "senn": 84, "walter": 84, "thiel": 84, "qm": 84, "biomolecular": 84, "angewandt": 84, "chemi": 84, "1198": 84, "1229": 84, "1002": 84, "200802019": 84, "lili": 84, "cao": 84, "ulf": 84, "ryde": 84, "frontier": 84, "klamt": 84, "sch": 84, "\u00fc\u00fc": 84, "rmann": 84, "societi": 84, "perkin": 84, "transact": 84, "799": 84, "805": 84, "1993": 84, "p29930000799": 84, "filippo": 84, "lipparini": 84, "giovanni": 84, "scalmani": 84, "loui": 84, "lagard": 84, "\u00e8": 84, "stamm": 84, "eric": 84, "canc": 84, "yvon": 84, "madai": 84, "jean": 84, "piquem": 84, "frisch": 84, "benedetta": 84, "mennucci": 84, "141": 84, "184108": 84, "4901304": 84, "aux": 85, "usernam": 85, "uuid": 85, "race": 85, "2024": [85, 92, 93], "v4": 85, "refactor": 85, "opgroup": 85, "english": 85, "spell": 85, "symboldict": 85, "symbolset": 85, "from_dict": 85, "v2": 85, "uncompil": [85, 91, 94], "carri": [85, 90, 92, 93, 94, 97, 98, 99, 104, 105], "undecompos": 85, "n_2qb_gate": 85, "deliveri": 85, "double_factorization_h3": [85, 107], "submiss": [85, 94], "shsv": 85, "einsum": 85, "ao2mo": 85, "pint": 85, "warn": [85, 92, 93, 94, 98, 99, 104, 105], "conflict": 85, "upgrad": 85, "poetri": 85, "unwarr": 85, "incorrect": 85, "august": 85, "hotfix": 85, "latest": 85, "v1": 85, "zeu": 85, "1b6": 85, "sourcedefend": 85, "v14": 85, "v13": 85, "v12": 85, "slowdown": 85, "april": 85, "complex_typ": 85, "algorithm_vqe_varci": [85, 107], "algorithm_vqe_varci_h3p": 85, "date": [85, 91], "march": 85, "qcelement": 85, "clarifi": 85, "datafil": 85, "overhaul": 85, "renam": 85, "computablearrai": 85, "computablemetrictensorr": 85, "computablerestrictedonebodyrdm": 85, "computableunrestrictedonebodyrdm": 85, "computablerestrictedonebodyrdmr": 85, "computableunrestrictedonebodyrdmr": 85, "computablespinlessnbodyrdmtensorr": 85, "computablespinlessnbodypdmtensorr": 85, "computablerdm1234r": 85, "computablepdm1234r": 85, "computablecommut": 85, "computableqsematric": 85, "expectationvaluederivativer": 85, "overlapsquaredketderiv": 85, "ve": [85, 94], "paus": 85, "resum": 85, "protocoldirect": 85, "protocolindirect": 85, "protocolcsp": 85, "protocoldsp": 85, "protocolvacuum": 85, "protocolphaseshift": 85, "protocolhadamarddirectpaulii": 85, "protocolhadamardindirectpaulii": 85, "protocolhadamarddirectpauliz": 85, "protocolhadamardindirectpauliz": 85, "protocolhadamardderivativeoverlap": 85, "protocolstatevectorspars": 85, "protocolstatevectorbackendsupport": 85, "protocolsymbol": 85, "protocolmidmeasurementgradi": 85, "protocolvacuumphaseshift": 85, "givensansatz": 85, "multireferencest": 85, "realbasisrotationansatz": 85, "restructur": 85, "networkx": 85, "_type": 85, "v211": 85, "qubitwis": 85, "time_evolut": 85, "qrdm": 85, "cost_estim": 85, "cost_estimate_elementwis": 85, "kupccgspd": 85, "kupccgsdsinglet": 85, "generate_qubit_trotter_oper": 85, "typo": 85, "logger": 85, "branch": 85, "_freez": 85, "hva": 85, "custom_prefix": 85, "generate_circuit": 85, "hint": 85, "metrictensor": 85, "bugfix": 85, "safeti": 85, "fetch": 85, "decrypt": 85, "misc": 86, "author": 86, "paola": 86, "cono": 86, "gowland": 86, "plekhanov": 86, "christopoul": 86, "georgia": 86, "prokopi": 86, "keen": 86, "harri": 86, "polyak": 86, "iakov": 86, "pilipczuk": 86, "jerzi": 86, "sze": 86, "anderson": 86, "bhasker": 86, "vardhini": 86, "trademark": 88, "llc": 88, "affili": 88, "franc": 88, "germani": 88, "israel": 88, "japan": 88, "mauritiu": 88, "mexico": 88, "russia": 88, "arab": 88, "emir": 88, "taiwan": 88, "unregist": 88, "ltd": 88, "kingdom": 88, "european": 88, "cloudpickl": 89, "bsd": 89, "cloudpip": 89, "h5py": 89, "hdf5": 89, "apach": 89, "googl": 89, "mit": 89, "jaraco": 89, "multipledispatch": 89, "mrocklin": 89, "aros": 89, "fundament": [89, 97, 104], "pydata": 89, "softwar": [89, 104], "cqc": 89, "proprietari": 89, "scientif": 89, "readthedoc": 89, "transpar": 89, "ifduyu": 89, "cryptolen": 89, "ibm": 90, "brief": 90, "ibmq": [90, 106], "profil": [90, 91, 92, 93, 98], "infti": 90, "fermionspacestateexpjwchemicallyawar": 90, "seek": 90, "499675": 90, "4996755931358105": [90, 91], "expectation0": [90, 91], "n2": [90, 98], "comprehend": 90, "rcparam": [90, 91, 98], "figsiz": [90, 91, 98], "set_shot": [90, 91], "200": [90, 98], "500": [90, 91], "20000": [90, 98], "n_measured_term": 90, "set_se": 90, "arguemnt": 90, "499676": 90, "587646": 90, "expval_express": 90, "statevector_energi": 90, "shotless_energi": 90, "5876463677225002ha": 90, "devoid": 90, "culmin": 90, "probabilist": 90, "resembl": 90, "margin": 90, "protocol_templ": [90, 98], "protocol_pickl": [90, 98], "noiseless_energi": 90, "aer_expect": 90, "xscale": [90, 91], "ylim": [90, 91, 98], "5f": [90, 91], "legend": [90, 91, 98, 103], "5848319000310381": 90, "manifest": 90, "depolaris": 90, "incorrectli": 90, "cnot_error_r": 90, "noisy_aer_expect": 90, "qiskit_a": 90, "noisemodel": 90, "readouterror": 90, "noise_model": 90, "error_1": 90, "depolarizing_error": 90, "qubit2": 90, "add_quantum_error": 90, "is_id": 90, "noisy_energi": 90, "0x15f8db890": 90, "bias": 90, "freeli": 90, "preload": 91, "expec": 91, "0x121795e10": 91, "valuabl": [91, 97, 98, 99], "conduct": [91, 92, 96, 97, 98, 99, 104, 105], "server": [91, 92, 93, 98], "5876463677224993": 91, "arguement": 91, "device_st": 91, "noisy_h1_1e_energi": 91, "noisy_h1_1e_expect": 91, "portal": [91, 106], "progress": [91, 92, 97, 98], "jobid": 91, "queu": [91, 92, 93], "3049eb4cf05746ffb271c8bf11cd6e91": 91, "gq4wezbugm3di": 91, "usergroup": 91, "251": 91, "474e5da741a34c5b9ad0b577db0141a0": 91, "185": 91, "7dd6b36ea21a43c8bb8dd5067244a11f": 91, "128": [91, 94], "df15c1a8e2f442a694463c59538d466f": 91, "hline": [91, 98], "0x7f605017bc70": 91, "purifi": 91, "unmitig": 91, "_mitig": [91, 94, 98], "mitms_pmsv": [91, 92, 93, 94, 98], "miti_h1_1e_energi": 91, "miti_h1_1e_expect": 91, "0x7f6049d55ae0": 91, "slightli": [91, 103], "heighten": 91, "methan": [92, 93], "filterwarn": [92, 93, 98, 99, 104, 105], "infin": 92, "452381": 92, "3955611": 92, "395561": 92, "inaccuraci": [92, 93, 98, 103], "stabilis": 92, "stabilz": [92, 98], "uphold": [92, 98, 99, 105], "uk": [92, 93, 94], "0x7faf11e91c00": 92, "stderr": [92, 94, 97], "umean": [92, 94], "sample_s": [92, 94], "reload": 92, "new_protocol": 92, "receiv": [92, 99, 105], "situat": 92, "delai": 92, "wb": [92, 93, 96, 97, 98], "highest_protocol": [92, 93, 96, 97, 98], "monitor": [92, 98], "rb": [92, 97, 98], "new_handl": 92, "50106a91ceb048e3bba7bcab26de7320": 92, "null": 92, "483171224e0b43469e22fb7467939d0a": 92, "completion_check": [92, 93], "circuit_statu": [92, 93], "1364071606946333": 92, "1364": 92, "0018": 92, "c_k": 93, "lm": 93, "psi_k": 93, "refin": [93, 97, 98], "collat": 93, "eigen": 93, "concept": [93, 104], "ch": [93, 94], "_4": [93, 96, 97, 98], "retreiv": 93, "083000": 93, "471000": 93, "fairli": 93, "induc": 93, "822198": 93, "lt": [93, 94, 102], "gt": [93, 94, 102], "496463": 93, "128963": 93, "110247": 93, "123222": 93, "012975": 93, "y4": [93, 94], "067741": 93, "106870": 93, "118715": 93, "011845": 93, "123178": 93, "479944": 93, "8142243": 93, "814224": 93, "fermionic_excitations_singlet": 93, "qubit_excitations_singlet": 93, "6000": 93, "0x16ac06990": 93, "0x7fa080330990": 93, "e_vals_singlet": 93, "e_coeffs_singlet": 93, "729": [93, 94], "91": 93, "871": 93, "768": 93, "273": 93, "903": 93, "476j": 93, "004": [93, 94], "008j": 93, "002": 93, "006j": 93, "018": [93, 94], "023j": 93, "002j": 93, "135j": 93, "368j": 93, "567": 93, "08j": 93, "806": 93, "333j": 93, "888": 93, "622j": 93, "223": 93, "734j": 93, "388": 93, "069j": 93, "606": 93, "105j": 93, "781": 93, "621": 93, "967j": 93, "663": 93, "86j": 93, "85": 93, "603j": 93, "164j": 93, "384": 93, "043j": 93, "061": 93, "055j": 93, "077": 93, "165j": 93, "671j": 93, "518j": 93, "644": 93, "722j": 93, "515j": 93, "559j": 93, "204j": 93, "131j": 93, "141j": 93, "197": [93, 94], "655j": 93, "879": 93, "241j": 93, "243": 93, "55j": 93, "338j": 93, "363": 93, "46j": 93, "117j": 93, "056j": 93, "007": [93, 94], "04j": 93, "098": 93, "106j": 93, "638": 93, "085j": 93, "395": 93, "104j": 93, "216j": 93, "329": 93, "704j": 93, "878": 93, "188j": 93, "018j": 93, "057": 93, "411j": 93, "287": [93, 101], "708j": 93, "636": 93, "126j": 93, "954j": 93, "e_vec": 93, "15565783977198872": 93, "47621487975804033j": 93, "3109942131939058": 93, "13521605338785778j": 93, "38839307178519544": 93, "0693114600174391j": 93, "003308852334800071": 93, "002955219215334559j": 93, "07692730809458342": 93, "1649068223822534j": 93, "16028553390102782": 93, "2040034257419802j": 93, "006135282730581221": 93, "003137920667681536j": 93, "09846811137359278": 93, "10620905658730515j": 93, "16993533787082993": 93, "01769895101511043j": 93, "003529209585032674": 93, "00795687921061023j": 93, "24049475157327982": 93, "36783111046288186j": 93, "6060191423196757": 93, "10482632989727117j": 93, "5763459636232429": 93, "16388842490954422j": 93, "0398193192980176": 93, "6711364842936922j": 93, "0799938237057527": 93, "1312076955513257j": 93, "11138656902183633": 93, "3380893725102996j": 93, "6378073443599778": 93, "08473450806257327j": 93, "057037317243711416": 93, "7995538108062838j": 93, "002165953897558483": 93, "005944635760931628j": 93, "5667818952627056": 93, "08033281708487372j": 93, "7806938566797863": 93, "008375225559272712j": 93, "38358059039903575": 93, "02164733189057025j": 93, "18951924122622935": 93, "5175643220754953j": 93, "39067878123749633": 93, "14105366840747063j": 93, "3633037576320181": 93, "45991596424530234j": 93, "3948958613818514": 93, "10360791672209882j": 93, "2025074399411661": 93, "41092059234737977j": 93, "017840047182897188": 93, "022744956740089296j": 93, "806126291783216": 93, "332658212611577j": 93, "621131902658994": 93, "9671995436795001j": 93, "05993966785070938": 93, "04310122860320857j": 93, "6441688080331356": 93, "7220627585285808j": 93, "1965755386805927": 93, "655483790470051j": 93, "1127899167896759": 93, "11659167840761259j": 93, "809508151433246": 93, "2160491220244634j": 93, "2874605040396814": 93, "7077883650219732j": 93, "0021294584990190677": 93, "01537836611697584j": 93, "8881021827827966": 93, "6217291428756166j": 93, "6634091829941275": 93, "85957877147374j": 93, "06072464916897717": 93, "025946744324903372j": 93, "6336871970371127": 93, "515156393240569j": 93, "8787624912303986": 93, "2406507977554675j": 93, "12020930798769339": 93, "055773317529686006j": 93, "3286485705307103": 93, "7035098710284213j": 93, "6355067063551598": 93, "126046236307394j": 93, "00020756753326981142": 93, "0016959811491862975j": 93, "22283094986115085": 93, "7342082125387235j": 93, "8502303263381792": 93, "6025252787670932j": 93, "004028844274401662": 93, "054943191515560284j": 93, "203599573643404": 93, "5592992892443864j": 93, "2427076382898403": 93, "550269786999596j": 93, "006964622239363893": 93, "040135082617393666j": 93, "878027835548134": 93, "18788450746501j": 93, "2403778890630868": 93, "953712459189611j": 93, "worth": 93, "_algorithm_qs": 93, "0x7fa0534b7850": 93, "todai": 94, "intent": [94, 107], "project_nam": 94, "get_or_cr": 94, "methylen": 94, "pvtz": 94, "cccbdb": 94, "nist": 94, "gov": 94, "1051320": 94, "9882630": 94, "3153960": 94, "105132": 94, "988263": 94, "315396": 94, "visualis": 94, "visualizer_nglview": 94, "driver_paramet": 94, "ll": [94, 101], "ccsd_energi": 94, "scf_energi": 94, "ccsd_correlation_energi": 94, "338090203517844": 94, "35882707387484": 94, "020736870356998338": 94, "destroi": 94, "132": 94, "disclud": 94, "107696": 94, "968197": 94, "030656": 94, "353000": 94, "024456": 94, "129": 94, "130": 94, "280721": 94, "131": 94, "271034": 94, "133": 94, "qubit_hamiltonian_jw": 94, "272826": 94, "462449": 94, "140360": 94, "243190": 94, "148791": 94, "135623": 94, "005837": 94, "176500": 94, "nexusconfig": 94, "nexusbackend": 94, "beings": 94, "aerstateconfig": 94, "gs_paramet": [94, 97, 98], "252666": 94, "9548447": 94, "954845": 94, "35882707384031": 94, "3732936553004727": 94, "004352090240814768": 94, "206496678468692e": 94, "8038857692025435e": 94, "tamplitud": 94, "tsymbol": 94, "_fermion_operator_expon": 94, "blueprint": 94, "quantinuumconfig": 94, "user_group": 94, "recognis": 94, "pauli_symmetri": 94, "flavour": 94, "facil": 94, "205": 94, "userwarn": 94, "__class__": 94, "__name__": 94, "0x7f15ab798400": 94, "sent": 94, "nexuscircuit": 94, "fde92d6f": 94, "5c54": 94, "45cd": 94, "85dd": 94, "8f13a1d131a6": 94, "submitted_tim": 94, "504778": 94, "project_id": 94, "f225abb6": 94, "e9b9": 94, "472a": 94, "92b6": 94, "32a6f066b796": 94, "phasedx": 94, "118823": 94, "11882": 94, "00139": 94, "resultshandl": 94, "results_handl": 94, "result_handl": 94, "723e324f": 94, "dfbc": 94, "458f": 94, "a459": 94, "5a26afa86ba3": 94, "1199879": 94, "1199880": 94, "1199881": 94, "1199882": 94, "1199883": 94, "1199884": 94, "retrieve_distribut": 94, "peak": 94, "728972": 94, "009978": 94, "4708": 94, "012744": 94, "014574": 94, "013": 94, "015": 94, "005788": 94, "014642": 94, "4665": 94, "995327": 94, "001407": 94, "9953": 94, "0014": [94, 98], "003215": 94, "014643": 94, "008321": 94, "014608": 94, "4687": 94, "635161": 94, "011283": 94, "635": 94, "005731": 94, "014571": 94, "4711": 94, "726045": 94, "010069": 94, "726": 94, "013169": 94, "024055": 94, "014653": 94, "024": 94, "4656": 94, "006580": 94, "013934": 94, "014641": 94, "022402": 94, "014605": 94, "027188": 94, "014570": 94, "027": 94, "996160": 94, "001279": 94, "9962": 94, "0013": [94, 98], "656549": 94, "010991": 94, "657": 94, "007429": 94, "996134": 94, "001288": 94, "9961": 94, "027613": 94, "001072": 94, "023986": 94, "014567": 94, "642182": 94, "011235": 94, "642": 94, "725998": 94, "010024": 94, "011381": 94, "014654": 94, "4657": 94, "007074": 94, "013746": 94, "014655": 94, "014175": 94, "634734": 94, "011288": 94, "729440": 94, "010025": 94, "28084": 94, "007503": 94, "019540": 94, "014652": 94, "020": 94, "018467": 94, "014569": 94, "energy_nexu": 94, "rel_error": 94, "abs_error": 94, "correlation_energy_nexu": 94, "ncorrel": 94, "nrel": 94, "nabsolut": 94, "35429920140337": 94, "016208997885527765": 94, "011803990847327247": 94, "004527872436938196": 94, "got": 94, "hcooh": 95, "formic": 95, "acid": 95, "extrem": [95, 98, 103], "underpin": 95, "heavili": 95, "implic": 95, "hydroxyl": 95, "442": 95, "467": 95, "171": 95, "389": 95, "475": 95, "609": 95, "initialis": 95, "localis": 95, "easiest": 95, "tabul": 95, "2px": 95, "2py": 95, "2pz": 95, "maskc": 95, "masko": 95, "maskh": 95, "186": 95, "3133843261542": 95, "838018023683446": 95, "02010563108580321": 95, "31338532077552": 95, "94": 95, "0792354083324": 95, "08915722473155974": 95, "29269508290238": 95, "2160386032347": 95, "07076155306002363": 95, "23216575139512": 95, "805406920135963": 95, "0029867861860997102": 95, "31396619851387": 95, "838989888576364": 95, "02031447102451711": 95, "31419656704125": 95, "07970951859829": 95, "08903855658763327": 95, "29359289137602": 95, "2164730973724": 95, "07064482022362206": 95, "23226272837852": 95, "8056839502775195": 95, "003066335733231451": 95, "02612234650225776": 95, "46609969955526": 95, "09129438992702": 95, "0746290356612791": 95, "52571212091078": 95, "20327799663269": 95, "058040637289320074": 95, "5276081958555": 95, "32803927464596": 95, "040673660105291276": 95, "257768804615": 95, "8776501902494407": 95, "023767280142849456": 95, "02618319569959706": 95, "46645711275949": 95, "09188298091058": 95, "07475597327711014": 95, "52620767713418": 95, "20356742637946": 95, "057967869180012954": 95, "52815629410907": 95, "3282967036755": 95, "040604508735016864": 95, "25782907787828": 95, "877818167978056": 95, "023815682209885614": 95, "02618333425876638": 95, "4664579266309": 95, "091884321178526": 95, "07475626232527333": 95, "526208805566": 95, "20356808544014": 95, "0579677034788304": 95, "5281575421823": 95, "32829728986282": 95, "040604351270625116": 95, "25782921512942": 95, "8778185504671097": 95, "023815792422921755": 95, "026183334259008127": 95, "53116435311918": 95, "37687192609553": 95, "40300888507954": 95, "defeat": 95, "encourag": 95, "lone": 95, "introductori": 96, "lo": 96, "alamo": 96, "nation": 96, "laboratori": 96, "fe": [96, 97, 98], "augment": 96, "hessian": 96, "ciah": 96, "27291543": 96, "18421072": 96, "99978567": 96, "35922190": 96, "45608027": 96, "52389493": 96, "97901234": 96, "08834609": 96, "07468517": 96, "30675371": 96, "72527495": 96, "22446007": 96, "32881018": 96, "05991762": 96, "18585483": 96, "42975492": 96, "03128398": 96, "58960981": 96, "598": [96, 97, 98], "4585979826212": 96, "fe4n2_geom": 96, "autom": [96, 105], "concret": 96, "emerg": 96, "kohn": 96, "sham": 96, "manifold": 96, "dinitrogen": 96, "upcom": 96, "ao_pattern": 96, "ao_pattern_vir": 96, "driver_ava": 96, "tend": 96, "computation": [96, 99], "intens": 96, "prudent": 96, "beforehand": 96, "orbital_cub": 96, "fermi": 96, "strike": [96, 99], "balanc": [96, 99, 103], "demand": 96, "decid": [96, 97], "ninth": 96, "scenario": 96, "placement": 96, "nitrogen": [96, 98, 108], "overli": 96, "characterist": 96, "final_driv": 96, "914712803952": 96, "104825407199": 96, "062352931909": 96, "064802648989": 96, "079517324335": 96, "106321121654": 96, "067923844746": 96, "041190009139": 96, "325296714499": 96, "067452471968": 96, "orbital_cubes_fin": 96, "orbitals_fin": 96, "inq_tut_fe4n2_spac": [96, 97, 98], "inq_tut_fe4n2_st": [96, 97, 98], "inq_tut_fe4n2_qubit_hamiltonian": [96, 97, 98], "foundat": 97, "laid": 97, "proceed": [97, 98], "thorough": 97, "understand": [97, 98], "adjust": 97, "investig": [97, 99], "stricter": 97, "adaptvq": 97, "prematur": 97, "comment": 97, "uncom": 97, "exponent_pool": 97, "construct_generalised_single_ucc_oper": 97, "construct_generalised_pair_double_ucc_oper": 97, "dictat": 97, "assess": [97, 103], "magic": 97, "command": 97, "contextlib": 97, "redirect_stdout": 97, "redirect_stderr": 97, "adapt_protocol": 97, "555458565495": 97, "exponents_with_symbol": [97, 98], "07710267528565536": 97, "0018869565337611026": 97, "001981770447813303": 97, "d3": 97, "3163768160454625": 97, "0032754295419417136": 97, "0032218165050814794": 97, "009271065107960087": 97, "inq_tut_fe4n2_gs_paramet": [97, 98], "inq_tut_fe4n2_exponents_with_symbol": [97, 98], "conclud": 97, "contributor": 97, "conclus": 98, "neither": 98, "nor": 98, "_3": 98, "credentail": 98, "longest": 98, "wire": 98, "concis": [98, 99], "diagnost": [98, 102], "batch": 98, "accommod": 98, "monopol": 98, "accident": 98, "set_shots_10k": 98, "60000": 98, "70000": 98, "80000": 98, "90000": 98, "100000": 98, "handles_": 98, "std_dev": 98, "emulator_energies_10k": 98, "emulator_10k": 98, "eval": 98, "meas_circ": 98, "2qb": 98, "cz": 98, "repetit": [98, 102], "20k": 98, "30k": 98, "forth": 98, "meanwhil": 98, "emulator_10k_mean": 98, "emulator_10k_std": 98, "reiter": 98, "5k": 98, "set_shots_5k": 98, "15000": 98, "25000": 98, "35000": 98, "45000": 98, "emulator_5k_mean": 98, "5233976942287": 98, "528748007567": 98, "5254365672856": 98, "5266267836435": 98, "5252272612659": 98, "5241590945266": 98, "5255975795899": 98, "525113940237": 98, "5249076903503": 98, "5239581110884": 98, "emulator_5k_std": 98, "0016": 98, "0015": 98, "0012": 98, "0010": 98, "00095": 98, "0009": 98, "4k": 98, "set_shots_4k": 98, "4000": 98, "12000": 98, "16000": 98, "24000": 98, "28000": 98, "32000": 98, "36000": 98, "emulator_4k_mean": 98, "5261956279538": 98, "5239748592571": 98, "5250271719032": 98, "5236355685819": 98, "5232948710519": 98, "5243534836842": 98, "5244650328887": 98, "5251092284366": 98, "524141170795": 98, "5235882519817": 98, "emulator_4k_std": 98, "00163": 98, "00154": 98, "00115": 98, "set_shots_2_5k": 98, "2500": 98, "7500": 98, "12500": 98, "17500": 98, "22500": 98, "emulator_2_5k_mean": 98, "5386462829877": 98, "528495041739": 98, "5223780085176": 98, "5221927569415": 98, "5220793440851": 98, "522950988168": 98, "5245581694165": 98, "5236303692766": 98, "5243398619134": 98, "5237327682132": 98, "emulator_2_5k_std": 98, "0017": 98, "00165": 98, "00145": 98, "00135": 98, "seaborn": 98, "sn": 98, "set_styl": 98, "whitegrid": 98, "emulator_5k": 98, "emulator_4k": 98, "teal": 98, "emulator_2": 98, "orang": 98, "xtick": 98, "fontsiz": 98, "ytick": 98, "y_error_10k": 98, "y_error_5k": 98, "y_error_4k": 98, "y_error_2_5k": 98, "errorbar": 98, "yerr": 98, "fmt": 98, "elinewidth": 98, "capsiz": 98, "0x7fe543b92b00": 98, "n_2": 98, "agreement": 98, "04681999999991149": 98, "021029999999996107": 98, "06232999999997446": 98, "018699999999967076": 98, "scatter": 98, "y_error_hard": 98, "00196006200237305": 98, "00171393177265877": 98, "000768517902650537": 98, "y_error_em": 98, "00222116960181585": 98, "000835916404261285": 98, "000489635318758811": 98, "neb": 98, "xlim": 98, "my_xtick": 98, "simplic": [99, 103], "flowchart": 99, "integrand": 99, "\u03b1": 99, "prove": 99, "encompass": [99, 104], "864996327400373": 99, "chemistry_hamiltonian": [99, 102], "536138": 99, "7253677": 99, "725368": 99, "pdm_comput": [99, 105], "dm1": [99, 105], "dm2": [99, 105], "8887816123799": 99, "619242253080383": 99, "nevpt2_energy_casscf": 99, "00000000004640": 99, "00001592193229": 99, "00022778538990": 99, "00007024590388": 99, "00023752957888": 99, "00127421307471": 99, "00002667508289": 99, "00013326100338": 99, "001985632012336": 99, "ac0_energy_casscf": 99, "888709": 99, "023713": 99, "002058": 99, "890767": 99, "001986": 99, "890695": 99, "003046": 99, "891755": 99, "002515": 99, "891224": 99, "markdown": 100, "presav": 100, "higgot": 101, "sum_j": 101, "c_j": 101, "lambda_k": 101, "beta_i": 101, "lambda_0": 101, "thing": [101, 102], "live": 101, "743018": [101, 102], "270293": [101, 102], "340031": 101, "089834": 101, "334289": 101, "456807": [101, 102], "351407": 101, "1354204303965678": 101, "538": 101, "699": 101, "344": 101, "019181": 101, "5561742": 101, "556174": 101, "1362742647122501": 101, "2743980113229634": 101, "5285088891726624": 101, "25092345551714446": 101, "723013170234864": 101, "280709359512106": 101, "27582421563977055": 101, "4949467734066755": 101, "11981345040527547": 101, "5478565335949009": 101, "4245489791891053": 101, "1903272701505222": 101, "5363906053958265": 101, "_l": 102, "subdivid": 102, "steer": 102, "worri": 102, "hartree_fock_st": 102, "hartree_fock_energi": [102, 103], "1175058842043315": 102, "fermionic_hamiltonian": [102, 103], "AS": 102, "2702927243904383": 102, "4568073503094105": 102, "48890859745047294": 102, "6685772770134886": 102, "17966867956301574": 102, "1796686795630156": 102, "7028135332762779": 102, "680062": 102, "179669": 102, "488909": 102, "668577": 102, "702814": 102, "THE": 102, "undesir": 102, "num_electron": 102, "num_spin_orbit": 102, "gather": 102, "059620582760347596": 102, "1757594291831968": 102, "1757594291831967": 102, "17001546439603182": 102, "1671443192533722": 102, "044917169890753894": 102, "23667117678035554": 102, "12222714936261832": 102, "23667117678035543": 102, "1757033833190701": 102, "alon": 102, "ansatz_commuting_block": 102, "faith": 102, "nvqe": 102, "486816": 102, "1051996": 102, "105200": 102, "1368": 102, "1175": 102, "fockspaceansatzuccgd": 102, "laptop": 103, "hydrogen_vqe_energi": 103, "741": 103, "387681": 103, "1024388": 103, "102439": 103, "1372744055294368": 103, "1167061372361056": 103, "h2_bond_length": 103, "h2_result": 103, "516722": 103, "1263202": 103, "126320": 103, "660937": 103, "0957963": 103, "095796": 103, "774026": 103, "0900062": 103, "090006": 103, "881539": 103, "0899459": 103, "089946": 103, "989165": 103, "0870455": 103, "087045": 103, "093389": 103, "1026133": 103, "102613": 103, "217503": 103, "0936890": 103, "093689": 103, "328489": 103, "0886705": 103, "088671": 103, "434608": 103, "0876303": 103, "087630": 103, "539554": 103, "0860837": 103, "086084": 103, "643547": 103, "0866043": 103, "086604": 103, "747837": 103, "0848817": 103, "084882": 103, "850098": 103, "0854067": 103, "085407": 103, "952653": 103, "0870666": 103, "087067": 103, "058093": 103, "0925660": 103, "092566": 103, "169151": 103, "0846613": 103, "084661": 103, "271012": 103, "0849042": 103, "084904": 103, "374293": 103, "0841311": 103, "084131": 103, "474812": 103, "0838539": 103, "083854": 103, "575913": 103, "0837162": 103, "083716": 103, "9141497046270834": 103, "9043613941635402": 103, "0396441933684193": 103, "0278952240485912": 103, "102723451217337": 103, "0885821110334761": 103, "1303984654811363": 103, "1133931546411704": 103, "1373027360323484": 103, "1169158055488673": 103, "1320031440770355": 103, "107658602337548": 103, "1196476526566383": 103, "0906923776852": 103, "103357320131611": 103, "0690432214496193": 103, "085088560549943": 103, "0445649211858916": 103, "0661536707290789": 103, "0184750668009022": 103, "0474923241943452": 103, "9916426659510074": 103, "0297900705318146": 103, "9647203151980037": 103, "0135255910407293": 103, "9382014307919537": 103, "9989959202496171": 103, "9124510069368061": 103, "9863403143934901": 103, "8877296363816175": 103, "9755678355211708": 103, "8642149983652554": 103, "9665878877681976": 103, "8420201240601859": 103, "9592413973101772": 103, "8212077601664912": 103, "953330033975642": 103, "8018012103709646": 103, "9486411121756362": 103, "7837926542773532": 103, "curv": 103, "h2_vqe_result": 103, "h2_hf_result": 103, "0x14d890490": 103, "water_bending_vqe_energi": 103, "x_h2": 103, "360": 103, "x_h1": 103, "y_h1": 103, "y_h2": 103, "031413": 103, "9251390": 103, "925139": 103, "01966834467402": 103, "74": 103, "96466253913081": 103, "minut": 103, "ask": 103, "roughli": 103, "h2o_bond_angl": 103, "h2o_bending_result": 103, "209756": 103, "1244008": 103, "124401": 103, "584561": 103, "3592692": 103, "359269": 103, "196833": 103, "5988085": 103, "598809": 103, "051584": 103, "6882947": 103, "688295": 103, "000201": 103, "5837241": 103, "583724": 103, "840415": 103, "2890410": 103, "289041": 103, "384321": 103, "2213630": 103, "221363": 103, "860683": 103, "9819929": 103, "981993": 103, "097516": 103, "5509953": 103, "550995": 103, "894670": 103, "8023447": 103, "802345": 103, "h2o_angle_vqe_result": 103, "h2o_angle_hf_result": 103, "hoh": 103, "0x14f932090": 103, "detriment": 103, "tradeoff": 103, "shorter": 103, "directori": 103, "unphys": 103, "consequenti": 103, "water_stretching_vqe_energi": 103, "907195": 103, "9264397": 103, "926440": 103, "01969733754345": 103, "96468314023913": 103, "h2o_bond_length": 103, "h2o_stretching_result": 103, "972942": 103, "8683482": 103, "868348": 103, "972439": 103, "9162048": 103, "916205": 103, "021266": 103, "1032581": 103, "103258": 103, "256649": 103, "3349239": 103, "334924": 103, "724597": 103, "0443827": 103, "044383": 103, "903892": 103, "2326116": 103, "232612": 103, "269669": 103, "8213116": 103, "821312": 103, "227220": 103, "5665152": 103, "566515": 103, "929382": 103, "8237549": 103, "823755": 103, "902077": 103, "4317444": 103, "431744": 103, "h2o_lengths_vqe_result": 103, "h2o_lengths_hf_result": 103, "0x14ee5c5d0": 103, "driver_with_symmetri": 103, "driver_without_symmetri": 103, "fermionic_hamiltonian_with_symmetri": 103, "fock_space_with_symmetri": 103, "fock_state_with_symmetri": 103, "fermionic_hamiltonian_without_symmetri": 103, "fock_space_without_symmetri": 103, "fock_state_without_symmetri": 103, "ansatz_with_symmetri": 103, "ansatz_without_symmetri": 103, "ourselv": 103, "WITH": 103, "1629": 103, "3684": 103, "1888": 103, "1796": 103, "5553": 103, "12616": 103, "6976": 103, "5640": 103, "manbi": [104, 105], "promin": 104, "scienc": 104, "readili": 104, "wf": [104, 105, 108], "widetild": 104, "_6": [104, 105], "664929641": 104, "141563265": 104, "923341000": 104, "237750972": 104, "937392259": 104, "200000000": 104, "c2h6_geom": 104, "21g": [104, 105], "09515037810829": 104, "chem_hamiltonian": [104, 105], "290834": 104, "0049755": 104, "004976": 104, "1521025762552": 104, "did": 105, "ethanol": 105, "undersand": 105, "consult": 105, "sayfutyarova": 105, "fe4n2": 105, "1867": 105, "2472": 105, "9237": 105, "3850": 105, "0227": 105, "8852": 105, "5526": 105, "1879": 105, "3829": 105, "0985": 105, "1184": 105, "0093": 105, "8869": 105, "3p": 105, "encapsul": 105, "casscf_transform": 105, "_transf": 105, "driver_embed": 105, "qubit_hamiltonian_hermitian": 105, "383906": 105, "3656648": 105, "365665": 105, "slight": 105, "76095170040134": 105, "760952": 105, "754820": 105, "004566": 105, "759386": 105, "004791": 105, "759611": 105, "quatinuum": 106, "browser": [106, 108], "plan": 106, "aw": 106, "algorithm_iqeb": 107, "algorithm_adapt": 107, "algorithm_fermionic_adapt": 107, "algorithm_qs": 107, "vqs_real_example_paper_phas": 107, "time_evolution_exampl": 107, "vqs_imag_exampl": 107, "imtime_evolution_exampl": 107, "vqs_real_exampl": 107, "vqs_real_example_pap": 107, "algorithm_vqd": 107, "algorithm_vqe_hea": 107, "algorithm_vqe_shots_minim": 107, "multiconfigstate_6qubit": 107, "multiconfigstate_4qubit": 107, "multiconfig_with_symbol": 107, "multiconfigstatebox_6qubit": 107, "fermion_space_ansatz": 107, "layered_hea": 107, "multiconfigstatebox_4qubit": 107, "bootstrapping_comput": 107, "computable_protocol_tutori": 107, "bootstrapping_simpl": 107, "bootstrappi": 107, "bootstrapping_vs_uvalu": 107, "backendresultsbootstrap": 107, "computable_h2": 107, "using_protocol_list": 107, "expval_pauli": 107, "computable_h2_symbolic_deriv": 107, "expval_noisy_backend": 107, "derivatives_method": 107, "computable_overlap_squar": 107, "finite_differ": 107, "expval_symbol": 107, "qse_matric": 107, "overlap_matrix": 107, "qcm4_comput": 107, "qcm4": 107, "nonorthogonal_matric": 107, "gf_measurenorm_element_shots_1": 107, "krylov_": 107, "gf_measurenorm_matrix_mbgf_spectr": 107, "spectral": 107, "gf_measurenorm_el": 107, "sandwich": 107, "krylov_2": 107, "gf_measurenorm_matrix_mbgf": 107, "frequenc": 107, "gf_measurenorm_matrix_mbgf_circuit": 107, "krylov_1": 107, "gf_measurenorm_element_shots_2": 107, "gf_measurenorm_matrix_mbgf_spectral_shot": 107, "krylov_3": 107, "krylov_0": 107, "krylov_4": 107, "rdm_nevpt2": 107, "basic_primit": 107, "context_print": 107, "dmet_one_h2x3_express_vq": 107, "dmet_full_h2x3_express_hf": 107, "impurity_dmet_h2x3_express_vq": 107, "dmet_one_h2x3_express_hf": 107, "get_started_express": 107, "h5_oper": 107, "mapping_bk": 107, "mapping_paraparticular": 107, "mapping_jw": 107, "orbital_transform": 107, "double_factorization_lih_sv": 107, "double_factorization_h2": 107, "orbital_optim": 107, "pipek": 107, "mezei": 107, "chemistry_integral_oper": 107, "crio": 107, "qermit_spam_zn": 107, "hadamard_direct_df_grad_expr": 107, "hadamard_df_grad_hea": 107, "feature_observable_averag": 107, "pauli_hadamard_protocol": 107, "expval_pmsv": 107, "hadamard_df_grad_expr": 107, "expval_spam": 107, "factorized_overlap": 107, "feature_projective_measur": 107, "hadamard_test_overlap": 107, "expval_mitigation_method": 107, "bootstrapping_expv": 107, "overlap_squared_protocol": 107, "feature_partition_strategi": 107, "feature_credits_cost": 107, "hadamard_test_iqpe_statevector": 107, "ipea": 107, "hadamard_test_iqpe_quantinuum": 107, "hadamard_test_iqp": 107, "parafermion_spac": 107, "fermionic_symmetry_oper": 107, "qubit_tap": 107, "ansatza": 107, "qubit_symmetry_oper": 107, "download": 108, "click": 108, "viewabl": 108, "isn": 108, "role": 108, "pyktet": 108, "async": 108, "sytem": 108, "inq_tut_fe4n2_pickl": 108, "tar": 108, "theses": 108}, "objects": {"inquanto.algorithms.adapt": [[6, 0, 1, "", "AlgorithmAdaptVQE"], [6, 0, 1, "", "AlgorithmFermionicAdaptVQE"], [6, 0, 1, "", "AlgorithmIQEB"]], "inquanto.algorithms.adapt.AlgorithmAdaptVQE": [[6, 1, 1, "", "build"], [6, 2, 1, "", "final_parameters"], [6, 1, 1, "", "generate_report"], [6, 1, 1, "", "generate_report_params"], [6, 1, 1, "", "run"]], "inquanto.algorithms.adapt.AlgorithmFermionicAdaptVQE": [[6, 1, 1, "", "build"], [6, 2, 1, "", "final_parameters"], [6, 1, 1, "", "generate_report"], [6, 1, 1, "", "generate_report_params"], [6, 1, 1, "", "get_ansatz"], [6, 1, 1, "", "get_exponents_with_symbols"], [6, 1, 1, "", "run"]], "inquanto.algorithms.adapt.AlgorithmIQEB": [[6, 1, 1, "", "build"], [6, 2, 1, "", "final_parameters"], [6, 1, 1, "", "generate_report"], [6, 1, 1, "", "generate_report_params"], [6, 1, 1, "", "run"]], "inquanto.algorithms.phase_estimation": [[6, 0, 1, "", "AlgorithmDeterministicQPE"], [6, 0, 1, "", "AlgorithmInfoTheoryQPE"], [6, 0, 1, "", "AlgorithmKitaevQPE"]], "inquanto.algorithms.phase_estimation.AlgorithmDeterministicQPE": [[6, 1, 1, "", "build"], [6, 1, 1, "", "final_energy"], [6, 1, 1, "", "final_phase"], [6, 1, 1, "", "generate_report"], [6, 1, 1, "", "launch_experiment"], [6, 1, 1, "", "retrieve_experiment"], [6, 1, 1, "", "run"], [6, 1, 1, "", "run_experiment"]], "inquanto.algorithms.phase_estimation.AlgorithmInfoTheoryQPE": [[6, 1, 1, "", "build"], [6, 1, 1, "", "final_pdf"], [6, 1, 1, "", "final_value"], [6, 1, 1, "", "join"], [6, 1, 1, "", "run"], [6, 1, 1, "", "run_async"]], "inquanto.algorithms.phase_estimation.AlgorithmKitaevQPE": [[6, 1, 1, "", "build"], [6, 1, 1, "", "final_value"], [6, 1, 1, "", "join"], [6, 1, 1, "", "run"], [6, 1, 1, "", "run_async"]], "inquanto.algorithms.qse": [[6, 0, 1, "", "AlgorithmQSE"]], "inquanto.algorithms.qse.AlgorithmQSE": [[6, 1, 1, "", "build"], [6, 2, 1, "", "final_states"], [6, 2, 1, "", "final_values"], [6, 1, 1, "", "generate_report"], [6, 1, 1, "", "run"]], "inquanto.algorithms.sceom": [[6, 0, 1, "", "AlgorithmSCEOM"]], "inquanto.algorithms.sceom.AlgorithmSCEOM": [[6, 1, 1, "", "build"], [6, 2, 1, "", "final_states"], [6, 2, 1, "", "final_values"], [6, 1, 1, "", "generate_report"], [6, 1, 1, "", "get_dataframe_sceom_analysis"], [6, 1, 1, "", "print_sceom_states"], [6, 1, 1, "", "run"]], "inquanto.algorithms.time_evolution": [[6, 0, 1, "", "AlgorithmMcLachlanImagTime"], [6, 0, 1, "", "AlgorithmMcLachlanRealTime"], [6, 0, 1, "", "AlgorithmVQS"]], "inquanto.algorithms.time_evolution.AlgorithmMcLachlanImagTime": [[6, 1, 1, "", "build"], [6, 2, 1, "", "final_parameters"], [6, 1, 1, "", "final_propagation_evaluation"], [6, 1, 1, "", "post_propagation_evaluation"], [6, 1, 1, "", "run"]], "inquanto.algorithms.time_evolution.AlgorithmMcLachlanRealTime": [[6, 1, 1, "", "build"], [6, 2, 1, "", "final_parameters"], [6, 1, 1, "", "final_propagation_evaluation"], [6, 1, 1, "", "post_propagation_evaluation"], [6, 1, 1, "", "run"]], "inquanto.algorithms.time_evolution.AlgorithmVQS": [[6, 1, 1, "", "build"], [6, 2, 1, "", "final_parameters"], [6, 1, 1, "", "final_propagation_evaluation"], [6, 1, 1, "", "post_propagation_evaluation"], [6, 1, 1, "", "run"]], "inquanto.algorithms.vqd": [[6, 0, 1, "", "AlgorithmVQD"]], "inquanto.algorithms.vqd.AlgorithmVQD": [[6, 1, 1, "", "build"], [6, 2, 1, "", "final_parameters"], [6, 2, 1, "", "final_values"], [6, 1, 1, "", "from_array"], [6, 1, 1, "", "generate_report"], [6, 1, 1, "", "run"]], "inquanto.algorithms.vqe": [[6, 0, 1, "", "AlgorithmVQE"]], "inquanto.algorithms.vqe.AlgorithmVQE": [[6, 1, 1, "", "build"], [6, 2, 1, "", "final_evaluated_auxiliary_expression"], [6, 2, 1, "", "final_evaluated_objective_expression"], [6, 2, 1, "", "final_parameters"], [6, 2, 1, "", "final_value"], [6, 1, 1, "", "generate_report"], [6, 1, 1, "", "generate_report_params"], [6, 1, 1, "", "run"]], "inquanto.ansatzes": [[7, 0, 1, "", "CircuitAnsatz"], [7, 0, 1, "", "ComposedAnsatz"], [7, 0, 1, "", "FermionSpaceAnsatzChemicallyAwareUCCSD"], [7, 0, 1, "", "FermionSpaceAnsatzUCCD"], [7, 0, 1, "", "FermionSpaceAnsatzUCCGD"], [7, 0, 1, "", "FermionSpaceAnsatzUCCGSD"], [7, 0, 1, "", "FermionSpaceAnsatzUCCSD"], [7, 0, 1, "", "FermionSpaceAnsatzUCCSDSinglet"], [7, 0, 1, "", "FermionSpaceAnsatzkUpCCGD"], [7, 0, 1, "", "FermionSpaceAnsatzkUpCCGSD"], [7, 0, 1, "", "FermionSpaceAnsatzkUpCCGSDSinglet"], [7, 0, 1, "", "FermionSpaceStateExp"], [7, 0, 1, "", "FermionSpaceStateExpChemicallyAware"], [7, 0, 1, "", "GeneralAnsatz"], [7, 0, 1, "", "HamiltonianVariationalAnsatz"], [7, 0, 1, "", "HardwareEfficientAnsatz"], [7, 0, 1, "", "LayeredAnsatz"], [7, 0, 1, "", "MultiConfigurationAnsatz"], [7, 0, 1, "", "MultiConfigurationState"], [7, 0, 1, "", "MultiConfigurationStateBox"], [7, 0, 1, "", "RealGeneralizedBasisRotationAnsatz"], [7, 0, 1, "", "RealRestrictedBasisRotationAnsatz"], [7, 0, 1, "", "RealUnrestrictedBasisRotationAnsatz"], [7, 0, 1, "", "TrotterAnsatz"], [7, 3, 1, "", "generalized_basis_rotation_to_circuit"], [7, 3, 1, "", "reference_circuit_builder"], [7, 3, 1, "", "restricted_basis_rotation_to_circuit"], [7, 3, 1, "", "rotate_ansatz_restricted"], [7, 3, 1, "", "unrestricted_basis_rotation_to_circuit"]], "inquanto.ansatzes.CircuitAnsatz": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.ComposedAnsatz": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 2, 1, "", "fermion_operator_exponents"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.FermionSpaceAnsatzUCCD": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 2, 1, "", "exponents"], [7, 2, 1, "", "fermion_operator_exponents"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "to_QubitState_direct"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.FermionSpaceAnsatzUCCGD": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 2, 1, "", "exponents"], [7, 2, 1, "", "fermion_operator_exponents"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "to_QubitState_direct"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 2, 1, "", "exponents"], [7, 2, 1, "", "fermion_operator_exponents"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "to_QubitState_direct"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.FermionSpaceAnsatzUCCSD": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 2, 1, "", "exponents"], [7, 2, 1, "", "fermion_operator_exponents"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "to_QubitState_direct"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 2, 1, "", "exponents"], [7, 2, 1, "", "fermion_operator_exponents"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "to_QubitState_direct"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 2, 1, "", "exponents"], [7, 2, 1, "", "fermion_operator_exponents"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "to_QubitState_direct"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 2, 1, "", "exponents"], [7, 2, 1, "", "fermion_operator_exponents"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "to_QubitState_direct"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 2, 1, "", "exponents"], [7, 2, 1, "", "fermion_operator_exponents"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "to_QubitState_direct"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.FermionSpaceStateExp": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 2, 1, "", "exponents"], [7, 2, 1, "", "fermion_operator_exponents"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "to_QubitState_direct"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 2, 1, "", "fermion_operator_exponents"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.GeneralAnsatz": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.HamiltonianVariationalAnsatz": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 2, 1, "", "exponents"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "split_hamiltonian"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "to_QubitState_direct"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.HardwareEfficientAnsatz": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.LayeredAnsatz": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.MultiConfigurationAnsatz": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.MultiConfigurationState": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.MultiConfigurationStateBox": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz": [[7, 1, 1, "", "ansatz_parameters_from_unitary"], [7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz": [[7, 1, 1, "", "ansatz_parameters_from_unitary"], [7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz": [[7, 1, 1, "", "ansatz_parameters_from_unitary"], [7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "unsympify"]], "inquanto.ansatzes.TrotterAnsatz": [[7, 1, 1, "", "circuit_resources"], [7, 1, 1, "", "clone"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "default_pass"], [7, 1, 1, "", "df_numeric"], [7, 1, 1, "", "df_symbolic"], [7, 2, 1, "", "exponents"], [7, 1, 1, "", "free_symbols"], [7, 1, 1, "", "free_symbols_ordered"], [7, 1, 1, "", "generate_report"], [7, 1, 1, "", "get_circuit"], [7, 1, 1, "", "get_circuit_no_ref"], [7, 1, 1, "", "get_numeric_representation"], [7, 1, 1, "", "get_symbolic_representation"], [7, 1, 1, "", "make_hashable"], [7, 2, 1, "", "n_qubits"], [7, 2, 1, "", "n_symbols"], [7, 1, 1, "", "reference_qubit_state"], [7, 1, 1, "", "reset_reference"], [7, 2, 1, "", "state_circuit"], [7, 2, 1, "", "state_symbols"], [7, 1, 1, "", "subs"], [7, 1, 1, "", "symbol_substitution"], [7, 1, 1, "", "to_CircuitAnsatz"], [7, 1, 1, "", "to_QubitState"], [7, 1, 1, "", "to_QubitState_direct"], [7, 1, 1, "", "unsympify"]], "inquanto.computables": [[8, 4, 0, "-", "atomic"], [8, 4, 0, "-", "composite"], [8, 4, 0, "-", "primitive"]], "inquanto.computables.atomic": [[8, 0, 1, "", "ExpectationValue"], [8, 0, 1, "", "ExpectationValueBraDerivative"], [8, 0, 1, "", "ExpectationValueBraDerivativeImag"], [8, 0, 1, "", "ExpectationValueBraDerivativeReal"], [8, 0, 1, "", "ExpectationValueDerivative"], [8, 0, 1, "", "ExpectationValueKetDerivative"], [8, 0, 1, "", "ExpectationValueKetDerivativeImag"], [8, 0, 1, "", "ExpectationValueKetDerivativeReal"], [8, 0, 1, "", "ExpectationValueNonHermitian"], [8, 0, 1, "", "MetricTensorImag"], [8, 0, 1, "", "MetricTensorReal"], [8, 0, 1, "", "Overlap"], [8, 0, 1, "", "OverlapImag"], [8, 0, 1, "", "OverlapReal"], [8, 0, 1, "", "OverlapSquared"]], "inquanto.computables.atomic.ExpectationValue": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "evaluate_mean"], [8, 1, 1, "", "evaluate_median"], [8, 1, 1, "", "evaluate_std"], [8, 1, 1, "", "evaluate_var"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "kernel"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 5, 1, "", "state"], [8, 1, 1, "", "walk"]], "inquanto.computables.atomic.ExpectationValueBraDerivative": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "kernel"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 5, 1, "", "state"], [8, 5, 1, "", "symbols"], [8, 1, 1, "", "walk"]], "inquanto.computables.atomic.ExpectationValueBraDerivativeImag": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "kernel"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 5, 1, "", "state"], [8, 5, 1, "", "symbols"], [8, 1, 1, "", "walk"]], "inquanto.computables.atomic.ExpectationValueBraDerivativeReal": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "kernel"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 5, 1, "", "state"], [8, 5, 1, "", "symbols"], [8, 1, 1, "", "walk"]], "inquanto.computables.atomic.ExpectationValueDerivative": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "kernel"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 5, 1, "", "state"], [8, 5, 1, "", "symbols"], [8, 1, 1, "", "walk"]], "inquanto.computables.atomic.ExpectationValueKetDerivative": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "kernel"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 5, 1, "", "state"], [8, 5, 1, "", "symbols"], [8, 1, 1, "", "walk"]], "inquanto.computables.atomic.ExpectationValueKetDerivativeImag": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "kernel"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 5, 1, "", "state"], [8, 5, 1, "", "symbols"], [8, 1, 1, "", "walk"]], "inquanto.computables.atomic.ExpectationValueKetDerivativeReal": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "kernel"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 5, 1, "", "state"], [8, 5, 1, "", "symbols"], [8, 1, 1, "", "walk"]], "inquanto.computables.atomic.ExpectationValueNonHermitian": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "evaluate_mean"], [8, 1, 1, "", "evaluate_median"], [8, 1, 1, "", "evaluate_std"], [8, 1, 1, "", "evaluate_var"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "kernel"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 5, 1, "", "state"], [8, 1, 1, "", "walk"]], "inquanto.computables.atomic.MetricTensorImag": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 5, 1, "", "state"], [8, 5, 1, "", "symbols"], [8, 1, 1, "", "walk"]], "inquanto.computables.atomic.MetricTensorReal": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 5, 1, "", "state"], [8, 5, 1, "", "symbols"], [8, 1, 1, "", "walk"]], "inquanto.computables.atomic.Overlap": [[8, 1, 1, "", "add_label"], [8, 5, 1, "", "bra_state"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "kernel"], [8, 5, 1, "", "ket_state"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.atomic.OverlapImag": [[8, 1, 1, "", "add_label"], [8, 5, 1, "", "bra_state"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "kernel"], [8, 5, 1, "", "ket_state"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.atomic.OverlapReal": [[8, 1, 1, "", "add_label"], [8, 5, 1, "", "bra_state"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "kernel"], [8, 5, 1, "", "ket_state"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.atomic.OverlapSquared": [[8, 1, 1, "", "add_label"], [8, 5, 1, "", "bra_state"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "kernel"], [8, 5, 1, "", "ket_state"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite": [[8, 0, 1, "", "CommutatorComputable"], [8, 0, 1, "", "ExpectationValueSumComputable"], [8, 0, 1, "", "HoleGFComputable"], [8, 0, 1, "", "KrylovSubspace"], [8, 0, 1, "", "KrylovSubspaceComputable"], [8, 0, 1, "", "LanczosCoefficientsComputable"], [8, 0, 1, "", "LanczosMatrixComputable"], [8, 0, 1, "", "ManyBodyGFComputable"], [8, 0, 1, "", "NonOrthogonalMatricesComputable"], [8, 0, 1, "", "OverlapMatrixComputable"], [8, 0, 1, "", "PDM1234RealComputable"], [8, 0, 1, "", "ParticleGFComputable"], [8, 0, 1, "", "QCM4Computable"], [8, 0, 1, "", "QSEMatricesComputable"], [8, 0, 1, "", "RDM1234RealComputable"], [8, 0, 1, "", "RestrictedOneBodyRDMComputable"], [8, 0, 1, "", "RestrictedOneBodyRDMRealComputable"], [8, 0, 1, "", "SCEOMMatrixComputable"], [8, 0, 1, "", "SpinlessNBodyPDMArrayRealComputable"], [8, 0, 1, "", "SpinlessNBodyRDMArrayRealComputable"], [8, 0, 1, "", "UnrestrictedOneBodyRDMComputable"], [8, 0, 1, "", "UnrestrictedOneBodyRDMRealComputable"]], "inquanto.computables.composite.CommutatorComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.ExpectationValueSumComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.HoleGFComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.KrylovSubspace": [[8, 1, 1, "", "alpha_f"], [8, 1, 1, "", "beta_f"], [8, 1, 1, "", "construct_symbolic_recursive_gf"], [8, 1, 1, "", "construct_symbolic_recursive_gf_h"], [8, 1, 1, "", "construct_symbolic_recursive_gf_p"], [8, 1, 1, "", "construct_symbolic_recursive_lanczos_gf00"], [8, 1, 1, "", "construct_tridiagonal_representation"], [8, 1, 1, "", "eigenvalues"], [8, 1, 1, "", "factors"], [8, 1, 1, "", "lowest_eigenvalue"], [8, 1, 1, "", "moments"]], "inquanto.computables.composite.KrylovSubspaceComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.LanczosCoefficientsComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.LanczosMatrixComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.ManyBodyGFComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "default_evaluate_as_function"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_as_function"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.NonOrthogonalMatricesComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.OverlapMatrixComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.PDM1234RealComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.ParticleGFComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.QCM4Computable": [[8, 1, 1, "", "__init__"], [8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.QSEMatricesComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.RDM1234RealComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.RestrictedOneBodyRDMComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.RestrictedOneBodyRDMRealComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.SCEOMMatrixComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "check_energies"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "get_overlap_computables"], [8, 1, 1, "", "get_s2_computables"], [8, 1, 1, "", "get_sz_computables"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.SpinlessNBodyPDMArrayRealComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.SpinlessNBodyRDMArrayRealComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.UnrestrictedOneBodyRDMComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.composite.UnrestrictedOneBodyRDMRealComputable": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.primitive": [[8, 0, 1, "", "Averageable"], [8, 0, 1, "", "ComputableFunction"], [8, 0, 1, "", "ComputableInt"], [8, 0, 1, "", "ComputableList"], [8, 0, 1, "", "ComputableNDArray"], [8, 0, 1, "", "ComputableNode"], [8, 0, 1, "", "ComputableSingleChild"], [8, 0, 1, "", "ComputableTuple"], [8, 0, 1, "", "Evaluatable"]], "inquanto.computables.primitive.Averageable": [[8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "evaluate_mean"], [8, 1, 1, "", "evaluate_median"], [8, 1, 1, "", "evaluate_std"], [8, 1, 1, "", "evaluate_var"]], "inquanto.computables.primitive.ComputableFunction": [[8, 1, 1, "", "add_label"], [8, 5, 1, "", "args"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 5, 1, "", "func"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.primitive.ComputableInt": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 5, 1, "", "value"], [8, 1, 1, "", "walk"]], "inquanto.computables.primitive.ComputableList": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "append"], [8, 1, 1, "", "children"], [8, 1, 1, "", "clear"], [8, 1, 1, "", "copy"], [8, 1, 1, "", "count"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "extend"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "index"], [8, 1, 1, "", "insert"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "pop"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "remove"], [8, 1, 1, "", "reverse"], [8, 1, 1, "", "sort"], [8, 1, 1, "", "walk"]], "inquanto.computables.primitive.ComputableNDArray": [[8, 5, 1, "", "ALIGNED"], [8, 5, 1, "", "BEHAVED"], [8, 5, 1, "", "CARRAY"], [8, 5, 1, "", "C_CONTIGUOUS"], [8, 5, 1, "", "FARRAY"], [8, 5, 1, "", "FNC"], [8, 5, 1, "", "FORC"], [8, 5, 1, "", "F_CONTIGUOUS"], [8, 5, 1, "", "OWNDATA"], [8, 5, 1, "", "T"], [8, 5, 1, "", "WRITEABLE"], [8, 5, 1, "", "WRITEBACKIFCOPY"], [8, 1, 1, "", "add_label"], [8, 1, 1, "", "all"], [8, 1, 1, "", "any"], [8, 1, 1, "", "argmax"], [8, 1, 1, "", "argmin"], [8, 1, 1, "", "argpartition"], [8, 1, 1, "", "argsort"], [8, 1, 1, "", "astype"], [8, 5, 1, "", "base"], [8, 1, 1, "", "byteswap"], [8, 1, 1, "", "children"], [8, 1, 1, "", "choose"], [8, 1, 1, "", "clip"], [8, 1, 1, "", "compress"], [8, 1, 1, "", "conj"], [8, 1, 1, "", "conjugate"], [8, 1, 1, "", "copy"], [8, 5, 1, "", "ctypes"], [8, 1, 1, "", "cumprod"], [8, 1, 1, "", "cumsum"], [8, 5, 1, "", "data"], [8, 1, 1, "", "default_evaluate"], [8, 5, 1, "", "device"], [8, 1, 1, "", "diagonal"], [8, 1, 1, "", "dot"], [8, 5, 1, "", "dtype"], [8, 1, 1, "", "dump"], [8, 1, 1, "", "dumps"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "fill"], [8, 5, 1, "", "flags"], [8, 5, 1, "", "flat"], [8, 1, 1, "", "flatten"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "getfield"], [8, 5, 1, "", "imag"], [8, 1, 1, "", "is_leaf"], [8, 1, 1, "", "item"], [8, 5, 1, "", "itemset"], [8, 5, 1, "", "itemsize"], [8, 5, 1, "", "label"], [8, 5, 1, "", "mT"], [8, 1, 1, "", "max"], [8, 1, 1, "", "mean"], [8, 1, 1, "", "min"], [8, 5, 1, "", "nbytes"], [8, 5, 1, "", "ndim"], [8, 5, 1, "", "newbyteorder"], [8, 1, 1, "", "nonzero"], [8, 1, 1, "", "partition"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "prod"], [8, 5, 1, "", "ptp"], [8, 1, 1, "", "put"], [8, 1, 1, "", "ravel"], [8, 5, 1, "", "real"], [8, 1, 1, "", "repeat"], [8, 1, 1, "", "reshape"], [8, 1, 1, "", "resize"], [8, 1, 1, "", "round"], [8, 1, 1, "", "searchsorted"], [8, 1, 1, "", "setfield"], [8, 1, 1, "", "setflags"], [8, 5, 1, "", "shape"], [8, 5, 1, "", "size"], [8, 1, 1, "", "sort"], [8, 1, 1, "", "squeeze"], [8, 1, 1, "", "std"], [8, 5, 1, "", "strides"], [8, 1, 1, "", "sum"], [8, 1, 1, "", "swapaxes"], [8, 1, 1, "", "take"], [8, 1, 1, "", "to_device"], [8, 1, 1, "", "tobytes"], [8, 1, 1, "", "tofile"], [8, 1, 1, "", "tolist"], [8, 1, 1, "", "tostring"], [8, 1, 1, "", "trace"], [8, 1, 1, "", "transpose"], [8, 1, 1, "", "var"], [8, 1, 1, "", "view"], [8, 1, 1, "", "walk"]], "inquanto.computables.primitive.ComputableNode": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.primitive.ComputableSingleChild": [[8, 1, 1, "", "add_label"], [8, 1, 1, "", "children"], [8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"], [8, 1, 1, "", "free_symbols"], [8, 1, 1, "", "free_symbols_ordered"], [8, 1, 1, "", "is_leaf"], [8, 5, 1, "", "label"], [8, 1, 1, "", "print_tree"], [8, 1, 1, "", "walk"]], "inquanto.computables.primitive.ComputableTuple": [[8, 1, 1, "", "children"], [8, 1, 1, "", "evaluate"]], "inquanto.computables.primitive.Evaluatable": [[8, 1, 1, "", "default_evaluate"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "evaluate_list"]], "inquanto": [[9, 4, 0, "-", "core"], [11, 4, 0, "-", "express"], [14, 4, 0, "-", "minimizers"], [15, 4, 0, "-", "operators"], [17, 4, 0, "-", "spaces"], [18, 4, 0, "-", "states"], [19, 4, 0, "-", "symmetry"]], "inquanto.core": [[9, 0, 1, "", "CacheDict"], [9, 0, 1, "", "InQuantoContext"], [9, 0, 1, "id0", "SymbolEnsemble"], [9, 0, 1, "", "Timer"], [9, 0, 1, "", "TimerWith"], [9, 3, 1, "", "cached"], [9, 3, 1, "", "dict_to_matrix"], [9, 3, 1, "", "dict_to_vector"], [9, 3, 1, "", "hash_data"], [9, 3, 1, "", "matrix_to_dict"], [9, 3, 1, "", "pd_safe_eigh"], [9, 3, 1, "", "vector_to_dict"]], "inquanto.core.CacheDict": [[9, 1, 1, "", "attempt"], [9, 1, 1, "", "clear"], [9, 1, 1, "", "convert_weaks_to_refs"], [9, 1, 1, "", "format_size"], [9, 1, 1, "", "get"], [9, 1, 1, "", "get_size_in_bytes"], [9, 1, 1, "", "items"], [9, 1, 1, "", "keys"], [9, 1, 1, "", "pop"], [9, 1, 1, "", "popitem"], [9, 1, 1, "", "report"], [9, 1, 1, "", "setdefault"], [9, 1, 1, "", "update"], [9, 1, 1, "", "values"]], "inquanto.core.InQuantoContext": [[9, 2, 1, "", "base"], [9, 2, 1, "", "prefix"]], "inquanto.core.SymbolEnsemble": [[9, 1, 1, "id1", "as_list"], [9, 1, 1, "id2", "as_set"], [9, 1, 1, "id3", "construct_from_array"], [9, 1, 1, "id4", "construct_from_dict"], [9, 1, 1, "id5", "construct_random"], [9, 1, 1, "id6", "construct_zeros"], [9, 1, 1, "id7", "copy"], [9, 1, 1, "id8", "from_symbols"], [9, 1, 1, "id9", "issubset"], [9, 1, 1, "id10", "update"]], "inquanto.core.Timer": [[9, 1, 1, "", "start"], [9, 1, 1, "", "stop"]], "inquanto.core.TimerWith": [[9, 5, 1, "", "block_counter"]], "inquanto.embeddings": [[10, 4, 0, "-", "dmet"]], "inquanto.embeddings.dmet": [[10, 0, 1, "", "DMETRHF"], [10, 0, 1, "", "DMETRHFFragment"], [10, 0, 1, "", "DMETRHFFragmentActive"], [10, 0, 1, "", "DMETRHFFragmentDirect"], [10, 0, 1, "", "DMETRHFFragmentUCCSDVQE"], [10, 0, 1, "", "ImpurityDMETROHF"], [10, 0, 1, "", "ImpurityDMETROHFFragment"], [10, 0, 1, "", "ImpurityDMETROHFFragmentActive"], [10, 0, 1, "", "ImpurityDMETROHFFragmentED"], [10, 0, 1, "", "ImpurityDMETROHFFragmentWithoutRDM"]], "inquanto.embeddings.dmet.DMETRHF": [[10, 1, 1, "", "construct_random_parameters"], [10, 1, 1, "", "correlation_potential_pattern"], [10, 1, 1, "", "energy"], [10, 1, 1, "", "pattern_from_locations"], [10, 1, 1, "", "run"], [10, 1, 1, "", "run_one"]], "inquanto.embeddings.dmet.DMETRHFFragment": [[10, 1, 1, "", "compute_fragment_energy"], [10, 1, 1, "", "solve"]], "inquanto.embeddings.dmet.DMETRHFFragmentActive": [[10, 1, 1, "", "construct_fragment_energy_operator"], [10, 1, 1, "", "solve"], [10, 1, 1, "", "solve_active"]], "inquanto.embeddings.dmet.DMETRHFFragmentDirect": [[10, 1, 1, "", "construct_fragment_energy_operator"], [10, 1, 1, "", "solve"]], "inquanto.embeddings.dmet.DMETRHFFragmentUCCSDVQE": [[10, 1, 1, "", "construct_fragment_energy_operator"], [10, 1, 1, "", "solve"], [10, 1, 1, "", "solve_active"]], "inquanto.embeddings.dmet.ImpurityDMETROHF": [[10, 1, 1, "", "run"]], "inquanto.embeddings.dmet.ImpurityDMETROHFFragment": [[10, 1, 1, "", "solve"]], "inquanto.embeddings.dmet.ImpurityDMETROHFFragmentActive": [[10, 1, 1, "", "solve"], [10, 1, 1, "", "solve_active"]], "inquanto.embeddings.dmet.ImpurityDMETROHFFragmentED": [[10, 1, 1, "", "solve"]], "inquanto.embeddings.dmet.ImpurityDMETROHFFragmentWithoutRDM": [[10, 1, 1, "", "solve"]], "inquanto.express": [[11, 0, 1, "", "DriverGeneralizedHubbard"], [11, 0, 1, "", "DriverHubbardDimer"], [11, 0, 1, "", "DriverIsing1D"], [11, 0, 1, "", "DriverIsing1DRing"], [11, 0, 1, "", "DriverIsingCustomConnectivity"], [11, 3, 1, "", "get_noisy_backend"], [11, 3, 1, "", "get_system"], [11, 3, 1, "", "list_h5"], [11, 3, 1, "", "load_h5"], [11, 3, 1, "", "propagate"], [11, 3, 1, "", "random_circuit_ansatz"], [11, 3, 1, "", "run_rhf"], [11, 3, 1, "", "run_rohf"], [11, 3, 1, "", "run_time_evolution"], [11, 3, 1, "", "run_vqe"], [11, 3, 1, "", "save_h5_system"]], "inquanto.express.DriverGeneralizedHubbard": [[11, 1, 1, "", "generate_chain"], [11, 1, 1, "", "generate_report"], [11, 1, 1, "", "generate_ring"], [11, 1, 1, "", "get_system"], [11, 2, 1, "", "n_electron"], [11, 2, 1, "", "n_orb"], [11, 1, 1, "", "print_json_report"]], "inquanto.express.DriverHubbardDimer": [[11, 1, 1, "", "generate_report"], [11, 1, 1, "", "get_system"], [11, 2, 1, "", "n_electron"], [11, 2, 1, "", "n_orb"], [11, 1, 1, "", "print_json_report"]], "inquanto.express.DriverIsing1D": [[11, 1, 1, "", "generate_report"], [11, 1, 1, "", "get_system"], [11, 1, 1, "", "print_json_report"]], "inquanto.express.DriverIsing1DRing": [[11, 1, 1, "", "generate_report"], [11, 1, 1, "", "get_system"], [11, 1, 1, "", "print_json_report"]], "inquanto.express.DriverIsingCustomConnectivity": [[11, 1, 1, "", "generate_report"], [11, 1, 1, "", "get_system"], [11, 1, 1, "", "print_json_report"]], "inquanto.extensions": [[0, 4, 0, "-", "cutensornet"], [1, 4, 0, "-", "nexus"], [2, 4, 0, "-", "nglview"], [3, 4, 0, "-", "phayes"], [4, 4, 0, "-", "pyscf"]], "inquanto.extensions.cutensornet": [[0, 0, 1, "", "CuTensorNetProtocol"]], "inquanto.extensions.cutensornet.CuTensorNetProtocol": [[0, 1, 1, "", "dump"], [0, 1, 1, "", "dumps"], [0, 1, 1, "", "get_evaluator"], [0, 1, 1, "", "get_runner"], [0, 1, 1, "", "load"], [0, 1, 1, "", "loads"]], "inquanto.extensions.nexus": [[1, 0, 1, "", "ProtocolAnnotations"]], "inquanto.extensions.nglview": [[2, 0, 1, "", "VisualizerNGL"]], "inquanto.extensions.nglview.VisualizerNGL": [[2, 1, 1, "", "visualize_fragmentation"], [2, 1, 1, "", "visualize_molecule"], [2, 1, 1, "", "visualize_orbitals"], [2, 1, 1, "", "visualize_unit_cell"]], "inquanto.extensions.phayes": [[3, 0, 1, "", "AlgorithmBayesianQPE"]], "inquanto.extensions.phayes.AlgorithmBayesianQPE": [[3, 1, 1, "", "build"], [3, 1, 1, "", "final_pdf"], [3, 1, 1, "", "final_value"], [3, 2, 1, "", "has_updated"], [3, 1, 1, "", "join"], [3, 2, 1, "", "phayes_state"], [3, 1, 1, "", "run"], [3, 1, 1, "", "run_async"]], "inquanto.extensions.pyscf": [[4, 0, 1, "", "AVAS"], [4, 0, 1, "", "CASSCF"], [4, 0, 1, "", "ChemistryDriverPySCFEmbeddingGammaRHF"], [4, 0, 1, "", "ChemistryDriverPySCFEmbeddingGammaROHF_UHF"], [4, 0, 1, "", "ChemistryDriverPySCFEmbeddingRHF"], [4, 0, 1, "", "ChemistryDriverPySCFEmbeddingROHF"], [4, 0, 1, "", "ChemistryDriverPySCFEmbeddingROHF_UHF"], [4, 0, 1, "", "ChemistryDriverPySCFGammaRHF"], [4, 0, 1, "", "ChemistryDriverPySCFGammaROHF"], [4, 0, 1, "", "ChemistryDriverPySCFIntegrals"], [4, 0, 1, "", "ChemistryDriverPySCFMolecularRHF"], [4, 0, 1, "", "ChemistryDriverPySCFMolecularRHFQMMMCOSMO"], [4, 0, 1, "", "ChemistryDriverPySCFMolecularROHF"], [4, 0, 1, "", "ChemistryDriverPySCFMolecularROHFQMMMCOSMO"], [4, 0, 1, "", "ChemistryDriverPySCFMolecularUHF"], [4, 0, 1, "", "ChemistryDriverPySCFMolecularUHFQMMMCOSMO"], [4, 0, 1, "", "ChemistryDriverPySCFMomentumRHF"], [4, 0, 1, "", "ChemistryDriverPySCFMomentumROHF"], [4, 0, 1, "", "DMETRHFFragmentPySCFActive"], [4, 0, 1, "", "DMETRHFFragmentPySCFCCSD"], [4, 0, 1, "", "DMETRHFFragmentPySCFFCI"], [4, 0, 1, "", "DMETRHFFragmentPySCFMP2"], [4, 0, 1, "", "DMETRHFFragmentPySCFRHF"], [4, 0, 1, "", "FromActiveOrbitals"], [4, 0, 1, "", "FromActiveSpace"], [4, 0, 1, "", "FrozenCore"], [4, 0, 1, "", "ImpurityDMETROHFFragmentPySCFActive"], [4, 0, 1, "", "ImpurityDMETROHFFragmentPySCFCCSD"], [4, 0, 1, "", "ImpurityDMETROHFFragmentPySCFFCI"], [4, 0, 1, "", "ImpurityDMETROHFFragmentPySCFMP2"], [4, 0, 1, "", "ImpurityDMETROHFFragmentPySCFROHF"], [4, 0, 1, "", "PySCFChemistryRestrictedIntegralOperator"], [4, 0, 1, "", "PySCFChemistryUnrestrictedIntegralOperator"], [4, 4, 0, "-", "fmo"], [4, 3, 1, "", "get_correlation_potential_pattern"], [4, 3, 1, "", "get_cube_density"], [4, 3, 1, "", "get_cube_orbitals"], [4, 3, 1, "", "get_fragment_orbital_masks"], [4, 3, 1, "", "get_fragment_orbitals"]], "inquanto.extensions.pyscf.AVAS": [[4, 1, 1, "", "compute_unitary"], [4, 1, 1, "", "dump_flags"], [4, 1, 1, "", "frozenf"], [4, 2, 1, "", "is_transf"], [4, 2, 1, "", "original"], [4, 1, 1, "", "run"], [4, 1, 1, "", "transf"]], "inquanto.extensions.pyscf.CASSCF": [[4, 1, 1, "", "compute_unitary"], [4, 2, 1, "", "is_transf"], [4, 2, 1, "", "original"], [4, 1, 1, "", "transf"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF": [[4, 1, 1, "", "compute_nuclear_dipole"], [4, 1, 1, "", "compute_one_electron_operator"], [4, 1, 1, "", "extract_point_group_information"], [4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_ac0_correction"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_cube_density"], [4, 1, 1, "", "get_cube_orbitals"], [4, 1, 1, "", "get_double_factorized_system"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_lowdin_system"], [4, 1, 1, "", "get_madelung_constant"], [4, 1, 1, "", "get_mulliken_pop"], [4, 1, 1, "", "get_nevpt2_correction"], [4, 1, 1, "", "get_orbital_coefficients"], [4, 1, 1, "", "get_rdm1_ccsd"], [4, 1, 1, "", "get_rdm2_ccsd"], [4, 1, 1, "", "get_subsystem_driver"], [4, 1, 1, "", "get_system"], [4, 1, 1, "", "get_system_ao"], [4, 1, 1, "", "make_actives_contiguous"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_checkfile"], [4, 1, 1, "", "set_diis_space_dimension"], [4, 1, 1, "", "set_init_orbitals"], [4, 1, 1, "", "set_level_shift"], [4, 1, 1, "", "set_max_scf_cycles"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF": [[4, 1, 1, "", "compute_nuclear_dipole"], [4, 1, 1, "", "compute_one_electron_operator"], [4, 1, 1, "", "extract_point_group_information"], [4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_ac0_correction"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_cube_density"], [4, 1, 1, "", "get_cube_orbitals"], [4, 1, 1, "", "get_double_factorized_system"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_lowdin_system"], [4, 1, 1, "", "get_madelung_constant"], [4, 1, 1, "", "get_mulliken_pop"], [4, 1, 1, "", "get_nevpt2_correction"], [4, 1, 1, "", "get_orbital_coefficients"], [4, 1, 1, "", "get_rdm1_ccsd"], [4, 1, 1, "", "get_rdm2_ccsd"], [4, 1, 1, "", "get_subsystem_driver"], [4, 1, 1, "", "get_system"], [4, 1, 1, "", "get_system_ao"], [4, 1, 1, "", "make_actives_contiguous"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_checkfile"], [4, 1, 1, "", "set_diis_space_dimension"], [4, 1, 1, "", "set_init_orbitals"], [4, 1, 1, "", "set_level_shift"], [4, 1, 1, "", "set_max_scf_cycles"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF": [[4, 1, 1, "", "compute_nuclear_dipole"], [4, 1, 1, "", "compute_one_electron_operator"], [4, 1, 1, "", "extract_point_group_information"], [4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_ac0_correction"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_cube_density"], [4, 1, 1, "", "get_cube_orbitals"], [4, 1, 1, "", "get_double_factorized_system"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_lowdin_system"], [4, 1, 1, "", "get_mulliken_pop"], [4, 1, 1, "", "get_nevpt2_correction"], [4, 1, 1, "", "get_orbital_coefficients"], [4, 1, 1, "", "get_rdm1_ccsd"], [4, 1, 1, "", "get_rdm2_ccsd"], [4, 1, 1, "", "get_subsystem_driver"], [4, 1, 1, "", "get_system"], [4, 1, 1, "", "get_system_ao"], [4, 1, 1, "", "make_actives_contiguous"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_checkfile"], [4, 1, 1, "", "set_diis_space_dimension"], [4, 1, 1, "", "set_init_orbitals"], [4, 1, 1, "", "set_level_shift"], [4, 1, 1, "", "set_max_scf_cycles"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF": [[4, 1, 1, "", "compute_nuclear_dipole"], [4, 1, 1, "", "compute_one_electron_operator"], [4, 1, 1, "", "extract_point_group_information"], [4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_ac0_correction"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_cube_density"], [4, 1, 1, "", "get_cube_orbitals"], [4, 1, 1, "", "get_double_factorized_system"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_lowdin_system"], [4, 1, 1, "", "get_mulliken_pop"], [4, 1, 1, "", "get_nevpt2_correction"], [4, 1, 1, "", "get_orbital_coefficients"], [4, 1, 1, "", "get_rdm1_ccsd"], [4, 1, 1, "", "get_rdm2_ccsd"], [4, 1, 1, "", "get_subsystem_driver"], [4, 1, 1, "", "get_system"], [4, 1, 1, "", "get_system_ao"], [4, 1, 1, "", "make_actives_contiguous"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_checkfile"], [4, 1, 1, "", "set_diis_space_dimension"], [4, 1, 1, "", "set_init_orbitals"], [4, 1, 1, "", "set_level_shift"], [4, 1, 1, "", "set_max_scf_cycles"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF": [[4, 1, 1, "", "compute_nuclear_dipole"], [4, 1, 1, "", "compute_one_electron_operator"], [4, 1, 1, "", "extract_point_group_information"], [4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_ac0_correction"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_cube_density"], [4, 1, 1, "", "get_cube_orbitals"], [4, 1, 1, "", "get_double_factorized_system"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_lowdin_system"], [4, 1, 1, "", "get_mulliken_pop"], [4, 1, 1, "", "get_nevpt2_correction"], [4, 1, 1, "", "get_orbital_coefficients"], [4, 1, 1, "", "get_rdm1_ccsd"], [4, 1, 1, "", "get_rdm2_ccsd"], [4, 1, 1, "", "get_subsystem_driver"], [4, 1, 1, "", "get_system"], [4, 1, 1, "", "get_system_ao"], [4, 1, 1, "", "make_actives_contiguous"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_checkfile"], [4, 1, 1, "", "set_diis_space_dimension"], [4, 1, 1, "", "set_init_orbitals"], [4, 1, 1, "", "set_level_shift"], [4, 1, 1, "", "set_max_scf_cycles"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF": [[4, 1, 1, "", "compute_nuclear_dipole"], [4, 1, 1, "", "compute_one_electron_operator"], [4, 1, 1, "", "extract_point_group_information"], [4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_ac0_correction"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_cube_density"], [4, 1, 1, "", "get_cube_orbitals"], [4, 1, 1, "", "get_double_factorized_system"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_lowdin_system"], [4, 1, 1, "", "get_madelung_constant"], [4, 1, 1, "", "get_mulliken_pop"], [4, 1, 1, "", "get_nevpt2_correction"], [4, 1, 1, "", "get_orbital_coefficients"], [4, 1, 1, "", "get_rdm1_ccsd"], [4, 1, 1, "", "get_rdm2_ccsd"], [4, 1, 1, "", "get_subsystem_driver"], [4, 1, 1, "", "get_system"], [4, 1, 1, "", "get_system_ao"], [4, 1, 1, "", "make_actives_contiguous"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_checkfile"], [4, 1, 1, "", "set_diis_space_dimension"], [4, 1, 1, "", "set_init_orbitals"], [4, 1, 1, "", "set_level_shift"], [4, 1, 1, "", "set_max_scf_cycles"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF": [[4, 1, 1, "", "compute_nuclear_dipole"], [4, 1, 1, "", "compute_one_electron_operator"], [4, 1, 1, "", "extract_point_group_information"], [4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_ac0_correction"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_cube_density"], [4, 1, 1, "", "get_cube_orbitals"], [4, 1, 1, "", "get_double_factorized_system"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_lowdin_system"], [4, 1, 1, "", "get_madelung_constant"], [4, 1, 1, "", "get_mulliken_pop"], [4, 1, 1, "", "get_nevpt2_correction"], [4, 1, 1, "", "get_orbital_coefficients"], [4, 1, 1, "", "get_rdm1_ccsd"], [4, 1, 1, "", "get_rdm2_ccsd"], [4, 1, 1, "", "get_subsystem_driver"], [4, 1, 1, "", "get_system"], [4, 1, 1, "", "get_system_ao"], [4, 1, 1, "", "make_actives_contiguous"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_checkfile"], [4, 1, 1, "", "set_diis_space_dimension"], [4, 1, 1, "", "set_init_orbitals"], [4, 1, 1, "", "set_level_shift"], [4, 1, 1, "", "set_max_scf_cycles"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals": [[4, 1, 1, "", "from_integral_operator"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_ac0_correction"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_double_factorized_system"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_lowdin_system"], [4, 1, 1, "", "get_nevpt2_correction"], [4, 1, 1, "", "get_one_body_rdm"], [4, 1, 1, "", "get_orbital_coefficients"], [4, 1, 1, "", "get_rdm1_ccsd"], [4, 1, 1, "", "get_rdm2_ccsd"], [4, 1, 1, "", "get_subsystem_driver"], [4, 1, 1, "", "get_system"], [4, 1, 1, "", "get_system_ao"], [4, 1, 1, "", "make_actives_contiguous"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "mo_coeff"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_checkfile"], [4, 1, 1, "", "set_diis_space_dimension"], [4, 1, 1, "", "set_init_orbitals"], [4, 1, 1, "", "set_level_shift"], [4, 1, 1, "", "set_max_scf_cycles"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF": [[4, 1, 1, "", "compute_nuclear_dipole"], [4, 1, 1, "", "compute_one_electron_operator"], [4, 1, 1, "", "extract_point_group_information"], [4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_ac0_correction"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_cube_density"], [4, 1, 1, "", "get_cube_orbitals"], [4, 1, 1, "", "get_double_factorized_system"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_lowdin_system"], [4, 1, 1, "", "get_mulliken_pop"], [4, 1, 1, "", "get_nevpt2_correction"], [4, 1, 1, "", "get_orbital_coefficients"], [4, 1, 1, "", "get_rdm1_ccsd"], [4, 1, 1, "", "get_rdm2_ccsd"], [4, 1, 1, "", "get_subsystem_driver"], [4, 1, 1, "", "get_system"], [4, 1, 1, "", "get_system_ao"], [4, 1, 1, "", "make_actives_contiguous"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_checkfile"], [4, 1, 1, "", "set_diis_space_dimension"], [4, 1, 1, "", "set_init_orbitals"], [4, 1, 1, "", "set_level_shift"], [4, 1, 1, "", "set_max_scf_cycles"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO": [[4, 1, 1, "", "build_mm_charges"], [4, 1, 1, "", "compute_nuclear_dipole"], [4, 1, 1, "", "compute_one_electron_operator"], [4, 1, 1, "", "extract_point_group_information"], [4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_ac0_correction"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_cube_density"], [4, 1, 1, "", "get_cube_orbitals"], [4, 1, 1, "", "get_double_factorized_system"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_lowdin_system"], [4, 1, 1, "", "get_mm_coulomb"], [4, 1, 1, "", "get_mulliken_pop"], [4, 1, 1, "", "get_nevpt2_correction"], [4, 1, 1, "", "get_orbital_coefficients"], [4, 1, 1, "", "get_rdm1_ccsd"], [4, 1, 1, "", "get_rdm2_ccsd"], [4, 1, 1, "", "get_subsystem_driver"], [4, 1, 1, "", "get_system"], [4, 1, 1, "", "get_system_ao"], [4, 1, 1, "", "make_actives_contiguous"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_checkfile"], [4, 1, 1, "", "set_diis_space_dimension"], [4, 1, 1, "", "set_init_orbitals"], [4, 1, 1, "", "set_level_shift"], [4, 1, 1, "", "set_max_scf_cycles"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF": [[4, 1, 1, "", "compute_nuclear_dipole"], [4, 1, 1, "", "compute_one_electron_operator"], [4, 1, 1, "", "extract_point_group_information"], [4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_ac0_correction"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_cube_density"], [4, 1, 1, "", "get_cube_orbitals"], [4, 1, 1, "", "get_double_factorized_system"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_lowdin_system"], [4, 1, 1, "", "get_mulliken_pop"], [4, 1, 1, "", "get_nevpt2_correction"], [4, 1, 1, "", "get_orbital_coefficients"], [4, 1, 1, "", "get_rdm1_ccsd"], [4, 1, 1, "", "get_rdm2_ccsd"], [4, 1, 1, "", "get_subsystem_driver"], [4, 1, 1, "", "get_system"], [4, 1, 1, "", "get_system_ao"], [4, 1, 1, "", "make_actives_contiguous"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_checkfile"], [4, 1, 1, "", "set_diis_space_dimension"], [4, 1, 1, "", "set_init_orbitals"], [4, 1, 1, "", "set_level_shift"], [4, 1, 1, "", "set_max_scf_cycles"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO": [[4, 1, 1, "", "build_mm_charges"], [4, 1, 1, "", "compute_nuclear_dipole"], [4, 1, 1, "", "compute_one_electron_operator"], [4, 1, 1, "", "extract_point_group_information"], [4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_ac0_correction"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_cube_density"], [4, 1, 1, "", "get_cube_orbitals"], [4, 1, 1, "", "get_double_factorized_system"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_lowdin_system"], [4, 1, 1, "", "get_mm_coulomb"], [4, 1, 1, "", "get_mulliken_pop"], [4, 1, 1, "", "get_nevpt2_correction"], [4, 1, 1, "", "get_orbital_coefficients"], [4, 1, 1, "", "get_rdm1_ccsd"], [4, 1, 1, "", "get_rdm2_ccsd"], [4, 1, 1, "", "get_subsystem_driver"], [4, 1, 1, "", "get_system"], [4, 1, 1, "", "get_system_ao"], [4, 1, 1, "", "make_actives_contiguous"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_checkfile"], [4, 1, 1, "", "set_diis_space_dimension"], [4, 1, 1, "", "set_init_orbitals"], [4, 1, 1, "", "set_level_shift"], [4, 1, 1, "", "set_max_scf_cycles"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF": [[4, 1, 1, "", "compute_nuclear_dipole"], [4, 1, 1, "", "compute_one_electron_operator"], [4, 1, 1, "", "extract_point_group_information"], [4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_ac0_correction"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_cube_density"], [4, 1, 1, "", "get_cube_orbitals"], [4, 1, 1, "", "get_double_factorized_system"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_lowdin_system"], [4, 1, 1, "", "get_mulliken_pop"], [4, 1, 1, "", "get_nevpt2_correction"], [4, 1, 1, "", "get_orbital_coefficients"], [4, 1, 1, "", "get_rdm1_ccsd"], [4, 1, 1, "", "get_rdm2_ccsd"], [4, 1, 1, "", "get_subsystem_driver"], [4, 1, 1, "", "get_system"], [4, 1, 1, "", "get_system_ao"], [4, 1, 1, "", "make_actives_contiguous"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_checkfile"], [4, 1, 1, "", "set_diis_space_dimension"], [4, 1, 1, "", "set_init_orbitals"], [4, 1, 1, "", "set_level_shift"], [4, 1, 1, "", "set_max_scf_cycles"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO": [[4, 1, 1, "", "build_mm_charges"], [4, 1, 1, "", "compute_nuclear_dipole"], [4, 1, 1, "", "compute_one_electron_operator"], [4, 1, 1, "", "extract_point_group_information"], [4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_ac0_correction"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_cube_density"], [4, 1, 1, "", "get_cube_orbitals"], [4, 1, 1, "", "get_double_factorized_system"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_lowdin_system"], [4, 1, 1, "", "get_mm_coulomb"], [4, 1, 1, "", "get_mulliken_pop"], [4, 1, 1, "", "get_nevpt2_correction"], [4, 1, 1, "", "get_orbital_coefficients"], [4, 1, 1, "", "get_rdm1_ccsd"], [4, 1, 1, "", "get_rdm2_ccsd"], [4, 1, 1, "", "get_subsystem_driver"], [4, 1, 1, "", "get_system"], [4, 1, 1, "", "get_system_ao"], [4, 1, 1, "", "make_actives_contiguous"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_checkfile"], [4, 1, 1, "", "set_diis_space_dimension"], [4, 1, 1, "", "set_init_orbitals"], [4, 1, 1, "", "set_level_shift"], [4, 1, 1, "", "set_max_scf_cycles"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF": [[4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_madelung_constant"], [4, 1, 1, "", "get_system"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_kp"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_init_orbitals"]], "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF": [[4, 1, 1, "", "from_mf"], [4, 2, 1, "", "frozen"], [4, 1, 1, "", "generate_report"], [4, 1, 1, "", "get_casci_1234pdms"], [4, 1, 1, "", "get_casci_12rdms"], [4, 1, 1, "", "get_excitation_amplitudes"], [4, 1, 1, "", "get_excitation_operators"], [4, 1, 1, "", "get_madelung_constant"], [4, 1, 1, "", "get_system"], [4, 2, 1, "", "mf_energy"], [4, 2, 1, "", "mf_type"], [4, 2, 1, "", "n_electron"], [4, 2, 1, "", "n_kp"], [4, 2, 1, "", "n_orb"], [4, 1, 1, "", "print_json_report"], [4, 1, 1, "", "run_casci"], [4, 1, 1, "", "run_ccsd"], [4, 1, 1, "", "run_hf"], [4, 1, 1, "", "run_mp2"], [4, 1, 1, "", "set_init_orbitals"]], "inquanto.extensions.pyscf.DMETRHFFragmentPySCFActive": [[4, 1, 1, "", "construct_fragment_energy_operator"], [4, 1, 1, "", "solve"], [4, 1, 1, "", "solve_active"]], "inquanto.extensions.pyscf.DMETRHFFragmentPySCFCCSD": [[4, 1, 1, "", "compute_fragment_energy"], [4, 1, 1, "", "solve"]], "inquanto.extensions.pyscf.DMETRHFFragmentPySCFFCI": [[4, 1, 1, "", "compute_fragment_energy"], [4, 1, 1, "", "solve"]], "inquanto.extensions.pyscf.DMETRHFFragmentPySCFMP2": [[4, 1, 1, "", "compute_fragment_energy"], [4, 1, 1, "", "solve"]], "inquanto.extensions.pyscf.DMETRHFFragmentPySCFRHF": [[4, 1, 1, "", "compute_fragment_energy"], [4, 1, 1, "", "solve"]], "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFActive": [[4, 1, 1, "", "solve"], [4, 1, 1, "", "solve_active"]], "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFCCSD": [[4, 1, 1, "", "solve"]], "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFFCI": [[4, 1, 1, "", "solve"]], "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFMP2": [[4, 1, 1, "", "solve"]], "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFROHF": [[4, 1, 1, "", "solve"]], "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator": [[4, 5, 1, "", "TOLERANCE"], [4, 1, 1, "", "approx_equal"], [4, 1, 1, "", "copy"], [4, 1, 1, "", "df"], [4, 1, 1, "", "double_factorize"], [4, 1, 1, "", "effective_potential"], [4, 1, 1, "", "effective_potential_spin"], [4, 1, 1, "", "energy"], [4, 1, 1, "", "energy_electron_mean_field"], [4, 1, 1, "", "is_openshell"], [4, 1, 1, "", "items"], [4, 1, 1, "", "load_h5"], [4, 1, 1, "", "print_table"], [4, 1, 1, "", "qubit_encode"], [4, 1, 1, "", "rotate"], [4, 1, 1, "", "run_rhf"], [4, 1, 1, "", "save_h5"], [4, 1, 1, "", "to_ChemistryRestrictedIntegralOperator"], [4, 1, 1, "", "to_FermionOperator"]], "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator": [[4, 5, 1, "", "TOLERANCE"], [4, 1, 1, "", "approx_equal"], [4, 1, 1, "", "copy"], [4, 1, 1, "", "df"], [4, 1, 1, "", "double_factorize"], [4, 1, 1, "", "effective_potential"], [4, 1, 1, "", "energy"], [4, 1, 1, "", "energy_electron_mean_field"], [4, 1, 1, "", "items"], [4, 1, 1, "", "load_h5"], [4, 1, 1, "", "print_table"], [4, 1, 1, "", "qubit_encode"], [4, 1, 1, "", "rotate"], [4, 1, 1, "", "run_uhf"], [4, 1, 1, "", "save_h5"], [4, 1, 1, "", "to_ChemistryUnrestrictedIntegralOperator"], [4, 1, 1, "", "to_FermionOperator"]], "inquanto.extensions.pyscf.fmo": [[4, 0, 1, "", "FMO"], [4, 0, 1, "", "FMOFragment"], [4, 0, 1, "", "FMOFragmentPySCFActive"], [4, 0, 1, "", "FMOFragmentPySCFCCSD"], [4, 0, 1, "", "FMOFragmentPySCFMP2"], [4, 0, 1, "", "FMOFragmentPySCFRHF"]], "inquanto.extensions.pyscf.fmo.FMO": [[4, 1, 1, "", "ao_mask_2_atom_mask"], [4, 1, 1, "", "atom_mask_2_ao_mask"], [4, 1, 1, "", "energy"], [4, 1, 1, "", "run"]], "inquanto.extensions.pyscf.fmo.FMOFragment": [[4, 1, 1, "", "compose_fragments"], [4, 1, 1, "", "solve"], [4, 1, 1, "", "solve_final"]], "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFActive": [[4, 1, 1, "", "compose_fragments"], [4, 1, 1, "", "solve"], [4, 1, 1, "", "solve_final"], [4, 1, 1, "", "solve_final_active"]], "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFCCSD": [[4, 1, 1, "", "compose_fragments"], [4, 1, 1, "", "solve"], [4, 1, 1, "", "solve_final"]], "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFMP2": [[4, 1, 1, "", "compose_fragments"], [4, 1, 1, "", "solve"], [4, 1, 1, "", "solve_final"]], "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFRHF": [[4, 1, 1, "", "compose_fragments"], [4, 1, 1, "", "solve"], [4, 1, 1, "", "solve_final"]], "inquanto.geometries": [[12, 0, 1, "", "GeometryMolecular"], [12, 0, 1, "", "GeometryPeriodic"]], "inquanto.geometries.GeometryMolecular": [[12, 1, 1, "", "add_atom"], [12, 1, 1, "", "align_bond_to_axis"], [12, 1, 1, "", "align_bond_to_vector"], [12, 1, 1, "", "align_to_plane"], [12, 1, 1, "", "align_to_xy_plane"], [12, 1, 1, "", "align_to_xz_plane"], [12, 1, 1, "", "align_to_yz_plane"], [12, 2, 1, "", "atomic_coordinates"], [12, 1, 1, "", "bond_angle"], [12, 1, 1, "", "bond_length"], [12, 1, 1, "", "build_2atom_chain"], [12, 1, 1, "", "build_alternating_ring"], [12, 1, 1, "", "build_rectangle"], [12, 1, 1, "", "build_ring"], [12, 1, 1, "", "compute_distance_matrix"], [12, 2, 1, "", "dataframe"], [12, 1, 1, "", "delete_atom"], [12, 1, 1, "", "df_to_xyz"], [12, 1, 1, "", "dihedral_angle"], [12, 2, 1, "", "elements"], [12, 1, 1, "", "from_xyz_string"], [12, 1, 1, "", "load_csv"], [12, 1, 1, "", "load_json"], [12, 1, 1, "", "load_xyz"], [12, 1, 1, "", "load_zmatrix"], [12, 1, 1, "", "modify_bond_angle"], [12, 1, 1, "", "modify_bond_angle_by_group"], [12, 1, 1, "", "modify_bond_length"], [12, 1, 1, "", "modify_bond_length_by_group"], [12, 1, 1, "", "modify_dihedral_angle"], [12, 1, 1, "", "modify_dihedral_angle_by_group"], [12, 1, 1, "", "randomize_xyz"], [12, 1, 1, "", "rescale_position_vectors"], [12, 1, 1, "", "rotate_around_axis"], [12, 1, 1, "", "rotate_around_vector"], [12, 1, 1, "", "save_csv"], [12, 1, 1, "", "save_json"], [12, 1, 1, "", "save_xyz"], [12, 1, 1, "", "save_zmatrix"], [12, 1, 1, "", "scan_bond_angle"], [12, 1, 1, "", "scan_bond_angle_by_group"], [12, 1, 1, "", "scan_bond_length"], [12, 1, 1, "", "scan_bond_length_by_group"], [12, 1, 1, "", "scan_dihedral_angle"], [12, 1, 1, "", "scan_dihedral_angle_by_group"], [12, 1, 1, "", "set_groups"], [12, 1, 1, "", "set_subgroups"], [12, 1, 1, "", "to_angstrom"], [12, 1, 1, "", "to_bohr"], [12, 1, 1, "", "to_zmatrix"], [12, 1, 1, "", "translate_by_vector"], [12, 2, 1, "", "xyz"], [12, 1, 1, "", "xyz_to_df"], [12, 2, 1, "", "zmatrix"], [12, 1, 1, "", "zmatrix_to_df"]], "inquanto.geometries.GeometryPeriodic": [[12, 1, 1, "", "add_atom"], [12, 1, 1, "", "align_bond_to_axis"], [12, 1, 1, "", "align_bond_to_vector"], [12, 1, 1, "", "align_to_plane"], [12, 1, 1, "", "align_to_xy_plane"], [12, 1, 1, "", "align_to_xz_plane"], [12, 1, 1, "", "align_to_yz_plane"], [12, 2, 1, "", "atomic_coordinates"], [12, 1, 1, "", "bond_angle"], [12, 1, 1, "", "bond_length"], [12, 1, 1, "", "build_2atom_chain"], [12, 1, 1, "", "build_alternating_ring"], [12, 1, 1, "", "build_rectangle"], [12, 1, 1, "", "build_ring"], [12, 1, 1, "", "build_supercell"], [12, 1, 1, "", "compute_distance_matrix"], [12, 2, 1, "", "dataframe"], [12, 1, 1, "", "delete_atom"], [12, 1, 1, "", "df_to_xyz"], [12, 1, 1, "", "dihedral_angle"], [12, 2, 1, "", "elements"], [12, 1, 1, "", "from_xyz_string"], [12, 1, 1, "", "load_csv"], [12, 1, 1, "", "load_json"], [12, 1, 1, "", "load_xyz"], [12, 1, 1, "", "modify_bond_angle"], [12, 1, 1, "", "modify_bond_angle_by_group"], [12, 1, 1, "", "modify_bond_length"], [12, 1, 1, "", "modify_bond_length_by_group"], [12, 1, 1, "", "modify_dihedral_angle"], [12, 1, 1, "", "modify_dihedral_angle_by_group"], [12, 1, 1, "", "randomize_xyz"], [12, 1, 1, "", "rescale_position_vectors"], [12, 1, 1, "", "rotate_around_axis"], [12, 1, 1, "", "rotate_around_vector"], [12, 1, 1, "", "save_csv"], [12, 1, 1, "", "save_json"], [12, 1, 1, "", "save_xyz"], [12, 1, 1, "", "scan_bond_angle"], [12, 1, 1, "", "scan_bond_angle_by_group"], [12, 1, 1, "", "scan_bond_length"], [12, 1, 1, "", "scan_bond_length_by_group"], [12, 1, 1, "", "scan_dihedral_angle"], [12, 1, 1, "", "scan_dihedral_angle_by_group"], [12, 1, 1, "", "set_groups"], [12, 1, 1, "", "set_subgroups"], [12, 1, 1, "", "to_angstrom"], [12, 1, 1, "", "to_bohr"], [12, 1, 1, "", "translate_by_vector"], [12, 2, 1, "", "xyz"], [12, 1, 1, "", "xyz_to_df"]], "inquanto.mappings": [[13, 0, 1, "", "QubitMapping"], [13, 0, 1, "", "QubitMappingBravyiKitaev"], [13, 0, 1, "", "QubitMappingJordanWigner"], [13, 0, 1, "", "QubitMappingParaparticular"], [13, 0, 1, "", "QubitMappingParity"]], "inquanto.mappings.QubitMapping": [[13, 5, 1, "", "OPERATOR_MAP_TYPES"], [13, 5, 1, "", "_MAPPING_FLAGS"], [13, 1, 1, "", "flip_set"], [13, 1, 1, "", "operator_map"], [13, 1, 1, "", "parity_set"], [13, 1, 1, "", "rho_set"], [13, 1, 1, "", "state_map"], [13, 1, 1, "", "state_map_conventional"], [13, 1, 1, "", "state_map_matrix"], [13, 1, 1, "", "update_set"]], "inquanto.mappings.QubitMappingBravyiKitaev": [[13, 5, 1, "", "OPERATOR_MAP_TYPES"], [13, 5, 1, "", "_MAPPING_FLAGS"], [13, 1, 1, "", "flip_set"], [13, 1, 1, "", "operator_map"], [13, 1, 1, "", "parity_set"], [13, 1, 1, "", "remainder_set"], [13, 1, 1, "", "rho_set"], [13, 1, 1, "", "state_map"], [13, 1, 1, "", "state_map_conventional"], [13, 1, 1, "", "state_map_matrix"], [13, 1, 1, "", "update_set"]], "inquanto.mappings.QubitMappingJordanWigner": [[13, 5, 1, "", "OPERATOR_MAP_TYPES"], [13, 5, 1, "", "_MAPPING_FLAGS"], [13, 1, 1, "", "flip_set"], [13, 1, 1, "", "operator_map"], [13, 1, 1, "", "parity_set"], [13, 1, 1, "", "rho_set"], [13, 1, 1, "", "state_map"], [13, 1, 1, "", "state_map_conventional"], [13, 1, 1, "", "state_map_matrix"], [13, 1, 1, "", "update_set"]], "inquanto.mappings.QubitMappingParaparticular": [[13, 5, 1, "", "OPERATOR_MAP_TYPES"], [13, 5, 1, "", "_MAPPING_FLAGS"], [13, 1, 1, "", "flip_set"], [13, 1, 1, "", "operator_map"], [13, 1, 1, "", "parity_set"], [13, 1, 1, "", "rho_set"], [13, 1, 1, "", "state_map"], [13, 1, 1, "", "state_map_conventional"], [13, 1, 1, "", "state_map_matrix"], [13, 1, 1, "", "update_set"]], "inquanto.mappings.QubitMappingParity": [[13, 5, 1, "", "OPERATOR_MAP_TYPES"], [13, 5, 1, "", "_MAPPING_FLAGS"], [13, 1, 1, "", "flip_set"], [13, 1, 1, "", "operator_map"], [13, 1, 1, "", "parity_set"], [13, 1, 1, "", "rho_set"], [13, 1, 1, "", "state_map"], [13, 1, 1, "", "state_map_conventional"], [13, 1, 1, "", "state_map_matrix"], [13, 1, 1, "", "update_set"]], "inquanto.minimizers": [[14, 0, 1, "", "MinimizerRotosolve"], [14, 0, 1, "", "MinimizerSGD"], [14, 0, 1, "", "MinimizerSPSA"], [14, 0, 1, "", "MinimizerScipy"], [14, 0, 1, "", "NaiveEulerIntegrator"], [14, 0, 1, "", "OptimizationMethod"], [14, 0, 1, "", "ScipyIVPIntegrator"], [14, 0, 1, "", "ScipyODEIntegrator"]], "inquanto.minimizers.MinimizerRotosolve": [[14, 1, 1, "", "generate_report"], [14, 1, 1, "", "minimize"]], "inquanto.minimizers.MinimizerSGD": [[14, 1, 1, "", "generate_report"], [14, 1, 1, "", "minimize"]], "inquanto.minimizers.MinimizerSPSA": [[14, 1, 1, "", "generate_report"], [14, 1, 1, "", "minimize"]], "inquanto.minimizers.MinimizerScipy": [[14, 1, 1, "", "generate_report"], [14, 2, 1, "", "method"], [14, 1, 1, "", "minimize"], [14, 2, 1, "", "options"]], "inquanto.minimizers.NaiveEulerIntegrator": [[14, 1, 1, "", "linear_solver_scipy_linalg"], [14, 1, 1, "", "linear_solver_scipy_pinvh"], [14, 1, 1, "", "solve"]], "inquanto.minimizers.OptimizationMethod": [[14, 5, 1, "id0", "L_BFGS_B_coarse"], [14, 5, 1, "id3", "L_BFGS_B_smooth"]], "inquanto.minimizers.ScipyIVPIntegrator": [[14, 1, 1, "", "linear_solver_scipy_linalg"], [14, 1, 1, "", "linear_solver_scipy_pinvh"], [14, 1, 1, "", "solve"]], "inquanto.minimizers.ScipyODEIntegrator": [[14, 1, 1, "", "linear_solver_scipy_linalg"], [14, 1, 1, "", "linear_solver_scipy_pinvh"], [14, 1, 1, "", "solve"]], "inquanto.operators": [[15, 0, 1, "", "ChemistryRestrictedIntegralOperator"], [15, 0, 1, "", "ChemistryRestrictedIntegralOperatorCompact"], [15, 0, 1, "", "ChemistryUnrestrictedIntegralOperator"], [15, 0, 1, "", "ChemistryUnrestrictedIntegralOperatorCompact"], [15, 0, 1, "", "CompactTwoBodyIntegralsS4"], [15, 0, 1, "", "CompactTwoBodyIntegralsS8"], [15, 0, 1, "", "DecompositionMethod"], [15, 0, 1, "", "DiagonalizedOneBodyIntegrals"], [15, 0, 1, "", "DoubleFactorizedTwoBodyIntegrals"], [15, 0, 1, "", "FCIDumpRestricted"], [15, 0, 1, "", "FCIDumpUnrestricted"], [15, 0, 1, "", "FermionOperator"], [15, 0, 1, "", "FermionOperatorList"], [15, 0, 1, "", "FermionOperatorString"], [15, 0, 1, "", "IntegralType"], [15, 0, 1, "", "OrbitalOptimizer"], [15, 0, 1, "", "OrbitalTransformer"], [15, 0, 1, "", "QubitOperator"], [15, 0, 1, "", "QubitOperatorList"], [15, 0, 1, "", "QubitOperatorString"], [15, 0, 1, "", "RestrictedDoubleFactorizedHamiltonian"], [15, 0, 1, "", "RestrictedOneBodyRDM"], [15, 0, 1, "", "RestrictedTwoBodyRDM"], [15, 0, 1, "", "SymmetryOperatorFermionic"], [15, 0, 1, "", "SymmetryOperatorFermionicFactorized"], [15, 0, 1, "", "SymmetryOperatorPauli"], [15, 0, 1, "", "SymmetryOperatorPauliFactorized"], [15, 0, 1, "", "UnrestrictedDoubleFactorizedHamiltonian"], [15, 0, 1, "", "UnrestrictedOneBodyRDM"], [15, 0, 1, "", "UnrestrictedTwoBodyRDM"], [15, 0, 1, "", "XDFCoreTensor"]], "inquanto.operators.ChemistryRestrictedIntegralOperator": [[15, 5, 1, "", "TOLERANCE"], [15, 1, 1, "", "approx_equal"], [15, 1, 1, "", "astype"], [15, 1, 1, "", "copy"], [15, 1, 1, "", "df"], [15, 1, 1, "", "double_factorize"], [15, 2, 1, "", "dtype"], [15, 1, 1, "", "effective_potential"], [15, 1, 1, "", "effective_potential_spin"], [15, 1, 1, "", "energy"], [15, 1, 1, "", "energy_electron_mean_field"], [15, 1, 1, "", "from_FermionOperator"], [15, 1, 1, "", "from_fcidump"], [15, 2, 1, "", "imag"], [15, 1, 1, "", "items"], [15, 1, 1, "", "load_h5"], [15, 1, 1, "", "norm"], [15, 1, 1, "", "print_table"], [15, 1, 1, "", "qubit_encode"], [15, 2, 1, "", "real"], [15, 1, 1, "", "rotate"], [15, 1, 1, "", "save_h5"], [15, 1, 1, "", "to_FermionOperator"], [15, 1, 1, "", "to_compact_integral_operator"], [15, 1, 1, "", "two_body_iijj"]], "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact": [[15, 5, 1, "", "TOLERANCE"], [15, 1, 1, "", "approx_equal"], [15, 1, 1, "", "astype"], [15, 1, 1, "", "copy"], [15, 1, 1, "", "df"], [15, 1, 1, "", "double_factorize"], [15, 2, 1, "", "dtype"], [15, 1, 1, "", "effective_potential"], [15, 1, 1, "", "effective_potential_spin"], [15, 1, 1, "", "energy"], [15, 1, 1, "", "energy_electron_mean_field"], [15, 1, 1, "", "from_FermionOperator"], [15, 2, 1, "", "imag"], [15, 1, 1, "", "items"], [15, 1, 1, "", "load_h5"], [15, 1, 1, "", "norm"], [15, 1, 1, "", "print_table"], [15, 1, 1, "", "qubit_encode"], [15, 2, 1, "", "real"], [15, 1, 1, "", "rotate"], [15, 1, 1, "", "save_h5"], [15, 1, 1, "", "to_FermionOperator"], [15, 1, 1, "", "to_uncompacted_integral_operator"], [15, 1, 1, "", "two_body_iijj"]], "inquanto.operators.ChemistryUnrestrictedIntegralOperator": [[15, 5, 1, "", "TOLERANCE"], [15, 1, 1, "", "approx_equal"], [15, 1, 1, "", "copy"], [15, 1, 1, "", "df"], [15, 1, 1, "", "double_factorize"], [15, 1, 1, "", "effective_potential"], [15, 1, 1, "", "energy"], [15, 1, 1, "", "energy_electron_mean_field"], [15, 1, 1, "", "from_FermionOperator"], [15, 1, 1, "", "from_fcidump"], [15, 1, 1, "", "items"], [15, 1, 1, "", "load_h5"], [15, 1, 1, "", "print_table"], [15, 1, 1, "", "qubit_encode"], [15, 1, 1, "", "rotate"], [15, 1, 1, "", "save_h5"], [15, 1, 1, "", "to_FermionOperator"], [15, 1, 1, "", "to_compact_integral_operator"]], "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact": [[15, 5, 1, "", "TOLERANCE"], [15, 1, 1, "", "approx_equal"], [15, 1, 1, "", "copy"], [15, 1, 1, "", "df"], [15, 1, 1, "", "double_factorize"], [15, 1, 1, "", "effective_potential"], [15, 1, 1, "", "energy"], [15, 1, 1, "", "energy_electron_mean_field"], [15, 1, 1, "", "from_FermionOperator"], [15, 1, 1, "", "items"], [15, 1, 1, "", "load_h5"], [15, 1, 1, "", "print_table"], [15, 1, 1, "", "qubit_encode"], [15, 1, 1, "", "rotate"], [15, 1, 1, "", "save_h5"], [15, 1, 1, "", "to_FermionOperator"], [15, 1, 1, "", "to_uncompacted_integral_operator"]], "inquanto.operators.CompactTwoBodyIntegralsS4": [[15, 1, 1, "", "astype"], [15, 1, 1, "", "check_s4_symmetry"], [15, 2, 1, "", "dtype"], [15, 1, 1, "", "from_uncompacted_integrals"], [15, 2, 1, "", "imag"], [15, 1, 1, "", "pairs"], [15, 2, 1, "", "real"], [15, 1, 1, "", "rotate"], [15, 2, 1, "", "shape"]], "inquanto.operators.CompactTwoBodyIntegralsS8": [[15, 1, 1, "", "astype"], [15, 1, 1, "", "check_s8_symmetry"], [15, 2, 1, "", "dtype"], [15, 1, 1, "", "from_uncompacted_integrals"], [15, 2, 1, "", "imag"], [15, 1, 1, "", "pairs"], [15, 2, 1, "", "real"], [15, 1, 1, "", "rotate"], [15, 2, 1, "", "shape"]], "inquanto.operators.DecompositionMethod": [[15, 5, 1, "", "CHOLESKY"], [15, 5, 1, "", "EIG"]], "inquanto.operators.DiagonalizedOneBodyIntegrals": [[15, 1, 1, "", "get_element"], [15, 1, 1, "", "get_full"], [15, 2, 1, "", "n_orb"]], "inquanto.operators.DoubleFactorizedTwoBodyIntegrals": [[15, 1, 1, "", "get_element"], [15, 1, 1, "", "get_full"]], "inquanto.operators.FCIDumpRestricted": [[15, 1, 1, "", "get_system_specification"], [15, 1, 1, "", "load"], [15, 1, 1, "", "one_body_to_array"], [15, 1, 1, "", "to_ChemistryRestrictedIntegralOperator"], [15, 1, 1, "", "to_arrays"], [15, 1, 1, "", "two_body_to_tensor"], [15, 1, 1, "", "write"]], "inquanto.operators.FCIDumpUnrestricted": [[15, 1, 1, "", "get_system_specification"], [15, 1, 1, "", "load"], [15, 1, 1, "", "one_body_to_array"], [15, 1, 1, "", "to_ChemistryUnrestrictedIntegralOperator"], [15, 1, 1, "", "to_arrays"], [15, 1, 1, "", "two_body_to_tensor"], [15, 5, 1, "", "valid_formats"]], "inquanto.operators.FermionOperator": [[15, 0, 1, "", "TrotterizeCoefficientsLocation"], [15, 1, 1, "", "apply_bra"], [15, 1, 1, "", "apply_ket"], [15, 1, 1, "", "approx_equal_to"], [15, 1, 1, "", "approx_equal_to_by_random_subs"], [15, 1, 1, "", "as_scalar"], [15, 1, 1, "", "ca"], [15, 1, 1, "", "caca"], [15, 1, 1, "", "ccaa"], [15, 1, 1, "", "clone"], [15, 2, 1, "", "coefficients"], [15, 1, 1, "", "commutator"], [15, 1, 1, "", "commutes_with"], [15, 1, 1, "", "compress"], [15, 1, 1, "", "constant"], [15, 1, 1, "", "copy"], [15, 1, 1, "", "dagger"], [15, 1, 1, "", "df"], [15, 1, 1, "", "empty"], [15, 1, 1, "", "evalf"], [15, 1, 1, "", "free_symbols"], [15, 1, 1, "", "free_symbols_ordered"], [15, 1, 1, "", "freeze"], [15, 1, 1, "", "from_list"], [15, 1, 1, "", "from_string"], [15, 1, 1, "", "from_tuple"], [15, 1, 1, "", "identity"], [15, 1, 1, "", "infer_num_spin_orbs"], [15, 1, 1, "", "is_all_coeff_complex"], [15, 1, 1, "", "is_all_coeff_imag"], [15, 1, 1, "", "is_all_coeff_real"], [15, 1, 1, "", "is_all_coeff_symbolic"], [15, 1, 1, "", "is_antihermitian"], [15, 1, 1, "", "is_any_coeff_complex"], [15, 1, 1, "", "is_any_coeff_imag"], [15, 1, 1, "", "is_any_coeff_real"], [15, 1, 1, "", "is_any_coeff_symbolic"], [15, 1, 1, "", "is_commuting_operator"], [15, 1, 1, "", "is_hermitian"], [15, 1, 1, "", "is_normal_ordered"], [15, 1, 1, "", "is_normalized"], [15, 1, 1, "", "is_parallel_with"], [15, 1, 1, "", "is_self_inverse"], [15, 1, 1, "", "is_two_body_number_conserving"], [15, 1, 1, "", "is_unit_1norm"], [15, 1, 1, "", "is_unit_2norm"], [15, 1, 1, "", "is_unit_norm"], [15, 1, 1, "", "is_unitary"], [15, 1, 1, "", "items"], [15, 1, 1, "", "key_from_str"], [15, 5, 1, "", "list_class"], [15, 1, 1, "", "make_hashable"], [15, 1, 1, "", "map"], [15, 1, 1, "", "n"], [15, 2, 1, "", "n_symbols"], [15, 1, 1, "", "norm_coefficients"], [15, 1, 1, "", "normal_ordered"], [15, 1, 1, "", "normalized"], [15, 2, 1, "", "num_spin_orbs"], [15, 1, 1, "", "permuted_operator"], [15, 1, 1, "", "print_table"], [15, 1, 1, "", "qubit_encode"], [15, 1, 1, "", "remove_global_phase"], [15, 1, 1, "", "reversed_order"], [15, 1, 1, "", "set_global_phase"], [15, 1, 1, "", "simplify"], [15, 1, 1, "", "split"], [15, 1, 1, "", "subs"], [15, 1, 1, "", "symbol_substitution"], [15, 1, 1, "", "sympify"], [15, 2, 1, "", "terms"], [15, 1, 1, "", "to_ChemistryRestrictedIntegralOperator"], [15, 1, 1, "", "to_ChemistryUnrestrictedIntegralOperator"], [15, 1, 1, "", "to_latex"], [15, 1, 1, "", "trotterize"], [15, 1, 1, "", "truncated"], [15, 1, 1, "", "unsympify"], [15, 1, 1, "", "zero"]], "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation": [[15, 5, 1, "", "INNER"], [15, 5, 1, "", "MIXED"], [15, 5, 1, "", "OUTER"], [15, 1, 1, "", "capitalize"], [15, 1, 1, "", "casefold"], [15, 1, 1, "", "center"], [15, 1, 1, "", "count"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "endswith"], [15, 1, 1, "", "expandtabs"], [15, 1, 1, "", "find"], [15, 1, 1, "", "format"], [15, 1, 1, "", "format_map"], [15, 1, 1, "", "index"], [15, 1, 1, "", "isalnum"], [15, 1, 1, "", "isalpha"], [15, 1, 1, "", "isascii"], [15, 1, 1, "", "isdecimal"], [15, 1, 1, "", "isdigit"], [15, 1, 1, "", "isidentifier"], [15, 1, 1, "", "islower"], [15, 1, 1, "", "isnumeric"], [15, 1, 1, "", "isprintable"], [15, 1, 1, "", "isspace"], [15, 1, 1, "", "istitle"], [15, 1, 1, "", "isupper"], [15, 1, 1, "", "join"], [15, 1, 1, "", "ljust"], [15, 1, 1, "", "lower"], [15, 1, 1, "", "lstrip"], [15, 1, 1, "", "maketrans"], [15, 1, 1, "", "partition"], [15, 1, 1, "", "removeprefix"], [15, 1, 1, "", "removesuffix"], [15, 1, 1, "", "replace"], [15, 1, 1, "", "rfind"], [15, 1, 1, "", "rindex"], [15, 1, 1, "", "rjust"], [15, 1, 1, "", "rpartition"], [15, 1, 1, "", "rsplit"], [15, 1, 1, "", "rstrip"], [15, 1, 1, "", "split"], [15, 1, 1, "", "splitlines"], [15, 1, 1, "", "startswith"], [15, 1, 1, "", "strip"], [15, 1, 1, "", "swapcase"], [15, 1, 1, "", "title"], [15, 1, 1, "", "translate"], [15, 1, 1, "", "upper"], [15, 1, 1, "", "zfill"]], "inquanto.operators.FermionOperatorList": [[15, 0, 1, "", "CompressScalarsBehavior"], [15, 0, 1, "", "FactoryCoefficientsLocation"], [15, 1, 1, "", "clone"], [15, 1, 1, "", "collapse_as_linear_combination"], [15, 1, 1, "", "collapse_as_product"], [15, 1, 1, "", "compress_scalars_as_product"], [15, 1, 1, "", "copy"], [15, 1, 1, "", "df"], [15, 1, 1, "", "empty"], [15, 1, 1, "", "evalf"], [15, 1, 1, "", "free_symbols"], [15, 1, 1, "", "free_symbols_ordered"], [15, 1, 1, "", "from_Operator"], [15, 1, 1, "", "from_string"], [15, 1, 1, "", "infer_num_spin_orbs"], [15, 1, 1, "", "items"], [15, 1, 1, "", "make_hashable"], [15, 1, 1, "", "map"], [15, 2, 1, "", "n_symbols"], [15, 2, 1, "", "num_spin_orbs"], [15, 5, 1, "", "operator_class"], [15, 1, 1, "", "print_table"], [15, 1, 1, "", "qubit_encode"], [15, 1, 1, "", "retrotterize"], [15, 1, 1, "", "reversed_order"], [15, 1, 1, "", "simplify"], [15, 1, 1, "", "split"], [15, 1, 1, "", "sublist"], [15, 1, 1, "", "subs"], [15, 1, 1, "", "symbol_substitution"], [15, 1, 1, "", "sympify"], [15, 1, 1, "", "trotterize_as_linear_combination"], [15, 1, 1, "", "unsympify"], [15, 1, 1, "", "untrotterize"], [15, 1, 1, "", "untrotterize_partitioned"]], "inquanto.operators.FermionOperatorList.CompressScalarsBehavior": [[15, 5, 1, "", "ALL"], [15, 5, 1, "", "ONLY_IDENTITIES_AND_ZERO"], [15, 5, 1, "", "OUTER"], [15, 1, 1, "", "capitalize"], [15, 1, 1, "", "casefold"], [15, 1, 1, "", "center"], [15, 1, 1, "", "count"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "endswith"], [15, 1, 1, "", "expandtabs"], [15, 1, 1, "", "find"], [15, 1, 1, "", "format"], [15, 1, 1, "", "format_map"], [15, 1, 1, "", "index"], [15, 1, 1, "", "isalnum"], [15, 1, 1, "", "isalpha"], [15, 1, 1, "", "isascii"], [15, 1, 1, "", "isdecimal"], [15, 1, 1, "", "isdigit"], [15, 1, 1, "", "isidentifier"], [15, 1, 1, "", "islower"], [15, 1, 1, "", "isnumeric"], [15, 1, 1, "", "isprintable"], [15, 1, 1, "", "isspace"], [15, 1, 1, "", "istitle"], [15, 1, 1, "", "isupper"], [15, 1, 1, "", "join"], [15, 1, 1, "", "ljust"], [15, 1, 1, "", "lower"], [15, 1, 1, "", "lstrip"], [15, 1, 1, "", "maketrans"], [15, 1, 1, "", "partition"], [15, 1, 1, "", "removeprefix"], [15, 1, 1, "", "removesuffix"], [15, 1, 1, "", "replace"], [15, 1, 1, "", "rfind"], [15, 1, 1, "", "rindex"], [15, 1, 1, "", "rjust"], [15, 1, 1, "", "rpartition"], [15, 1, 1, "", "rsplit"], [15, 1, 1, "", "rstrip"], [15, 1, 1, "", "split"], [15, 1, 1, "", "splitlines"], [15, 1, 1, "", "startswith"], [15, 1, 1, "", "strip"], [15, 1, 1, "", "swapcase"], [15, 1, 1, "", "title"], [15, 1, 1, "", "translate"], [15, 1, 1, "", "upper"], [15, 1, 1, "", "zfill"]], "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation": [[15, 5, 1, "", "INNER"], [15, 5, 1, "", "OUTER"], [15, 1, 1, "", "capitalize"], [15, 1, 1, "", "casefold"], [15, 1, 1, "", "center"], [15, 1, 1, "", "count"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "endswith"], [15, 1, 1, "", "expandtabs"], [15, 1, 1, "", "find"], [15, 1, 1, "", "format"], [15, 1, 1, "", "format_map"], [15, 1, 1, "", "index"], [15, 1, 1, "", "isalnum"], [15, 1, 1, "", "isalpha"], [15, 1, 1, "", "isascii"], [15, 1, 1, "", "isdecimal"], [15, 1, 1, "", "isdigit"], [15, 1, 1, "", "isidentifier"], [15, 1, 1, "", "islower"], [15, 1, 1, "", "isnumeric"], [15, 1, 1, "", "isprintable"], [15, 1, 1, "", "isspace"], [15, 1, 1, "", "istitle"], [15, 1, 1, "", "isupper"], [15, 1, 1, "", "join"], [15, 1, 1, "", "ljust"], [15, 1, 1, "", "lower"], [15, 1, 1, "", "lstrip"], [15, 1, 1, "", "maketrans"], [15, 1, 1, "", "partition"], [15, 1, 1, "", "removeprefix"], [15, 1, 1, "", "removesuffix"], [15, 1, 1, "", "replace"], [15, 1, 1, "", "rfind"], [15, 1, 1, "", "rindex"], [15, 1, 1, "", "rjust"], [15, 1, 1, "", "rpartition"], [15, 1, 1, "", "rsplit"], [15, 1, 1, "", "rstrip"], [15, 1, 1, "", "split"], [15, 1, 1, "", "splitlines"], [15, 1, 1, "", "startswith"], [15, 1, 1, "", "strip"], [15, 1, 1, "", "swapcase"], [15, 1, 1, "", "title"], [15, 1, 1, "", "translate"], [15, 1, 1, "", "upper"], [15, 1, 1, "", "zfill"]], "inquanto.operators.FermionOperatorString": [[15, 5, 1, "", "FERMION_ANNIHILATION"], [15, 5, 1, "", "FERMION_CREATION"], [15, 1, 1, "", "apply_bra"], [15, 1, 1, "", "apply_ket"], [15, 1, 1, "", "apply_state"], [15, 1, 1, "", "dagger"], [15, 1, 1, "", "from_string"], [15, 1, 1, "", "is_empty"], [15, 1, 1, "", "is_particle_conserving"], [15, 1, 1, "", "items"], [15, 1, 1, "", "to_latex"]], "inquanto.operators.IntegralType": [[15, 5, 1, "", "RESTRICTED"], [15, 5, 1, "", "UNRESTRICTED"]], "inquanto.operators.OrbitalOptimizer": [[15, 1, 1, "", "compute_unitary"], [15, 1, 1, "", "construct_random_variables"], [15, 1, 1, "", "generate_report"], [15, 1, 1, "", "gram_schmidt"], [15, 1, 1, "", "map_variables_to_rotation_matrix"], [15, 1, 1, "", "map_variables_to_skew_matrix"], [15, 1, 1, "", "optimize"], [15, 1, 1, "", "orthonormalize"], [15, 1, 1, "", "transform"]], "inquanto.operators.OrbitalTransformer": [[15, 1, 1, "", "compute_unitary"], [15, 1, 1, "", "gram_schmidt"], [15, 1, 1, "", "orthonormalize"], [15, 1, 1, "", "transform"]], "inquanto.operators.QubitOperator": [[15, 0, 1, "", "TrotterizeCoefficientsLocation"], [15, 2, 1, "", "all_nontrivial_qubits"], [15, 2, 1, "", "all_qubits"], [15, 1, 1, "", "anticommutator"], [15, 1, 1, "", "anticommutes_with"], [15, 1, 1, "", "antihermitian_part"], [15, 1, 1, "", "approx_equal_to"], [15, 1, 1, "", "approx_equal_to_by_random_subs"], [15, 1, 1, "", "as_scalar"], [15, 1, 1, "", "clone"], [15, 2, 1, "", "coefficients"], [15, 1, 1, "", "commutator"], [15, 1, 1, "", "commutes_with"], [15, 1, 1, "", "compress"], [15, 1, 1, "", "copy"], [15, 1, 1, "", "dagger"], [15, 1, 1, "", "df"], [15, 1, 1, "", "dot_state"], [15, 1, 1, "", "dot_state_ndarray"], [15, 1, 1, "", "eigenspectrum"], [15, 1, 1, "", "empty"], [15, 1, 1, "", "ensure_hermitian"], [15, 1, 1, "", "evalf"], [15, 1, 1, "", "exponentiate_commuting_operator"], [15, 1, 1, "", "exponentiate_single_term"], [15, 1, 1, "", "free_symbols"], [15, 1, 1, "", "free_symbols_ordered"], [15, 1, 1, "", "from_QubitPauliOperator"], [15, 1, 1, "", "from_serializable"], [15, 1, 1, "", "from_string"], [15, 1, 1, "", "get"], [15, 1, 1, "", "hermitian_factorisation"], [15, 1, 1, "", "hermitian_part"], [15, 1, 1, "", "identity"], [15, 1, 1, "", "is_all_coeff_complex"], [15, 1, 1, "", "is_all_coeff_imag"], [15, 1, 1, "", "is_all_coeff_real"], [15, 1, 1, "", "is_all_coeff_symbolic"], [15, 1, 1, "", "is_antihermitian"], [15, 1, 1, "", "is_any_coeff_complex"], [15, 1, 1, "", "is_any_coeff_imag"], [15, 1, 1, "", "is_any_coeff_real"], [15, 1, 1, "", "is_any_coeff_symbolic"], [15, 1, 1, "", "is_commuting_operator"], [15, 1, 1, "", "is_hermitian"], [15, 1, 1, "", "is_hermitian_coeff"], [15, 1, 1, "", "is_normalized"], [15, 1, 1, "", "is_parallel_with"], [15, 1, 1, "", "is_self_inverse"], [15, 1, 1, "", "is_unit_1norm"], [15, 1, 1, "", "is_unit_2norm"], [15, 1, 1, "", "is_unit_norm"], [15, 1, 1, "", "is_unitary"], [15, 1, 1, "", "items"], [15, 1, 1, "", "key_from_str"], [15, 5, 1, "", "list_class"], [15, 1, 1, "", "make_hashable"], [15, 1, 1, "", "map"], [15, 2, 1, "", "n_symbols"], [15, 1, 1, "", "norm_coefficients"], [15, 1, 1, "", "normalized"], [15, 1, 1, "", "pad"], [15, 1, 1, "", "padded"], [15, 2, 1, "", "pauli_strings"], [15, 1, 1, "", "print_table"], [15, 1, 1, "", "qubitwise_anticommutes_with"], [15, 1, 1, "", "qubitwise_commutes_with"], [15, 1, 1, "", "remove_global_phase"], [15, 1, 1, "", "reversed_order"], [15, 1, 1, "", "set_global_phase"], [15, 1, 1, "", "simplify"], [15, 1, 1, "", "split"], [15, 1, 1, "", "state_expectation"], [15, 1, 1, "", "state_expectation_ndarray"], [15, 1, 1, "", "subs"], [15, 1, 1, "", "symbol_substitution"], [15, 1, 1, "", "sympify"], [15, 1, 1, "", "symplectic_representation"], [15, 2, 1, "", "terms"], [15, 1, 1, "", "to_QubitPauliOperator"], [15, 1, 1, "", "to_latex"], [15, 1, 1, "", "to_serializable"], [15, 1, 1, "", "to_sparse_matrix"], [15, 1, 1, "", "toeplitz_decomposition"], [15, 1, 1, "", "totally_commuting_decomposition"], [15, 1, 1, "", "trotterize"], [15, 1, 1, "", "unsympify"], [15, 1, 1, "", "zero"]], "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation": [[15, 5, 1, "", "INNER"], [15, 5, 1, "", "MIXED"], [15, 5, 1, "", "OUTER"], [15, 1, 1, "", "capitalize"], [15, 1, 1, "", "casefold"], [15, 1, 1, "", "center"], [15, 1, 1, "", "count"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "endswith"], [15, 1, 1, "", "expandtabs"], [15, 1, 1, "", "find"], [15, 1, 1, "", "format"], [15, 1, 1, "", "format_map"], [15, 1, 1, "", "index"], [15, 1, 1, "", "isalnum"], [15, 1, 1, "", "isalpha"], [15, 1, 1, "", "isascii"], [15, 1, 1, "", "isdecimal"], [15, 1, 1, "", "isdigit"], [15, 1, 1, "", "isidentifier"], [15, 1, 1, "", "islower"], [15, 1, 1, "", "isnumeric"], [15, 1, 1, "", "isprintable"], [15, 1, 1, "", "isspace"], [15, 1, 1, "", "istitle"], [15, 1, 1, "", "isupper"], [15, 1, 1, "", "join"], [15, 1, 1, "", "ljust"], [15, 1, 1, "", "lower"], [15, 1, 1, "", "lstrip"], [15, 1, 1, "", "maketrans"], [15, 1, 1, "", "partition"], [15, 1, 1, "", "removeprefix"], [15, 1, 1, "", "removesuffix"], [15, 1, 1, "", "replace"], [15, 1, 1, "", "rfind"], [15, 1, 1, "", "rindex"], [15, 1, 1, "", "rjust"], [15, 1, 1, "", "rpartition"], [15, 1, 1, "", "rsplit"], [15, 1, 1, "", "rstrip"], [15, 1, 1, "", "split"], [15, 1, 1, "", "splitlines"], [15, 1, 1, "", "startswith"], [15, 1, 1, "", "strip"], [15, 1, 1, "", "swapcase"], [15, 1, 1, "", "title"], [15, 1, 1, "", "translate"], [15, 1, 1, "", "upper"], [15, 1, 1, "", "zfill"]], "inquanto.operators.QubitOperatorList": [[15, 0, 1, "", "CompressScalarsBehavior"], [15, 0, 1, "", "ExpandExponentialProductCoefficientsBehavior"], [15, 0, 1, "", "FactoryCoefficientsLocation"], [15, 2, 1, "", "all_nontrivial_qubits"], [15, 2, 1, "", "all_qubits"], [15, 1, 1, "", "build_subset"], [15, 1, 1, "", "clone"], [15, 1, 1, "", "collapse_as_linear_combination"], [15, 1, 1, "", "collapse_as_product"], [15, 1, 1, "", "compatibility_matrix"], [15, 1, 1, "", "compress_scalars_as_product"], [15, 1, 1, "", "compute_jacobian"], [15, 1, 1, "", "copy"], [15, 1, 1, "", "df"], [15, 1, 1, "", "dot_state_as_linear_combination"], [15, 1, 1, "", "dot_state_as_product"], [15, 1, 1, "", "empty"], [15, 1, 1, "", "equality_matrix"], [15, 1, 1, "", "evalf"], [15, 1, 1, "", "expand_exponential_product_commuting_operators"], [15, 1, 1, "", "free_symbols"], [15, 1, 1, "", "free_symbols_ordered"], [15, 1, 1, "", "from_Operator"], [15, 1, 1, "", "from_list"], [15, 1, 1, "", "from_string"], [15, 1, 1, "", "incompatibility_matrix"], [15, 1, 1, "", "items"], [15, 1, 1, "", "make_hashable"], [15, 1, 1, "", "map"], [15, 2, 1, "", "n_symbols"], [15, 5, 1, "", "operator_class"], [15, 1, 1, "", "parallelity_matrix"], [15, 1, 1, "", "print_table"], [15, 1, 1, "", "qubitwise_compatibility_matrix"], [15, 1, 1, "", "qubitwise_incompatibility_matrix"], [15, 1, 1, "", "reduce_exponents_by_commutation"], [15, 1, 1, "", "retrotterize"], [15, 1, 1, "", "reversed_order"], [15, 1, 1, "", "simplify"], [15, 1, 1, "", "split"], [15, 1, 1, "", "split_totally_commuting_set"], [15, 1, 1, "", "sublist"], [15, 1, 1, "", "subs"], [15, 1, 1, "", "symbol_substitution"], [15, 1, 1, "", "sympify"], [15, 1, 1, "", "to_sparse_matrices"], [15, 1, 1, "", "trotterize_as_linear_combination"], [15, 1, 1, "", "unsympify"], [15, 1, 1, "", "untrotterize"], [15, 1, 1, "", "untrotterize_partitioned"]], "inquanto.operators.QubitOperatorList.CompressScalarsBehavior": [[15, 5, 1, "", "ALL"], [15, 5, 1, "", "ONLY_IDENTITIES_AND_ZERO"], [15, 5, 1, "", "OUTER"], [15, 1, 1, "", "capitalize"], [15, 1, 1, "", "casefold"], [15, 1, 1, "", "center"], [15, 1, 1, "", "count"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "endswith"], [15, 1, 1, "", "expandtabs"], [15, 1, 1, "", "find"], [15, 1, 1, "", "format"], [15, 1, 1, "", "format_map"], [15, 1, 1, "", "index"], [15, 1, 1, "", "isalnum"], [15, 1, 1, "", "isalpha"], [15, 1, 1, "", "isascii"], [15, 1, 1, "", "isdecimal"], [15, 1, 1, "", "isdigit"], [15, 1, 1, "", "isidentifier"], [15, 1, 1, "", "islower"], [15, 1, 1, "", "isnumeric"], [15, 1, 1, "", "isprintable"], [15, 1, 1, "", "isspace"], [15, 1, 1, "", "istitle"], [15, 1, 1, "", "isupper"], [15, 1, 1, "", "join"], [15, 1, 1, "", "ljust"], [15, 1, 1, "", "lower"], [15, 1, 1, "", "lstrip"], [15, 1, 1, "", "maketrans"], [15, 1, 1, "", "partition"], [15, 1, 1, "", "removeprefix"], [15, 1, 1, "", "removesuffix"], [15, 1, 1, "", "replace"], [15, 1, 1, "", "rfind"], [15, 1, 1, "", "rindex"], [15, 1, 1, "", "rjust"], [15, 1, 1, "", "rpartition"], [15, 1, 1, "", "rsplit"], [15, 1, 1, "", "rstrip"], [15, 1, 1, "", "split"], [15, 1, 1, "", "splitlines"], [15, 1, 1, "", "startswith"], [15, 1, 1, "", "strip"], [15, 1, 1, "", "swapcase"], [15, 1, 1, "", "title"], [15, 1, 1, "", "translate"], [15, 1, 1, "", "upper"], [15, 1, 1, "", "zfill"]], "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior": [[15, 5, 1, "", "BRING_INTO_OPERATOR"], [15, 5, 1, "", "IGNORE"], [15, 5, 1, "", "IN_EXPONENT"], [15, 5, 1, "", "OUTSIDE_EXPONENT"], [15, 1, 1, "", "capitalize"], [15, 1, 1, "", "casefold"], [15, 1, 1, "", "center"], [15, 1, 1, "", "count"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "endswith"], [15, 1, 1, "", "expandtabs"], [15, 1, 1, "", "find"], [15, 1, 1, "", "format"], [15, 1, 1, "", "format_map"], [15, 1, 1, "", "index"], [15, 1, 1, "", "isalnum"], [15, 1, 1, "", "isalpha"], [15, 1, 1, "", "isascii"], [15, 1, 1, "", "isdecimal"], [15, 1, 1, "", "isdigit"], [15, 1, 1, "", "isidentifier"], [15, 1, 1, "", "islower"], [15, 1, 1, "", "isnumeric"], [15, 1, 1, "", "isprintable"], [15, 1, 1, "", "isspace"], [15, 1, 1, "", "istitle"], [15, 1, 1, "", "isupper"], [15, 1, 1, "", "join"], [15, 1, 1, "", "ljust"], [15, 1, 1, "", "lower"], [15, 1, 1, "", "lstrip"], [15, 1, 1, "", "maketrans"], [15, 1, 1, "", "partition"], [15, 1, 1, "", "removeprefix"], [15, 1, 1, "", "removesuffix"], [15, 1, 1, "", "replace"], [15, 1, 1, "", "rfind"], [15, 1, 1, "", "rindex"], [15, 1, 1, "", "rjust"], [15, 1, 1, "", "rpartition"], [15, 1, 1, "", "rsplit"], [15, 1, 1, "", "rstrip"], [15, 1, 1, "", "split"], [15, 1, 1, "", "splitlines"], [15, 1, 1, "", "startswith"], [15, 1, 1, "", "strip"], [15, 1, 1, "", "swapcase"], [15, 1, 1, "", "title"], [15, 1, 1, "", "translate"], [15, 1, 1, "", "upper"], [15, 1, 1, "", "zfill"]], "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation": [[15, 5, 1, "", "INNER"], [15, 5, 1, "", "OUTER"], [15, 1, 1, "", "capitalize"], [15, 1, 1, "", "casefold"], [15, 1, 1, "", "center"], [15, 1, 1, "", "count"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "endswith"], [15, 1, 1, "", "expandtabs"], [15, 1, 1, "", "find"], [15, 1, 1, "", "format"], [15, 1, 1, "", "format_map"], [15, 1, 1, "", "index"], [15, 1, 1, "", "isalnum"], [15, 1, 1, "", "isalpha"], [15, 1, 1, "", "isascii"], [15, 1, 1, "", "isdecimal"], [15, 1, 1, "", "isdigit"], [15, 1, 1, "", "isidentifier"], [15, 1, 1, "", "islower"], [15, 1, 1, "", "isnumeric"], [15, 1, 1, "", "isprintable"], [15, 1, 1, "", "isspace"], [15, 1, 1, "", "istitle"], [15, 1, 1, "", "isupper"], [15, 1, 1, "", "join"], [15, 1, 1, "", "ljust"], [15, 1, 1, "", "lower"], [15, 1, 1, "", "lstrip"], [15, 1, 1, "", "maketrans"], [15, 1, 1, "", "partition"], [15, 1, 1, "", "removeprefix"], [15, 1, 1, "", "removesuffix"], [15, 1, 1, "", "replace"], [15, 1, 1, "", "rfind"], [15, 1, 1, "", "rindex"], [15, 1, 1, "", "rjust"], [15, 1, 1, "", "rpartition"], [15, 1, 1, "", "rsplit"], [15, 1, 1, "", "rstrip"], [15, 1, 1, "", "split"], [15, 1, 1, "", "splitlines"], [15, 1, 1, "", "startswith"], [15, 1, 1, "", "strip"], [15, 1, 1, "", "swapcase"], [15, 1, 1, "", "title"], [15, 1, 1, "", "translate"], [15, 1, 1, "", "upper"], [15, 1, 1, "", "zfill"]], "inquanto.operators.QubitOperatorString": [[15, 2, 1, "", "all_nontrivial_qubits"], [15, 1, 1, "", "anticommutator"], [15, 1, 1, "", "anticommutes_with"], [15, 1, 1, "", "commutator"], [15, 1, 1, "", "commutes_with"], [15, 1, 1, "", "compress"], [15, 1, 1, "", "dot_state"], [15, 1, 1, "", "from_QubitPauliString"], [15, 1, 1, "", "from_list"], [15, 1, 1, "", "from_string"], [15, 1, 1, "", "from_symplectic_row"], [15, 1, 1, "", "from_tuple"], [15, 2, 1, "", "map"], [15, 1, 1, "", "padded"], [15, 2, 1, "", "pauli_list"], [15, 2, 1, "", "qubit_id_list"], [15, 2, 1, "", "qubit_list"], [15, 1, 1, "", "qubitwise_anticommutes_with"], [15, 1, 1, "", "qubitwise_commutes_with"], [15, 1, 1, "", "register_size"], [15, 1, 1, "", "state_expectation"], [15, 1, 1, "", "to_QubitPauliString"], [15, 1, 1, "", "to_circuit"], [15, 1, 1, "", "to_dict"], [15, 1, 1, "", "to_latex"], [15, 1, 1, "", "to_list"], [15, 1, 1, "", "to_sparse_matrix"]], "inquanto.operators.RestrictedDoubleFactorizedHamiltonian": [[15, 1, 1, "", "fermion_operators"], [15, 1, 1, "", "rotation_matrices"]], "inquanto.operators.RestrictedOneBodyRDM": [[15, 1, 1, "", "copy"], [15, 1, 1, "", "get_block"], [15, 1, 1, "", "get_occupations"], [15, 1, 1, "", "load_h5"], [15, 1, 1, "", "mean_field_rdm2"], [15, 1, 1, "", "n_orb"], [15, 1, 1, "", "n_spin_orb"], [15, 1, 1, "", "rotate"], [15, 1, 1, "", "save_h5"], [15, 1, 1, "", "set_block"], [15, 1, 1, "", "trace"]], "inquanto.operators.RestrictedTwoBodyRDM": [[15, 1, 1, "", "copy"], [15, 1, 1, "", "load_h5"], [15, 1, 1, "", "n_orb"], [15, 1, 1, "", "n_spin_orb"], [15, 1, 1, "", "rotate"], [15, 1, 1, "", "save_h5"]], "inquanto.operators.SymmetryOperatorFermionic": [[15, 0, 1, "", "TrotterizeCoefficientsLocation"], [15, 1, 1, "", "apply_bra"], [15, 1, 1, "", "apply_ket"], [15, 1, 1, "", "approx_equal_to"], [15, 1, 1, "", "approx_equal_to_by_random_subs"], [15, 1, 1, "", "as_scalar"], [15, 1, 1, "", "ca"], [15, 1, 1, "", "caca"], [15, 1, 1, "", "ccaa"], [15, 1, 1, "", "clone"], [15, 2, 1, "", "coefficients"], [15, 1, 1, "", "commutator"], [15, 1, 1, "", "commutes_with"], [15, 1, 1, "", "compress"], [15, 1, 1, "", "constant"], [15, 1, 1, "", "copy"], [15, 1, 1, "", "dagger"], [15, 1, 1, "", "df"], [15, 1, 1, "", "empty"], [15, 1, 1, "", "evalf"], [15, 1, 1, "", "free_symbols"], [15, 1, 1, "", "free_symbols_ordered"], [15, 1, 1, "", "freeze"], [15, 1, 1, "", "from_list"], [15, 1, 1, "", "from_string"], [15, 1, 1, "", "from_tuple"], [15, 1, 1, "", "identity"], [15, 1, 1, "", "infer_num_spin_orbs"], [15, 1, 1, "", "is_all_coeff_complex"], [15, 1, 1, "", "is_all_coeff_imag"], [15, 1, 1, "", "is_all_coeff_real"], [15, 1, 1, "", "is_all_coeff_symbolic"], [15, 1, 1, "", "is_antihermitian"], [15, 1, 1, "", "is_any_coeff_complex"], [15, 1, 1, "", "is_any_coeff_imag"], [15, 1, 1, "", "is_any_coeff_real"], [15, 1, 1, "", "is_any_coeff_symbolic"], [15, 1, 1, "", "is_commuting_operator"], [15, 1, 1, "", "is_hermitian"], [15, 1, 1, "", "is_normal_ordered"], [15, 1, 1, "", "is_normalized"], [15, 1, 1, "", "is_parallel_with"], [15, 1, 1, "", "is_self_inverse"], [15, 1, 1, "", "is_symmetry_of"], [15, 1, 1, "", "is_two_body_number_conserving"], [15, 1, 1, "", "is_unit_1norm"], [15, 1, 1, "", "is_unit_2norm"], [15, 1, 1, "", "is_unit_norm"], [15, 1, 1, "", "is_unitary"], [15, 1, 1, "", "items"], [15, 1, 1, "", "key_from_str"], [15, 5, 1, "", "list_class"], [15, 1, 1, "", "make_hashable"], [15, 1, 1, "", "map"], [15, 1, 1, "", "n"], [15, 2, 1, "", "n_symbols"], [15, 1, 1, "", "norm_coefficients"], [15, 1, 1, "", "normal_ordered"], [15, 1, 1, "", "normalized"], [15, 2, 1, "", "num_spin_orbs"], [15, 1, 1, "", "permuted_operator"], [15, 1, 1, "", "print_table"], [15, 1, 1, "", "qubit_encode"], [15, 1, 1, "", "remove_global_phase"], [15, 1, 1, "", "reversed_order"], [15, 1, 1, "", "set_global_phase"], [15, 1, 1, "", "simplify"], [15, 1, 1, "", "split"], [15, 1, 1, "", "subs"], [15, 1, 1, "", "symbol_substitution"], [15, 1, 1, "", "symmetry_sector"], [15, 1, 1, "", "sympify"], [15, 2, 1, "", "terms"], [15, 1, 1, "", "to_ChemistryRestrictedIntegralOperator"], [15, 1, 1, "", "to_ChemistryUnrestrictedIntegralOperator"], [15, 1, 1, "", "to_latex"], [15, 1, 1, "", "trotterize"], [15, 1, 1, "", "truncated"], [15, 1, 1, "", "unsympify"], [15, 1, 1, "", "zero"]], "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation": [[15, 5, 1, "", "INNER"], [15, 5, 1, "", "MIXED"], [15, 5, 1, "", "OUTER"], [15, 1, 1, "", "capitalize"], [15, 1, 1, "", "casefold"], [15, 1, 1, "", "center"], [15, 1, 1, "", "count"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "endswith"], [15, 1, 1, "", "expandtabs"], [15, 1, 1, "", "find"], [15, 1, 1, "", "format"], [15, 1, 1, "", "format_map"], [15, 1, 1, "", "index"], [15, 1, 1, "", "isalnum"], [15, 1, 1, "", "isalpha"], [15, 1, 1, "", "isascii"], [15, 1, 1, "", "isdecimal"], [15, 1, 1, "", "isdigit"], [15, 1, 1, "", "isidentifier"], [15, 1, 1, "", "islower"], [15, 1, 1, "", "isnumeric"], [15, 1, 1, "", "isprintable"], [15, 1, 1, "", "isspace"], [15, 1, 1, "", "istitle"], [15, 1, 1, "", "isupper"], [15, 1, 1, "", "join"], [15, 1, 1, "", "ljust"], [15, 1, 1, "", "lower"], [15, 1, 1, "", "lstrip"], [15, 1, 1, "", "maketrans"], [15, 1, 1, "", "partition"], [15, 1, 1, "", "removeprefix"], [15, 1, 1, "", "removesuffix"], [15, 1, 1, "", "replace"], [15, 1, 1, "", "rfind"], [15, 1, 1, "", "rindex"], [15, 1, 1, "", "rjust"], [15, 1, 1, "", "rpartition"], [15, 1, 1, "", "rsplit"], [15, 1, 1, "", "rstrip"], [15, 1, 1, "", "split"], [15, 1, 1, "", "splitlines"], [15, 1, 1, "", "startswith"], [15, 1, 1, "", "strip"], [15, 1, 1, "", "swapcase"], [15, 1, 1, "", "title"], [15, 1, 1, "", "translate"], [15, 1, 1, "", "upper"], [15, 1, 1, "", "zfill"]], "inquanto.operators.SymmetryOperatorFermionicFactorized": [[15, 0, 1, "", "CompressScalarsBehavior"], [15, 0, 1, "", "FactoryCoefficientsLocation"], [15, 1, 1, "", "clone"], [15, 1, 1, "", "collapse_as_linear_combination"], [15, 1, 1, "", "collapse_as_product"], [15, 1, 1, "", "compress_scalars_as_product"], [15, 1, 1, "", "copy"], [15, 1, 1, "", "df"], [15, 1, 1, "", "empty"], [15, 1, 1, "", "evalf"], [15, 1, 1, "", "free_symbols"], [15, 1, 1, "", "free_symbols_ordered"], [15, 1, 1, "", "from_Operator"], [15, 1, 1, "", "from_string"], [15, 1, 1, "", "infer_num_spin_orbs"], [15, 1, 1, "", "is_empty"], [15, 1, 1, "", "is_symmetry_of"], [15, 1, 1, "", "items"], [15, 1, 1, "", "make_hashable"], [15, 1, 1, "", "map"], [15, 2, 1, "", "n_symbols"], [15, 2, 1, "", "num_spin_orbs"], [15, 5, 1, "", "operator_class"], [15, 1, 1, "", "print_table"], [15, 1, 1, "", "qubit_encode"], [15, 1, 1, "", "retrotterize"], [15, 1, 1, "", "reversed_order"], [15, 1, 1, "", "simplify"], [15, 1, 1, "", "split"], [15, 1, 1, "", "sublist"], [15, 1, 1, "", "subs"], [15, 1, 1, "", "symbol_substitution"], [15, 1, 1, "", "symmetry_sector"], [15, 1, 1, "", "sympify"], [15, 1, 1, "", "to_symmetry_operator_fermionic"], [15, 1, 1, "", "trotterize_as_linear_combination"], [15, 1, 1, "", "unsympify"], [15, 1, 1, "", "untrotterize"], [15, 1, 1, "", "untrotterize_partitioned"]], "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior": [[15, 5, 1, "", "ALL"], [15, 5, 1, "", "ONLY_IDENTITIES_AND_ZERO"], [15, 5, 1, "", "OUTER"], [15, 1, 1, "", "capitalize"], [15, 1, 1, "", "casefold"], [15, 1, 1, "", "center"], [15, 1, 1, "", "count"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "endswith"], [15, 1, 1, "", "expandtabs"], [15, 1, 1, "", "find"], [15, 1, 1, "", "format"], [15, 1, 1, "", "format_map"], [15, 1, 1, "", "index"], [15, 1, 1, "", "isalnum"], [15, 1, 1, "", "isalpha"], [15, 1, 1, "", "isascii"], [15, 1, 1, "", "isdecimal"], [15, 1, 1, "", "isdigit"], [15, 1, 1, "", "isidentifier"], [15, 1, 1, "", "islower"], [15, 1, 1, "", "isnumeric"], [15, 1, 1, "", "isprintable"], [15, 1, 1, "", "isspace"], [15, 1, 1, "", "istitle"], [15, 1, 1, "", "isupper"], [15, 1, 1, "", "join"], [15, 1, 1, "", "ljust"], [15, 1, 1, "", "lower"], [15, 1, 1, "", "lstrip"], [15, 1, 1, "", "maketrans"], [15, 1, 1, "", "partition"], [15, 1, 1, "", "removeprefix"], [15, 1, 1, "", "removesuffix"], [15, 1, 1, "", "replace"], [15, 1, 1, "", "rfind"], [15, 1, 1, "", "rindex"], [15, 1, 1, "", "rjust"], [15, 1, 1, "", "rpartition"], [15, 1, 1, "", "rsplit"], [15, 1, 1, "", "rstrip"], [15, 1, 1, "", "split"], [15, 1, 1, "", "splitlines"], [15, 1, 1, "", "startswith"], [15, 1, 1, "", "strip"], [15, 1, 1, "", "swapcase"], [15, 1, 1, "", "title"], [15, 1, 1, "", "translate"], [15, 1, 1, "", "upper"], [15, 1, 1, "", "zfill"]], "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation": [[15, 5, 1, "", "INNER"], [15, 5, 1, "", "OUTER"], [15, 1, 1, "", "capitalize"], [15, 1, 1, "", "casefold"], [15, 1, 1, "", "center"], [15, 1, 1, "", "count"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "endswith"], [15, 1, 1, "", "expandtabs"], [15, 1, 1, "", "find"], [15, 1, 1, "", "format"], [15, 1, 1, "", "format_map"], [15, 1, 1, "", "index"], [15, 1, 1, "", "isalnum"], [15, 1, 1, "", "isalpha"], [15, 1, 1, "", "isascii"], [15, 1, 1, "", "isdecimal"], [15, 1, 1, "", "isdigit"], [15, 1, 1, "", "isidentifier"], [15, 1, 1, "", "islower"], [15, 1, 1, "", "isnumeric"], [15, 1, 1, "", "isprintable"], [15, 1, 1, "", "isspace"], [15, 1, 1, "", "istitle"], [15, 1, 1, "", "isupper"], [15, 1, 1, "", "join"], [15, 1, 1, "", "ljust"], [15, 1, 1, "", "lower"], [15, 1, 1, "", "lstrip"], [15, 1, 1, "", "maketrans"], [15, 1, 1, "", "partition"], [15, 1, 1, "", "removeprefix"], [15, 1, 1, "", "removesuffix"], [15, 1, 1, "", "replace"], [15, 1, 1, "", "rfind"], [15, 1, 1, "", "rindex"], [15, 1, 1, "", "rjust"], [15, 1, 1, "", "rpartition"], [15, 1, 1, "", "rsplit"], [15, 1, 1, "", "rstrip"], [15, 1, 1, "", "split"], [15, 1, 1, "", "splitlines"], [15, 1, 1, "", "startswith"], [15, 1, 1, "", "strip"], [15, 1, 1, "", "swapcase"], [15, 1, 1, "", "title"], [15, 1, 1, "", "translate"], [15, 1, 1, "", "upper"], [15, 1, 1, "", "zfill"]], "inquanto.operators.SymmetryOperatorPauli": [[15, 0, 1, "", "TrotterizeCoefficientsLocation"], [15, 2, 1, "", "all_nontrivial_qubits"], [15, 2, 1, "", "all_qubits"], [15, 1, 1, "", "anticommutator"], [15, 1, 1, "", "anticommutes_with"], [15, 1, 1, "", "antihermitian_part"], [15, 1, 1, "", "approx_equal_to"], [15, 1, 1, "", "approx_equal_to_by_random_subs"], [15, 1, 1, "", "as_scalar"], [15, 1, 1, "", "clone"], [15, 2, 1, "", "coefficients"], [15, 1, 1, "", "commutator"], [15, 1, 1, "", "commutes_with"], [15, 1, 1, "", "compress"], [15, 1, 1, "", "copy"], [15, 1, 1, "", "dagger"], [15, 1, 1, "", "df"], [15, 1, 1, "", "dot_state"], [15, 1, 1, "", "dot_state_ndarray"], [15, 1, 1, "", "eigenspectrum"], [15, 1, 1, "", "empty"], [15, 1, 1, "", "ensure_hermitian"], [15, 1, 1, "", "evalf"], [15, 1, 1, "", "exponentiate_commuting_operator"], [15, 1, 1, "", "exponentiate_single_term"], [15, 1, 1, "", "free_symbols"], [15, 1, 1, "", "free_symbols_ordered"], [15, 1, 1, "", "from_QubitPauliOperator"], [15, 1, 1, "", "from_serializable"], [15, 1, 1, "", "from_string"], [15, 1, 1, "", "get"], [15, 1, 1, "", "hermitian_factorisation"], [15, 1, 1, "", "hermitian_part"], [15, 1, 1, "", "identity"], [15, 1, 1, "", "is_all_coeff_complex"], [15, 1, 1, "", "is_all_coeff_imag"], [15, 1, 1, "", "is_all_coeff_real"], [15, 1, 1, "", "is_all_coeff_symbolic"], [15, 1, 1, "", "is_antihermitian"], [15, 1, 1, "", "is_any_coeff_complex"], [15, 1, 1, "", "is_any_coeff_imag"], [15, 1, 1, "", "is_any_coeff_real"], [15, 1, 1, "", "is_any_coeff_symbolic"], [15, 1, 1, "", "is_commuting_operator"], [15, 1, 1, "", "is_hermitian"], [15, 1, 1, "", "is_hermitian_coeff"], [15, 1, 1, "", "is_normalized"], [15, 1, 1, "", "is_parallel_with"], [15, 1, 1, "", "is_self_inverse"], [15, 1, 1, "", "is_symmetry_of"], [15, 1, 1, "", "is_unit_1norm"], [15, 1, 1, "", "is_unit_2norm"], [15, 1, 1, "", "is_unit_norm"], [15, 1, 1, "", "is_unitary"], [15, 1, 1, "", "items"], [15, 1, 1, "", "key_from_str"], [15, 5, 1, "", "list_class"], [15, 1, 1, "", "make_hashable"], [15, 1, 1, "", "map"], [15, 2, 1, "", "n_symbols"], [15, 1, 1, "", "norm_coefficients"], [15, 1, 1, "", "normalized"], [15, 1, 1, "", "pad"], [15, 1, 1, "", "padded"], [15, 2, 1, "", "pauli_strings"], [15, 1, 1, "", "print_table"], [15, 1, 1, "", "qubitwise_anticommutes_with"], [15, 1, 1, "", "qubitwise_commutes_with"], [15, 1, 1, "", "remove_global_phase"], [15, 1, 1, "", "reversed_order"], [15, 1, 1, "", "set_global_phase"], [15, 1, 1, "", "simplify"], [15, 1, 1, "", "split"], [15, 1, 1, "", "state_expectation"], [15, 1, 1, "", "state_expectation_ndarray"], [15, 1, 1, "", "subs"], [15, 1, 1, "", "symbol_substitution"], [15, 1, 1, "", "symmetry_sector"], [15, 1, 1, "", "sympify"], [15, 1, 1, "", "symplectic_representation"], [15, 2, 1, "", "terms"], [15, 1, 1, "", "to_QubitPauliOperator"], [15, 1, 1, "", "to_latex"], [15, 1, 1, "", "to_serializable"], [15, 1, 1, "", "to_sparse_matrix"], [15, 1, 1, "", "toeplitz_decomposition"], [15, 1, 1, "", "totally_commuting_decomposition"], [15, 1, 1, "", "trotterize"], [15, 1, 1, "", "unsympify"], [15, 1, 1, "", "zero"]], "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation": [[15, 5, 1, "", "INNER"], [15, 5, 1, "", "MIXED"], [15, 5, 1, "", "OUTER"], [15, 1, 1, "", "capitalize"], [15, 1, 1, "", "casefold"], [15, 1, 1, "", "center"], [15, 1, 1, "", "count"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "endswith"], [15, 1, 1, "", "expandtabs"], [15, 1, 1, "", "find"], [15, 1, 1, "", "format"], [15, 1, 1, "", "format_map"], [15, 1, 1, "", "index"], [15, 1, 1, "", "isalnum"], [15, 1, 1, "", "isalpha"], [15, 1, 1, "", "isascii"], [15, 1, 1, "", "isdecimal"], [15, 1, 1, "", "isdigit"], [15, 1, 1, "", "isidentifier"], [15, 1, 1, "", "islower"], [15, 1, 1, "", "isnumeric"], [15, 1, 1, "", "isprintable"], [15, 1, 1, "", "isspace"], [15, 1, 1, "", "istitle"], [15, 1, 1, "", "isupper"], [15, 1, 1, "", "join"], [15, 1, 1, "", "ljust"], [15, 1, 1, "", "lower"], [15, 1, 1, "", "lstrip"], [15, 1, 1, "", "maketrans"], [15, 1, 1, "", "partition"], [15, 1, 1, "", "removeprefix"], [15, 1, 1, "", "removesuffix"], [15, 1, 1, "", "replace"], [15, 1, 1, "", "rfind"], [15, 1, 1, "", "rindex"], [15, 1, 1, "", "rjust"], [15, 1, 1, "", "rpartition"], [15, 1, 1, "", "rsplit"], [15, 1, 1, "", "rstrip"], [15, 1, 1, "", "split"], [15, 1, 1, "", "splitlines"], [15, 1, 1, "", "startswith"], [15, 1, 1, "", "strip"], [15, 1, 1, "", "swapcase"], [15, 1, 1, "", "title"], [15, 1, 1, "", "translate"], [15, 1, 1, "", "upper"], [15, 1, 1, "", "zfill"]], "inquanto.operators.SymmetryOperatorPauliFactorized": [[15, 0, 1, "", "CompressScalarsBehavior"], [15, 0, 1, "", "ExpandExponentialProductCoefficientsBehavior"], [15, 0, 1, "", "FactoryCoefficientsLocation"], [15, 2, 1, "", "all_nontrivial_qubits"], [15, 2, 1, "", "all_qubits"], [15, 1, 1, "", "build_subset"], [15, 1, 1, "", "clone"], [15, 1, 1, "", "collapse_as_linear_combination"], [15, 1, 1, "", "collapse_as_product"], [15, 1, 1, "", "compatibility_matrix"], [15, 1, 1, "", "compress_scalars_as_product"], [15, 1, 1, "", "compute_jacobian"], [15, 1, 1, "", "copy"], [15, 1, 1, "", "df"], [15, 1, 1, "", "dot_state_as_linear_combination"], [15, 1, 1, "", "dot_state_as_product"], [15, 1, 1, "", "empty"], [15, 1, 1, "", "equality_matrix"], [15, 1, 1, "", "evalf"], [15, 1, 1, "", "expand_exponential_product_commuting_operators"], [15, 1, 1, "", "free_symbols"], [15, 1, 1, "", "free_symbols_ordered"], [15, 1, 1, "", "from_Operator"], [15, 1, 1, "", "from_list"], [15, 1, 1, "", "from_string"], [15, 1, 1, "", "incompatibility_matrix"], [15, 1, 1, "", "is_empty"], [15, 1, 1, "", "is_symmetry_of"], [15, 1, 1, "", "items"], [15, 1, 1, "", "make_hashable"], [15, 1, 1, "", "map"], [15, 2, 1, "", "n_symbols"], [15, 5, 1, "", "operator_class"], [15, 1, 1, "", "parallelity_matrix"], [15, 1, 1, "", "print_table"], [15, 1, 1, "", "qubitwise_compatibility_matrix"], [15, 1, 1, "", "qubitwise_incompatibility_matrix"], [15, 1, 1, "", "reduce_exponents_by_commutation"], [15, 1, 1, "", "retrotterize"], [15, 1, 1, "", "reversed_order"], [15, 1, 1, "", "simplify"], [15, 1, 1, "", "split"], [15, 1, 1, "", "split_totally_commuting_set"], [15, 1, 1, "", "sublist"], [15, 1, 1, "", "subs"], [15, 1, 1, "", "symbol_substitution"], [15, 1, 1, "", "symmetry_sector"], [15, 1, 1, "", "sympify"], [15, 1, 1, "", "to_sparse_matrices"], [15, 1, 1, "", "to_symmetry_operator_pauli"], [15, 1, 1, "", "trotterize_as_linear_combination"], [15, 1, 1, "", "unsympify"], [15, 1, 1, "", "untrotterize"], [15, 1, 1, "", "untrotterize_partitioned"]], "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior": [[15, 5, 1, "", "ALL"], [15, 5, 1, "", "ONLY_IDENTITIES_AND_ZERO"], [15, 5, 1, "", "OUTER"], [15, 1, 1, "", "capitalize"], [15, 1, 1, "", "casefold"], [15, 1, 1, "", "center"], [15, 1, 1, "", "count"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "endswith"], [15, 1, 1, "", "expandtabs"], [15, 1, 1, "", "find"], [15, 1, 1, "", "format"], [15, 1, 1, "", "format_map"], [15, 1, 1, "", "index"], [15, 1, 1, "", "isalnum"], [15, 1, 1, "", "isalpha"], [15, 1, 1, "", "isascii"], [15, 1, 1, "", "isdecimal"], [15, 1, 1, "", "isdigit"], [15, 1, 1, "", "isidentifier"], [15, 1, 1, "", "islower"], [15, 1, 1, "", "isnumeric"], [15, 1, 1, "", "isprintable"], [15, 1, 1, "", "isspace"], [15, 1, 1, "", "istitle"], [15, 1, 1, "", "isupper"], [15, 1, 1, "", "join"], [15, 1, 1, "", "ljust"], [15, 1, 1, "", "lower"], [15, 1, 1, "", "lstrip"], [15, 1, 1, "", "maketrans"], [15, 1, 1, "", "partition"], [15, 1, 1, "", "removeprefix"], [15, 1, 1, "", "removesuffix"], [15, 1, 1, "", "replace"], [15, 1, 1, "", "rfind"], [15, 1, 1, "", "rindex"], [15, 1, 1, "", "rjust"], [15, 1, 1, "", "rpartition"], [15, 1, 1, "", "rsplit"], [15, 1, 1, "", "rstrip"], [15, 1, 1, "", "split"], [15, 1, 1, "", "splitlines"], [15, 1, 1, "", "startswith"], [15, 1, 1, "", "strip"], [15, 1, 1, "", "swapcase"], [15, 1, 1, "", "title"], [15, 1, 1, "", "translate"], [15, 1, 1, "", "upper"], [15, 1, 1, "", "zfill"]], "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior": [[15, 5, 1, "", "BRING_INTO_OPERATOR"], [15, 5, 1, "", "IGNORE"], [15, 5, 1, "", "IN_EXPONENT"], [15, 5, 1, "", "OUTSIDE_EXPONENT"], [15, 1, 1, "", "capitalize"], [15, 1, 1, "", "casefold"], [15, 1, 1, "", "center"], [15, 1, 1, "", "count"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "endswith"], [15, 1, 1, "", "expandtabs"], [15, 1, 1, "", "find"], [15, 1, 1, "", "format"], [15, 1, 1, "", "format_map"], [15, 1, 1, "", "index"], [15, 1, 1, "", "isalnum"], [15, 1, 1, "", "isalpha"], [15, 1, 1, "", "isascii"], [15, 1, 1, "", "isdecimal"], [15, 1, 1, "", "isdigit"], [15, 1, 1, "", "isidentifier"], [15, 1, 1, "", "islower"], [15, 1, 1, "", "isnumeric"], [15, 1, 1, "", "isprintable"], [15, 1, 1, "", "isspace"], [15, 1, 1, "", "istitle"], [15, 1, 1, "", "isupper"], [15, 1, 1, "", "join"], [15, 1, 1, "", "ljust"], [15, 1, 1, "", "lower"], [15, 1, 1, "", "lstrip"], [15, 1, 1, "", "maketrans"], [15, 1, 1, "", "partition"], [15, 1, 1, "", "removeprefix"], [15, 1, 1, "", "removesuffix"], [15, 1, 1, "", "replace"], [15, 1, 1, "", "rfind"], [15, 1, 1, "", "rindex"], [15, 1, 1, "", "rjust"], [15, 1, 1, "", "rpartition"], [15, 1, 1, "", "rsplit"], [15, 1, 1, "", "rstrip"], [15, 1, 1, "", "split"], [15, 1, 1, "", "splitlines"], [15, 1, 1, "", "startswith"], [15, 1, 1, "", "strip"], [15, 1, 1, "", "swapcase"], [15, 1, 1, "", "title"], [15, 1, 1, "", "translate"], [15, 1, 1, "", "upper"], [15, 1, 1, "", "zfill"]], "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation": [[15, 5, 1, "", "INNER"], [15, 5, 1, "", "OUTER"], [15, 1, 1, "", "capitalize"], [15, 1, 1, "", "casefold"], [15, 1, 1, "", "center"], [15, 1, 1, "", "count"], [15, 1, 1, "", "encode"], [15, 1, 1, "", "endswith"], [15, 1, 1, "", "expandtabs"], [15, 1, 1, "", "find"], [15, 1, 1, "", "format"], [15, 1, 1, "", "format_map"], [15, 1, 1, "", "index"], [15, 1, 1, "", "isalnum"], [15, 1, 1, "", "isalpha"], [15, 1, 1, "", "isascii"], [15, 1, 1, "", "isdecimal"], [15, 1, 1, "", "isdigit"], [15, 1, 1, "", "isidentifier"], [15, 1, 1, "", "islower"], [15, 1, 1, "", "isnumeric"], [15, 1, 1, "", "isprintable"], [15, 1, 1, "", "isspace"], [15, 1, 1, "", "istitle"], [15, 1, 1, "", "isupper"], [15, 1, 1, "", "join"], [15, 1, 1, "", "ljust"], [15, 1, 1, "", "lower"], [15, 1, 1, "", "lstrip"], [15, 1, 1, "", "maketrans"], [15, 1, 1, "", "partition"], [15, 1, 1, "", "removeprefix"], [15, 1, 1, "", "removesuffix"], [15, 1, 1, "", "replace"], [15, 1, 1, "", "rfind"], [15, 1, 1, "", "rindex"], [15, 1, 1, "", "rjust"], [15, 1, 1, "", "rpartition"], [15, 1, 1, "", "rsplit"], [15, 1, 1, "", "rstrip"], [15, 1, 1, "", "split"], [15, 1, 1, "", "splitlines"], [15, 1, 1, "", "startswith"], [15, 1, 1, "", "strip"], [15, 1, 1, "", "swapcase"], [15, 1, 1, "", "title"], [15, 1, 1, "", "translate"], [15, 1, 1, "", "upper"], [15, 1, 1, "", "zfill"]], "inquanto.operators.UnrestrictedDoubleFactorizedHamiltonian": [[15, 1, 1, "", "fermion_operators"], [15, 1, 1, "", "rotation_matrices"]], "inquanto.operators.UnrestrictedOneBodyRDM": [[15, 1, 1, "", "copy"], [15, 1, 1, "", "get_block"], [15, 1, 1, "", "load_h5"], [15, 1, 1, "", "mean_field_rdm2"], [15, 1, 1, "", "n_orb"], [15, 1, 1, "", "n_spin_orb"], [15, 1, 1, "", "rotate"], [15, 1, 1, "", "save_h5"], [15, 1, 1, "", "set_block"], [15, 1, 1, "", "trace"]], "inquanto.operators.UnrestrictedTwoBodyRDM": [[15, 1, 1, "", "copy"], [15, 1, 1, "", "load_h5"], [15, 1, 1, "", "n_orb"], [15, 1, 1, "", "n_spin_orb"], [15, 1, 1, "", "rotate"], [15, 1, 1, "", "save_h5"]], "inquanto.operators.XDFCoreTensor": [[15, 1, 1, "", "get_element"], [15, 1, 1, "", "get_full"]], "inquanto.protocols": [[16, 0, 1, "", "BackendResultBootstrap"], [16, 0, 1, "", "BackendResultSplit"], [16, 0, 1, "", "BackendStatevectorProtocol"], [16, 0, 1, "", "CanonicalPhaseEstimation"], [16, 0, 1, "", "CircuitEncoderQuantinuum"], [16, 0, 1, "", "CombinedMitigation"], [16, 0, 1, "", "CompilationLevel"], [16, 0, 1, "", "ComputeUncompute"], [16, 0, 1, "", "ComputeUncomputeFactorizedOverlap"], [16, 0, 1, "", "CtrluStrat"], [16, 0, 1, "", "DestructiveSwapTest"], [16, 0, 1, "", "FactorizedOverlap"], [16, 0, 1, "", "HadamardTest"], [16, 0, 1, "", "HadamardTestDerivative"], [16, 0, 1, "", "HadamardTestDerivativeOverlap"], [16, 0, 1, "", "HadamardTestOverlap"], [16, 0, 1, "", "IcebergOptions"], [16, 0, 1, "", "IterativePhaseEstimation"], [16, 0, 1, "", "IterativePhaseEstimationQuantinuum"], [16, 0, 1, "", "IterativePhaseEstimationSingleCircuit"], [16, 0, 1, "", "IterativePhaseEstimationStatevector"], [16, 0, 1, "", "LinearInterpolatorPhaseEstimator"], [16, 0, 1, "", "MeasurementPluralityPhaseEstimator"], [16, 0, 1, "", "PMSV"], [16, 0, 1, "", "PauliAveraging"], [16, 0, 1, "", "PlainOptions"], [16, 0, 1, "", "ProjectiveMeasurements"], [16, 0, 1, "", "ProtocolList"], [16, 0, 1, "", "SPAM"], [16, 0, 1, "", "SparseStatevectorProtocol"], [16, 0, 1, "", "SwapFactorizedOverlap"], [16, 0, 1, "", "SwapTest"], [16, 0, 1, "", "SymbolicProtocol"]], "inquanto.protocols.BackendResultBootstrap": [[16, 1, 1, "", "calculate_mean_with_uncertainty"], [16, 1, 1, "", "get_sampled_result"], [16, 1, 1, "", "get_sampled_results"]], "inquanto.protocols.BackendResultSplit": [[16, 1, 1, "", "calculate_mean_with_uncertainty"], [16, 1, 1, "", "get_sampled_result"], [16, 1, 1, "", "get_sampled_results"]], "inquanto.protocols.BackendStatevectorProtocol": [[16, 1, 1, "", "copy"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_runner"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"]], "inquanto.protocols.CanonicalPhaseEstimation": [[16, 1, 1, "", "copy"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"]], "inquanto.protocols.CircuitEncoderQuantinuum": [[16, 5, 1, "id0", "ICEBERG"], [16, 5, 1, "id3", "PLAIN"]], "inquanto.protocols.CombinedMitigation": [[16, 1, 1, "", "post"], [16, 1, 1, "", "pre"]], "inquanto.protocols.CompilationLevel": [[16, 5, 1, "id4", "COMPILED"], [16, 5, 1, "id5", "LOGICAL"], [16, 1, 1, "", "as_integer_ratio"], [16, 1, 1, "", "bit_count"], [16, 1, 1, "", "bit_length"], [16, 1, 1, "", "conjugate"], [16, 5, 1, "", "denominator"], [16, 1, 1, "", "from_bytes"], [16, 5, 1, "", "imag"], [16, 5, 1, "", "numerator"], [16, 5, 1, "", "real"], [16, 1, 1, "", "to_bytes"]], "inquanto.protocols.ComputeUncompute": [[16, 1, 1, "", "build"], [16, 1, 1, "", "build_from"], [16, 1, 1, "", "build_protocols_from"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "compile_circuits"], [16, 1, 1, "", "cost"], [16, 1, 1, "", "credits"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "evaluate_overlap_squared"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_circuitshots"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_runner"], [16, 1, 1, "", "get_shots"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_compiled"], [16, 2, 1, "", "is_numeric"], [16, 2, 1, "", "is_run"], [16, 2, 1, "", "is_symbolic"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "n_circuit"], [16, 1, 1, "", "rebuild"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"]], "inquanto.protocols.ComputeUncomputeFactorizedOverlap": [[16, 1, 1, "", "build"], [16, 1, 1, "", "build_from"], [16, 1, 1, "", "build_protocols_from"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "compile_circuits"], [16, 1, 1, "", "cost"], [16, 1, 1, "", "credits"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "evaluate_overlap"], [16, 1, 1, "", "evaluate_overlap_imag"], [16, 1, 1, "", "evaluate_overlap_real"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_circuitshots"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_runner"], [16, 1, 1, "", "get_shots"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_compiled"], [16, 2, 1, "", "is_numeric"], [16, 2, 1, "", "is_run"], [16, 2, 1, "", "is_symbolic"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "n_circuit"], [16, 1, 1, "", "rebuild"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"]], "inquanto.protocols.CtrluStrat": [[16, 5, 1, "id10", "PAULI_EXP_BOX"], [16, 5, 1, "", "PAULI_GADGET_RZZ"], [16, 5, 1, "", "Pauli_GADGET_RZZ"], [16, 1, 1, "", "as_integer_ratio"], [16, 1, 1, "", "bit_count"], [16, 1, 1, "", "bit_length"], [16, 1, 1, "", "conjugate"], [16, 5, 1, "", "denominator"], [16, 1, 1, "", "from_bytes"], [16, 5, 1, "", "imag"], [16, 5, 1, "", "numerator"], [16, 5, 1, "", "real"], [16, 1, 1, "", "to_bytes"]], "inquanto.protocols.DestructiveSwapTest": [[16, 1, 1, "", "build"], [16, 1, 1, "", "build_from"], [16, 1, 1, "", "build_protocols_from"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "compile_circuits"], [16, 1, 1, "", "cost"], [16, 1, 1, "", "credits"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "evaluate_overlap_squared"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_circuitshots"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_runner"], [16, 1, 1, "", "get_shots"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_compiled"], [16, 2, 1, "", "is_numeric"], [16, 2, 1, "", "is_run"], [16, 2, 1, "", "is_symbolic"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "n_circuit"], [16, 1, 1, "", "rebuild"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"]], "inquanto.protocols.FactorizedOverlap": [[16, 1, 1, "", "build"], [16, 1, 1, "", "build_from"], [16, 1, 1, "", "build_protocols_from"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "compile_circuits"], [16, 1, 1, "", "cost"], [16, 1, 1, "", "credits"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "evaluate_overlap"], [16, 1, 1, "", "evaluate_overlap_imag"], [16, 1, 1, "", "evaluate_overlap_real"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_circuitshots"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_runner"], [16, 1, 1, "", "get_shots"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_compiled"], [16, 2, 1, "", "is_numeric"], [16, 2, 1, "", "is_run"], [16, 2, 1, "", "is_symbolic"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "n_circuit"], [16, 1, 1, "", "rebuild"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"]], "inquanto.protocols.HadamardTest": [[16, 1, 1, "", "build"], [16, 1, 1, "", "build_from"], [16, 1, 1, "", "build_protocols_from"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "compile_circuits"], [16, 1, 1, "", "cost"], [16, 1, 1, "", "credits"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 1, 1, "", "dataframe_measurements"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "evaluate_expectation_value"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_circuitshots"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_runner"], [16, 1, 1, "", "get_shots"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_compiled"], [16, 2, 1, "", "is_numeric"], [16, 2, 1, "", "is_run"], [16, 2, 1, "", "is_symbolic"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "n_circuit"], [16, 1, 1, "", "rebuild"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"]], "inquanto.protocols.HadamardTestDerivative": [[16, 1, 1, "", "build"], [16, 1, 1, "", "build_from"], [16, 1, 1, "", "build_protocols_from"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "compile_circuits"], [16, 1, 1, "", "cost"], [16, 1, 1, "", "credits"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "evaluate_dbra"], [16, 1, 1, "", "evaluate_dket"], [16, 1, 1, "", "evaluate_dket_complex"], [16, 1, 1, "", "evaluate_gradient"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_circuitshots"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_runner"], [16, 1, 1, "", "get_shots"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_compiled"], [16, 2, 1, "", "is_numeric"], [16, 2, 1, "", "is_run"], [16, 2, 1, "", "is_symbolic"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "n_circuit"], [16, 1, 1, "", "rebuild"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"]], "inquanto.protocols.HadamardTestDerivativeOverlap": [[16, 5, 1, "", "TOLERANCE"], [16, 1, 1, "", "build"], [16, 1, 1, "", "build_from"], [16, 1, 1, "", "build_protocols_from"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "compile_circuits"], [16, 1, 1, "", "cost"], [16, 1, 1, "", "credits"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 5, 1, "", "distributions"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "evaluate_derivative_overlap"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_circuitshots"], [16, 1, 1, "", "get_dataframe_derivative_overlap"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_runner"], [16, 1, 1, "", "get_shots"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_compiled"], [16, 2, 1, "", "is_numeric"], [16, 2, 1, "", "is_run"], [16, 2, 1, "", "is_symbolic"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "n_circuit"], [16, 5, 1, "", "parameters"], [16, 1, 1, "", "rebuild"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"]], "inquanto.protocols.HadamardTestOverlap": [[16, 1, 1, "", "build"], [16, 1, 1, "", "build_from"], [16, 1, 1, "", "build_protocols_from"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "compile_circuits"], [16, 1, 1, "", "cost"], [16, 1, 1, "", "credits"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "evaluate_overlap"], [16, 1, 1, "", "evaluate_overlap_imag"], [16, 1, 1, "", "evaluate_overlap_real"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_circuitshots"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_runner"], [16, 1, 1, "", "get_shots"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_compiled"], [16, 2, 1, "", "is_numeric"], [16, 2, 1, "", "is_run"], [16, 2, 1, "", "is_symbolic"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "n_circuit"], [16, 1, 1, "", "rebuild"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"]], "inquanto.protocols.IcebergOptions": [[16, 5, 1, "", "conditional_exit"], [16, 5, 1, "", "n_plus_states"], [16, 5, 1, "", "sx_insertion"], [16, 5, 1, "", "syndrome_interval"]], "inquanto.protocols.IterativePhaseEstimation": [[16, 2, 1, "", "backend"], [16, 2, 1, "", "beta_iqpe"], [16, 1, 1, "", "build"], [16, 1, 1, "", "build_from_circuit"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "clear_cache"], [16, 2, 1, "", "compilation_level"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_distribuiton"], [16, 2, 1, "", "get_iqpe_circuit"], [16, 1, 1, "", "get_measurement_outcome"], [16, 1, 1, "", "get_shots"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_numeric"], [16, 2, 1, "", "is_run"], [16, 2, 1, "", "is_symbolic"], [16, 2, 1, "", "k_iqpe"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "n_shots"], [16, 2, 1, "", "optimisation_level"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"], [16, 1, 1, "", "update_k_and_beta"]], "inquanto.protocols.IterativePhaseEstimationQuantinuum": [[16, 2, 1, "", "backend"], [16, 2, 1, "", "beta_iqpe"], [16, 1, 1, "", "build"], [16, 1, 1, "", "build_from_circuit"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "clear_cache"], [16, 2, 1, "", "compilation_level"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_distribuiton"], [16, 2, 1, "", "get_iqpe_circuit"], [16, 1, 1, "", "get_measurement_outcome"], [16, 1, 1, "", "get_shots"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_numeric"], [16, 2, 1, "", "is_run"], [16, 2, 1, "", "is_symbolic"], [16, 2, 1, "", "k_iqpe"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "n_shots"], [16, 2, 1, "", "optimisation_level"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"], [16, 1, 1, "", "update_k_and_beta"]], "inquanto.protocols.IterativePhaseEstimationSingleCircuit": [[16, 1, 1, "", "copy"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"]], "inquanto.protocols.IterativePhaseEstimationStatevector": [[16, 1, 1, "", "build"], [16, 1, 1, "", "build_from_circuit"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 2, 1, "", "eigenvalues"], [16, 1, 1, "", "get_distribuiton"], [16, 1, 1, "", "get_distribution"], [16, 1, 1, "", "get_measurement_outcome"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_run"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "populations"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"], [16, 1, 1, "", "update_k_and_beta"]], "inquanto.protocols.LinearInterpolatorPhaseEstimator": [[16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"]], "inquanto.protocols.MeasurementPluralityPhaseEstimator": [[16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"]], "inquanto.protocols.PMSV": [[16, 1, 1, "", "post"], [16, 1, 1, "", "pre"]], "inquanto.protocols.PauliAveraging": [[16, 1, 1, "", "build"], [16, 1, 1, "", "build_from"], [16, 1, 1, "", "build_protocols_from"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "compile_circuits"], [16, 1, 1, "", "cost"], [16, 1, 1, "", "credits"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 1, 1, "", "dataframe_measurements"], [16, 1, 1, "", "dataframe_partitioning"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "evaluate_expectation_uvalue"], [16, 1, 1, "", "evaluate_expectation_value"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_circuitshots"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_evaluator_for_result"], [16, 1, 1, "", "get_evaluators_for_results"], [16, 1, 1, "", "get_runner"], [16, 1, 1, "", "get_shots"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_compiled"], [16, 2, 1, "", "is_numeric"], [16, 2, 1, "", "is_run"], [16, 2, 1, "", "is_symbolic"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "n_circuit"], [16, 1, 1, "", "rebuild"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"], [16, 1, 1, "", "run_mitex"], [16, 1, 1, "", "run_mitres"]], "inquanto.protocols.PlainOptions": [[16, 5, 1, "", "n_plus_states"]], "inquanto.protocols.ProjectiveMeasurements": [[16, 5, 1, "", "backend"], [16, 1, 1, "", "build"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "compile_circuits"], [16, 1, 1, "", "cost"], [16, 5, 1, "", "counts"], [16, 1, 1, "", "credits"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_circuitshots"], [16, 1, 1, "", "get_dataframe_basis_states"], [16, 1, 1, "", "get_distribution"], [16, 1, 1, "", "get_dominant_basis_states"], [16, 1, 1, "", "get_phaseless_qubit_state"], [16, 1, 1, "", "get_shots"], [16, 1, 1, "", "get_zero_state_probability"], [16, 1, 1, "", "get_zero_state_uncertainty"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_compiled"], [16, 2, 1, "", "is_numeric"], [16, 2, 1, "", "is_run"], [16, 2, 1, "", "is_symbolic"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "n_circuit"], [16, 1, 1, "", "rebuild"], [16, 5, 1, "", "results"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"]], "inquanto.protocols.ProtocolList": [[16, 1, 1, "", "append"], [16, 1, 1, "", "compile_circuits"], [16, 1, 1, "", "compile_circuits_native"], [16, 1, 1, "", "cost"], [16, 1, 1, "", "credits"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 1, 1, "", "dataframe_protocol_circuit"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_circuitshots"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_shots"], [16, 2, 1, "", "is_compiled"], [16, 2, 1, "", "is_run"], [16, 1, 1, "", "launch"], [16, 2, 1, "", "n_circuit"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"]], "inquanto.protocols.SPAM": [[16, 1, 1, "", "calibrate"], [16, 1, 1, "", "calibrate_process"], [16, 1, 1, "", "calibrate_retrieve"], [16, 1, 1, "", "post"], [16, 1, 1, "", "pre"]], "inquanto.protocols.SparseStatevectorProtocol": [[16, 2, 1, "", "cache_dict"], [16, 1, 1, "", "cache_hit_report"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "copy"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_runner"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 1, 1, "", "to_array"]], "inquanto.protocols.SwapFactorizedOverlap": [[16, 1, 1, "", "build"], [16, 1, 1, "", "build_from"], [16, 1, 1, "", "build_protocols_from"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "compile_circuits"], [16, 1, 1, "", "cost"], [16, 1, 1, "", "credits"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "evaluate_overlap"], [16, 1, 1, "", "evaluate_overlap_imag"], [16, 1, 1, "", "evaluate_overlap_real"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_circuitshots"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_runner"], [16, 1, 1, "", "get_shots"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_compiled"], [16, 2, 1, "", "is_numeric"], [16, 2, 1, "", "is_run"], [16, 2, 1, "", "is_symbolic"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "n_circuit"], [16, 1, 1, "", "rebuild"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"]], "inquanto.protocols.SwapTest": [[16, 1, 1, "", "build"], [16, 1, 1, "", "build_from"], [16, 1, 1, "", "build_protocols_from"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "compile_circuits"], [16, 1, 1, "", "cost"], [16, 1, 1, "", "credits"], [16, 1, 1, "", "dataframe_circuit_shot"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "evaluate_overlap_squared"], [16, 1, 1, "", "get_circuits"], [16, 1, 1, "", "get_circuitshots"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_runner"], [16, 1, 1, "", "get_shots"], [16, 2, 1, "", "is_built"], [16, 2, 1, "", "is_compiled"], [16, 2, 1, "", "is_numeric"], [16, 2, 1, "", "is_run"], [16, 2, 1, "", "is_symbolic"], [16, 1, 1, "", "launch"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"], [16, 2, 1, "", "n_circuit"], [16, 1, 1, "", "rebuild"], [16, 1, 1, "", "retrieve"], [16, 1, 1, "", "run"]], "inquanto.protocols.SymbolicProtocol": [[16, 1, 1, "", "clear"], [16, 1, 1, "", "dump"], [16, 1, 1, "", "dumps"], [16, 1, 1, "", "get_evaluator"], [16, 1, 1, "", "get_runner"], [16, 1, 1, "", "load"], [16, 1, 1, "", "loads"]], "inquanto.spaces": [[17, 0, 1, "", "FermionSpace"], [17, 0, 1, "", "FermionSpaceBrillouin"], [17, 0, 1, "", "FermionSpaceSupercell"], [17, 0, 1, "", "ParaFermionSpace"], [17, 0, 1, "", "QubitSpace"], [17, 3, 1, "", "chain_filters"]], "inquanto.spaces.FermionSpace": [[17, 5, 1, "", "COLUMN_ORB"], [17, 5, 1, "", "COLUMN_SPIN"], [17, 5, 1, "", "SPIN_ALPHA"], [17, 5, 1, "", "SPIN_BETA"], [17, 5, 1, "", "SPIN_DOWN"], [17, 5, 1, "", "SPIN_UP"], [17, 1, 1, "", "construct_contraction_mask_from_operators"], [17, 1, 1, "", "construct_double_excitation_operators"], [17, 1, 1, "", "construct_double_ucc_operators"], [17, 1, 1, "", "construct_generalized_double_excitation_operators"], [17, 1, 1, "", "construct_generalized_double_ucc_operators"], [17, 1, 1, "", "construct_generalized_pair_double_excitation_operators"], [17, 1, 1, "", "construct_generalized_pair_double_ucc_operators"], [17, 1, 1, "", "construct_generalized_single_excitation_operators"], [17, 1, 1, "", "construct_generalized_single_ucc_operators"], [17, 1, 1, "", "construct_n_body_spinless_pdm_operators"], [17, 1, 1, "", "construct_n_body_spinless_rdm_operators"], [17, 1, 1, "", "construct_number_alpha_operator"], [17, 1, 1, "", "construct_number_beta_operator"], [17, 1, 1, "", "construct_number_operator"], [17, 1, 1, "", "construct_one_body_operator_from_integral"], [17, 1, 1, "", "construct_one_body_spatial_rdm_operators"], [17, 1, 1, "", "construct_operator_from_string"], [17, 1, 1, "", "construct_orbital_number_operators"], [17, 1, 1, "", "construct_scalar_operator"], [17, 1, 1, "", "construct_single_excitation_operators"], [17, 1, 1, "", "construct_single_ucc_operators"], [17, 1, 1, "", "construct_singlet_double_excitation_operators"], [17, 1, 1, "", "construct_singlet_double_ucc_operators"], [17, 1, 1, "", "construct_singlet_generalized_double_excitation_operators"], [17, 1, 1, "", "construct_singlet_generalized_single_excitation_operators"], [17, 1, 1, "", "construct_singlet_generalized_single_ucc_operators"], [17, 1, 1, "", "construct_singlet_single_excitation_operators"], [17, 1, 1, "", "construct_singlet_single_ucc_operators"], [17, 1, 1, "", "construct_spin_operator"], [17, 1, 1, "", "construct_sz_operator"], [17, 1, 1, "", "construct_triplet_generalized_single_excitation_operators"], [17, 1, 1, "", "construct_triplet_generalized_single_ucc_operators"], [17, 1, 1, "", "construct_two_body_operator_from_integral"], [17, 1, 1, "", "construct_two_body_operator_from_tensor"], [17, 1, 1, "", "construct_two_body_spatial_rdm_operators"], [17, 1, 1, "", "contract_occupation_space"], [17, 1, 1, "", "contract_occupation_state"], [17, 1, 1, "", "contract_operator"], [17, 1, 1, "", "contract_state_mask"], [17, 1, 1, "", "contracted_system"], [17, 1, 1, "", "convert_mask_to_index_map"], [17, 1, 1, "", "count"], [17, 1, 1, "", "from_state"], [17, 1, 1, "", "generate_cyclic_masks"], [17, 1, 1, "", "generate_cyclic_window_mask"], [17, 1, 1, "", "generate_occupation_state"], [17, 1, 1, "", "generate_occupation_state_from_list"], [17, 1, 1, "", "generate_occupation_state_from_spatial_occupation"], [17, 1, 1, "", "generate_subspace_singles"], [17, 1, 1, "", "generate_subspace_singlet_singles"], [17, 1, 1, "", "generate_subspace_triplet_singles"], [17, 1, 1, "", "get_orb_irreps_dataframe"], [17, 1, 1, "", "index"], [17, 1, 1, "", "load_h5"], [17, 2, 1, "", "n_orb"], [17, 2, 1, "", "n_spin_orb"], [17, 1, 1, "", "operator_to_latex"], [17, 1, 1, "", "orb_irreps"], [17, 1, 1, "", "point_group"], [17, 1, 1, "", "print_state"], [17, 1, 1, "", "quantum_label"], [17, 1, 1, "", "quantum_number"], [17, 1, 1, "", "quantum_number_orb"], [17, 1, 1, "", "quantum_number_spin"], [17, 1, 1, "", "save_h5"], [17, 1, 1, "", "select"], [17, 1, 1, "", "symmetry_operators_z2"], [17, 1, 1, "", "symmetry_operators_z2_in_sector"]], "inquanto.spaces.FermionSpaceBrillouin": [[17, 5, 1, "", "COLUMN_KP"], [17, 5, 1, "", "COLUMN_ORB"], [17, 5, 1, "", "COLUMN_SPIN"], [17, 5, 1, "", "SPIN_ALPHA"], [17, 5, 1, "", "SPIN_BETA"], [17, 5, 1, "", "SPIN_DOWN"], [17, 5, 1, "", "SPIN_UP"], [17, 1, 1, "", "construct_contraction_mask_from_operators"], [17, 1, 1, "", "construct_number_operator"], [17, 1, 1, "", "construct_one_body_operator_from_integral"], [17, 1, 1, "", "construct_scalar_operator"], [17, 1, 1, "", "construct_two_body_operator_from_integral"], [17, 1, 1, "", "contract_occupation_space"], [17, 1, 1, "", "contract_occupation_state"], [17, 1, 1, "", "contract_operator"], [17, 1, 1, "", "contract_state_mask"], [17, 1, 1, "", "convert_mask_to_index_map"], [17, 1, 1, "", "count"], [17, 1, 1, "", "generate_occupation_state"], [17, 1, 1, "", "generate_occupation_state_from_list"], [17, 1, 1, "", "generate_occupation_state_from_spatial_occupation"], [17, 1, 1, "", "index"], [17, 1, 1, "", "load_h5"], [17, 2, 1, "", "n_kp"], [17, 2, 1, "", "n_spin_orb"], [17, 1, 1, "", "operator_to_latex"], [17, 1, 1, "", "print_state"], [17, 1, 1, "", "quantum_label"], [17, 1, 1, "", "quantum_number"], [17, 1, 1, "", "quantum_number_kp"], [17, 1, 1, "", "quantum_number_orb"], [17, 1, 1, "", "quantum_number_spin"], [17, 1, 1, "", "save_h5"], [17, 1, 1, "", "select"]], "inquanto.spaces.FermionSpaceSupercell": [[17, 5, 1, "", "COLUMN_ORB"], [17, 5, 1, "", "COLUMN_RP"], [17, 5, 1, "", "COLUMN_SPIN"], [17, 5, 1, "", "SPIN_ALPHA"], [17, 5, 1, "", "SPIN_BETA"], [17, 5, 1, "", "SPIN_DOWN"], [17, 5, 1, "", "SPIN_UP"], [17, 1, 1, "", "check_translation_invariance"], [17, 1, 1, "", "construct_contraction_mask_from_operators"], [17, 1, 1, "", "construct_number_operator"], [17, 1, 1, "", "construct_one_body_operator_from_big_integral"], [17, 1, 1, "", "construct_permutation_operator"], [17, 1, 1, "", "construct_reverse_rp_permutation_operator"], [17, 1, 1, "", "construct_scalar_operator"], [17, 1, 1, "", "construct_shift_rp_permutation_operator"], [17, 1, 1, "", "construct_swap_rp_permutation_operator"], [17, 1, 1, "", "construct_two_body_operator_from_big_integral"], [17, 1, 1, "", "contract_occupation_state"], [17, 1, 1, "", "contract_operator"], [17, 1, 1, "", "contract_state_mask"], [17, 1, 1, "", "convert_mask_to_index_map"], [17, 1, 1, "", "count"], [17, 1, 1, "", "generate_cyclic_masks"], [17, 1, 1, "", "generate_cyclic_window_mask"], [17, 1, 1, "", "generate_fock_state_from_list"], [17, 1, 1, "", "generate_fock_state_from_spatial_big_occupation"], [17, 1, 1, "", "generate_fock_state_from_spatial_occupation"], [17, 1, 1, "", "generate_occupation_state"], [17, 1, 1, "", "index"], [17, 1, 1, "", "is_operator_permutation_invariant"], [17, 1, 1, "", "load_h5"], [17, 2, 1, "", "n_rp"], [17, 2, 1, "", "n_spin_orb"], [17, 1, 1, "", "operator_to_latex"], [17, 1, 1, "", "permutation"], [17, 1, 1, "", "permutation_matrix"], [17, 1, 1, "", "print_state"], [17, 1, 1, "", "quantum_label"], [17, 1, 1, "", "quantum_number"], [17, 1, 1, "", "quantum_number_orb"], [17, 1, 1, "", "quantum_number_rp"], [17, 1, 1, "", "quantum_number_spin"], [17, 1, 1, "", "reverse_rp_permutation"], [17, 1, 1, "", "save_h5"], [17, 1, 1, "", "select"], [17, 1, 1, "", "shift_rp_permutation"], [17, 1, 1, "", "swap_rp_permutation"], [17, 1, 1, "", "translate_operator"]], "inquanto.spaces.ParaFermionSpace": [[17, 1, 1, "", "construct_double_qubit_excitation_operators"], [17, 1, 1, "", "construct_imag_pauli_exponent_operators"], [17, 1, 1, "", "construct_operator_from_string"], [17, 1, 1, "", "construct_real_pauli_exponent_operators"], [17, 1, 1, "", "construct_scalar_operator"], [17, 1, 1, "", "construct_single_qubit_excitation_operators"], [17, 1, 1, "", "count_spin"], [17, 1, 1, "", "index"], [17, 1, 1, "", "load_h5"], [17, 1, 1, "", "n_ones"], [17, 2, 1, "", "n_orb"], [17, 2, 1, "", "n_spin_orb"], [17, 2, 1, "", "paulis"], [17, 1, 1, "", "quantum_label"], [17, 1, 1, "", "quantum_number"], [17, 1, 1, "", "quantum_number_orb"], [17, 1, 1, "", "quantum_number_spin"], [17, 1, 1, "", "save_h5"], [17, 1, 1, "", "symmetry_operators_z2"], [17, 1, 1, "", "symmetry_operators_z2_in_sector"]], "inquanto.spaces.QubitSpace": [[17, 1, 1, "", "construct_imag_pauli_exponent_operators"], [17, 1, 1, "", "construct_operator_from_string"], [17, 1, 1, "", "construct_real_pauli_exponent_operators"], [17, 1, 1, "", "load_h5"], [17, 2, 1, "", "paulis"], [17, 1, 1, "", "save_h5"], [17, 1, 1, "", "symmetry_operators_z2"], [17, 1, 1, "", "symmetry_operators_z2_in_sector"]], "inquanto.states": [[18, 0, 1, "", "FermionState"], [18, 0, 1, "", "FermionStateString"], [18, 0, 1, "", "QubitState"], [18, 0, 1, "", "QubitStateString"], [18, 0, 1, "", "State"], [18, 0, 1, "", "StateString"]], "inquanto.states.FermionState": [[18, 1, 1, "", "approx_equal_to"], [18, 1, 1, "", "approx_equal_to_by_random_subs"], [18, 2, 1, "", "basis_states"], [18, 1, 1, "", "clone"], [18, 2, 1, "", "coefficients"], [18, 1, 1, "", "compress"], [18, 1, 1, "", "copy"], [18, 1, 1, "", "df"], [18, 1, 1, "", "empty"], [18, 1, 1, "", "evalf"], [18, 1, 1, "", "free_symbols"], [18, 1, 1, "", "free_symbols_ordered"], [18, 1, 1, "", "from_ndarray"], [18, 1, 1, "", "from_sparray"], [18, 1, 1, "", "from_string"], [18, 1, 1, "", "get_numeric_representation"], [18, 1, 1, "", "get_symbolic_representation"], [18, 1, 1, "", "is_all_coeff_complex"], [18, 1, 1, "", "is_all_coeff_imag"], [18, 1, 1, "", "is_all_coeff_real"], [18, 1, 1, "", "is_all_coeff_symbolic"], [18, 1, 1, "", "is_any_coeff_complex"], [18, 1, 1, "", "is_any_coeff_imag"], [18, 1, 1, "", "is_any_coeff_real"], [18, 1, 1, "", "is_any_coeff_symbolic"], [18, 1, 1, "", "is_basis_state"], [18, 1, 1, "", "is_normalized"], [18, 1, 1, "", "is_parallel_with"], [18, 1, 1, "", "is_unit_1norm"], [18, 1, 1, "", "is_unit_2norm"], [18, 1, 1, "", "is_unit_norm"], [18, 1, 1, "", "items"], [18, 1, 1, "", "key_from_str"], [18, 1, 1, "", "load_h5"], [18, 1, 1, "", "make_hashable"], [18, 1, 1, "", "map"], [18, 2, 1, "", "n_symbols"], [18, 1, 1, "", "norm_coefficients"], [18, 1, 1, "", "normalized"], [18, 2, 1, "", "num_modes"], [18, 1, 1, "", "print_table"], [18, 1, 1, "", "qubit_encode"], [18, 1, 1, "", "remove_global_phase"], [18, 1, 1, "", "reversed_order"], [18, 1, 1, "", "save_h5"], [18, 1, 1, "", "set_global_phase"], [18, 1, 1, "", "simplify"], [18, 2, 1, "", "single_term"], [18, 1, 1, "", "split"], [18, 5, 1, "", "string_class"], [18, 1, 1, "", "subs"], [18, 1, 1, "", "symbol_substitution"], [18, 1, 1, "", "sympify"], [18, 2, 1, "", "terms"], [18, 1, 1, "", "to_ndarray"], [18, 1, 1, "", "to_sparray"], [18, 1, 1, "", "unsympify"], [18, 1, 1, "", "vdot"], [18, 1, 1, "", "zero"]], "inquanto.states.FermionStateString": [[18, 2, 1, "", "all_modes"], [18, 1, 1, "", "from_index"], [18, 1, 1, "", "from_list_int"], [18, 1, 1, "", "from_string"], [18, 2, 1, "", "hamming_weight"], [18, 1, 1, "", "load_h5"], [18, 5, 1, "", "mode_class"], [18, 2, 1, "", "num_modes"], [18, 1, 1, "", "occupations_ordered"], [18, 1, 1, "", "qubit_encode"], [18, 1, 1, "", "save_h5"], [18, 1, 1, "", "to_index"]], "inquanto.states.QubitState": [[18, 1, 1, "", "approx_equal_to"], [18, 1, 1, "", "approx_equal_to_by_random_subs"], [18, 2, 1, "", "basis_states"], [18, 1, 1, "", "clone"], [18, 2, 1, "", "coefficients"], [18, 1, 1, "", "compress"], [18, 1, 1, "", "copy"], [18, 1, 1, "", "df"], [18, 1, 1, "", "empty"], [18, 1, 1, "", "evalf"], [18, 1, 1, "", "free_symbols"], [18, 1, 1, "", "free_symbols_ordered"], [18, 1, 1, "", "from_ndarray"], [18, 1, 1, "", "from_sparray"], [18, 1, 1, "", "from_string"], [18, 1, 1, "", "get_numeric_representation"], [18, 1, 1, "", "get_symbolic_representation"], [18, 1, 1, "", "is_all_coeff_complex"], [18, 1, 1, "", "is_all_coeff_imag"], [18, 1, 1, "", "is_all_coeff_real"], [18, 1, 1, "", "is_all_coeff_symbolic"], [18, 1, 1, "", "is_any_coeff_complex"], [18, 1, 1, "", "is_any_coeff_imag"], [18, 1, 1, "", "is_any_coeff_real"], [18, 1, 1, "", "is_any_coeff_symbolic"], [18, 1, 1, "", "is_basis_state"], [18, 1, 1, "", "is_normalized"], [18, 1, 1, "", "is_parallel_with"], [18, 1, 1, "", "is_unit_1norm"], [18, 1, 1, "", "is_unit_2norm"], [18, 1, 1, "", "is_unit_norm"], [18, 1, 1, "", "items"], [18, 1, 1, "", "key_from_str"], [18, 1, 1, "", "load_h5"], [18, 1, 1, "", "make_hashable"], [18, 1, 1, "", "map"], [18, 2, 1, "", "n_qubits"], [18, 2, 1, "", "n_symbols"], [18, 1, 1, "", "norm_coefficients"], [18, 1, 1, "", "normalized"], [18, 2, 1, "", "num_modes"], [18, 2, 1, "", "num_qubits"], [18, 1, 1, "", "print_table"], [18, 1, 1, "", "remove_global_phase"], [18, 1, 1, "", "reversed_order"], [18, 1, 1, "", "save_h5"], [18, 1, 1, "", "set_global_phase"], [18, 1, 1, "", "simplify"], [18, 2, 1, "", "single_term"], [18, 1, 1, "", "split"], [18, 2, 1, "", "state_symbols"], [18, 5, 1, "", "string_class"], [18, 1, 1, "", "subs"], [18, 1, 1, "", "symbol_substitution"], [18, 1, 1, "", "sympify"], [18, 2, 1, "", "terms"], [18, 1, 1, "", "to_ndarray"], [18, 1, 1, "", "to_sparray"], [18, 1, 1, "", "unsympify"], [18, 1, 1, "", "vdot"], [18, 1, 1, "", "zero"]], "inquanto.states.QubitStateString": [[18, 2, 1, "", "all_modes"], [18, 1, 1, "", "from_index"], [18, 1, 1, "", "from_list_int"], [18, 1, 1, "", "from_string"], [18, 2, 1, "", "hamming_weight"], [18, 1, 1, "", "load_h5"], [18, 5, 1, "", "mode_class"], [18, 2, 1, "", "num_modes"], [18, 1, 1, "", "occupations_ordered"], [18, 1, 1, "", "save_h5"], [18, 1, 1, "", "to_index"]], "inquanto.states.State": [[18, 1, 1, "", "approx_equal_to"], [18, 1, 1, "", "approx_equal_to_by_random_subs"], [18, 2, 1, "", "basis_states"], [18, 1, 1, "", "clone"], [18, 2, 1, "", "coefficients"], [18, 1, 1, "", "compress"], [18, 1, 1, "", "copy"], [18, 1, 1, "", "df"], [18, 1, 1, "", "empty"], [18, 1, 1, "", "evalf"], [18, 1, 1, "", "free_symbols"], [18, 1, 1, "", "free_symbols_ordered"], [18, 1, 1, "", "from_ndarray"], [18, 1, 1, "", "from_sparray"], [18, 1, 1, "", "from_string"], [18, 1, 1, "", "get_numeric_representation"], [18, 1, 1, "", "get_symbolic_representation"], [18, 1, 1, "", "is_all_coeff_complex"], [18, 1, 1, "", "is_all_coeff_imag"], [18, 1, 1, "", "is_all_coeff_real"], [18, 1, 1, "", "is_all_coeff_symbolic"], [18, 1, 1, "", "is_any_coeff_complex"], [18, 1, 1, "", "is_any_coeff_imag"], [18, 1, 1, "", "is_any_coeff_real"], [18, 1, 1, "", "is_any_coeff_symbolic"], [18, 1, 1, "", "is_basis_state"], [18, 1, 1, "", "is_normalized"], [18, 1, 1, "", "is_parallel_with"], [18, 1, 1, "", "is_unit_1norm"], [18, 1, 1, "", "is_unit_2norm"], [18, 1, 1, "", "is_unit_norm"], [18, 1, 1, "", "items"], [18, 1, 1, "", "key_from_str"], [18, 1, 1, "", "load_h5"], [18, 1, 1, "", "make_hashable"], [18, 1, 1, "", "map"], [18, 2, 1, "", "n_symbols"], [18, 1, 1, "", "norm_coefficients"], [18, 1, 1, "", "normalized"], [18, 2, 1, "", "num_modes"], [18, 1, 1, "", "print_table"], [18, 1, 1, "", "remove_global_phase"], [18, 1, 1, "", "reversed_order"], [18, 1, 1, "", "save_h5"], [18, 1, 1, "", "set_global_phase"], [18, 1, 1, "", "simplify"], [18, 2, 1, "", "single_term"], [18, 1, 1, "", "split"], [18, 5, 1, "", "string_class"], [18, 1, 1, "", "subs"], [18, 1, 1, "", "symbol_substitution"], [18, 1, 1, "", "sympify"], [18, 2, 1, "", "terms"], [18, 1, 1, "", "to_ndarray"], [18, 1, 1, "", "to_sparray"], [18, 1, 1, "", "unsympify"], [18, 1, 1, "", "vdot"], [18, 1, 1, "", "zero"]], "inquanto.states.StateString": [[18, 2, 1, "", "all_modes"], [18, 1, 1, "", "from_index"], [18, 1, 1, "", "from_list_int"], [18, 1, 1, "", "from_string"], [18, 2, 1, "", "hamming_weight"], [18, 1, 1, "", "load_h5"], [18, 5, 1, "", "mode_class"], [18, 2, 1, "", "num_modes"], [18, 1, 1, "", "occupations_ordered"], [18, 1, 1, "", "save_h5"], [18, 1, 1, "", "to_index"]], "inquanto.symmetry": [[19, 0, 1, "", "PointGroup"], [19, 0, 1, "", "TapererZ2"]], "inquanto.symmetry.PointGroup": [[19, 1, 1, "", "compute_representation_components"], [19, 1, 1, "", "get_generators_symbol2irrep_dict"], [19, 1, 1, "", "get_irrep2symbol_dict"], [19, 1, 1, "", "get_supported_point_group_dict"], [19, 1, 1, "", "get_symbol2irrep_dict"], [19, 1, 1, "", "irrep_direct_product"], [19, 1, 1, "", "mini_character_table"], [19, 1, 1, "", "print_character_table"], [19, 1, 1, "", "supported_groups"]], "inquanto.symmetry.TapererZ2": [[19, 6, 1, "", "XOperatorMinimalError"], [19, 1, 1, "", "find_x_operators"], [19, 5, 1, "", "symmetry_operators"], [19, 5, 1, "", "symmetry_sectors"], [19, 5, 1, "", "taperable_qubits"], [19, 1, 1, "", "tapered_operator"], [19, 1, 1, "", "tapered_state"], [19, 1, 1, "", "tapering_unitary"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:function", "4": "py:module", "5": "py:attribute", "6": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"], "4": ["py", "module", "Python module"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"inquanto": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 69, 72, 85, 86, 94, 100], "cutensornet": [0, 24, 85], "nexu": [1, 24, 25, 85], "nglview": [2, 24, 26, 35, 85, 100], "phay": [3, 24, 27, 35, 85], "pyscf": [4, 22, 24, 28, 35, 36, 85], "exampl": [4, 7, 8, 9, 10, 11, 15, 16, 17, 18, 24, 107], "refer": [4, 5, 20], "extens": [4, 5, 23, 24], "fmo": [4, 22, 24, 28], "api": [5, 20], "algorithm": [6, 24, 42, 44, 46, 47, 48, 72, 107], "variat": [6, 40, 41, 42, 47, 101], "non": [6, 42, 64], "phase": [6, 16, 42, 43, 44, 79], "estim": [6, 16, 42, 43, 44, 79, 80], "note": [6, 8, 15, 16, 17, 85], "time": [6, 9, 46], "evolut": [6, 46], "ansatz": [7, 49, 50, 51, 52, 53, 54, 55, 56, 57, 107], "basic": [7, 28, 49, 59, 102], "fermion": [7, 54, 82], "space": [7, 17, 28, 72, 82, 103, 107], "multi": [7, 65], "configur": 7, "rotat": [7, 50, 56], "other": [7, 16, 22, 28, 49, 68, 76], "comput": [8, 60, 61, 62, 65, 67, 72, 107], "atom": [8, 107], "primit": [8, 65, 107], "composit": [8, 60, 62, 107], "core": [9, 107, 108], "log": 9, "paramet": 9, "method": [9, 22, 28, 70, 91], "embed": [10, 22, 24, 28, 68, 104, 105, 107], "dmet": [10, 22, 28, 68], "express": [11, 34, 70, 107], "driver": [11, 24, 28], "function": [11, 34, 63, 65], "geometri": [12, 71], "map": [13, 72, 82, 107], "minim": [14, 73, 107], "oper": [15, 72, 82, 107], "protocol": [16, 24, 25, 62, 74, 75, 76, 77, 78, 79, 81, 107], "expect": [16, 75, 82], "valu": [16, 75, 82], "overlap": [16, 64, 77, 78], "squar": [16, 78], "statevector": [16, 90], "base": [16, 49, 104, 105], "deriv": [16, 74], "error": 16, "mitig": [16, 69, 91], "util": 16, "class": [16, 28, 82], "state": [18, 56, 72, 82, 101], "symmetri": [19, 24, 83, 103, 107], "cosmo": [21, 28], "hamiltonian": [22, 28, 68, 70], "fragment": [22, 26, 28, 68, 95, 100, 108], "solver": [22, 28], "impur": [22, 28, 68], "One": [22, 28, 68], "shot": [22, 28, 68], "full": [22, 28, 68], "custom": [22, 28, 61, 68, 82], "overview": [24, 106, 107], "projection_embed": 24, "getting_start": 24, "workflow": [24, 72], "set": 25, "up": 25, "project": [25, 104, 105], "qnexu": [25, 94], "annot": 25, "visual": [26, 100], "structur": [26, 71, 100], "orbit": [26, 82, 100], "usag": [28, 59, 81], "gener": [28, 58, 71], "from": 28, "object": 28, "period": [28, 29, 71], "system": [28, 29, 35, 68, 71, 72, 90, 91, 92, 93, 95, 96], "classic": [28, 73], "post": 28, "hf": 28, "calcul": [28, 71, 98], "activ": [28, 103], "specif": 28, "ava": [28, 96], "energi": [28, 99, 105], "correct": [28, 99, 105], "nevpt2": [28, 99], "ac0": [28, 99], "qm": [28, 30], "mm": [28, 30], "user": 31, "guid": [31, 34], "instal": 32, "what": 33, "i": 33, "why": 33, "us": [33, 56, 69, 72], "how": [33, 72, 86], "work": 33, "power": 33, "tket": 33, "tm": 33, "quick": 34, "start": 34, "databas": 34, "vqe": [34, 97, 102, 103, 107], "wrapper": 34, "requir": 35, "troubleshoot": 36, "licens": 36, "algorithmadaptvq": 37, "algorithmiqeb": 37, "quantum": [38, 39, 40, 41, 43, 82, 90, 91, 93, 101], "subspac": [38, 63, 64, 93], "expans": [38, 93], "algorithmqs": 38, "self": 39, "consist": 39, "equat": 39, "motion": 39, "algorithmsceom": 39, "deflat": [40, 101], "algorithmvqd": 40, "eigensolv": 41, "algorithmvq": [41, 45], "canon": 43, "algorithmdeterministicqp": 43, "iter": [44, 65], "kitaev": 44, "": [44, 63, 69], "qpe": 44, "inform": 44, "theori": [44, 68], "algorithmmclachlanrealtim": 45, "algorithmmclachlanimagtim": 45, "trotter": [49, 57], "real": 50, "basi": 50, "chemic": [51, 72], "awar": 51, "circuit": [52, 92, 97], "compos": [53, 59], "exponenti": 54, "hardwar": [55, 91, 98], "effici": 55, "multiconfigur": 56, "given": 56, "symbol": 56, "without": 56, "The": [58, 82], "ucc": 58, "famili": 58, "unitari": 58, "coupl": 58, "cluster": 58, "partial": 61, "evalu": [61, 62, 81], "protocollist": 62, "krylov": 63, "green": 63, "matric": [64, 66], "orthogon": 64, "list": [65, 70], "tupl": 65, "over": 65, "tree": 65, "dimension": 65, "arrai": 65, "call": 65, "reduc": 66, "densiti": [66, 68], "matrix": 68, "correl": 68, "model": [68, 70, 90], "nois": [69, 90, 91], "qermit": 69, "pmsv": 69, "spam": 69, "file": 70, "molecular": 71, "initi": 71, "modifi": 71, "properti": 71, "By": 71, "group": [71, 83], "mani": 71, "chemistri": [72, 82], "prepar": [72, 90], "run": [72, 81, 90, 91], "expert": 72, "minimizerscipi": 73, "minimizerrotosolv": 73, "minimizersgd": 73, "spsa": 73, "hadamardtestderiv": 74, "hadamardtestderivativeoverlap": 74, "pauliaverag": 75, "hadamardtest": 75, "averag": 76, "projectivemeasur": 76, "hadamardtestoverlap": 77, "factorizedoverlap": 77, "swapfactorizedoverlap": 77, "computeuncomputefactorizedoverlap": 77, "computeuncomput": 78, "swaptest": 78, "destructiveswaptest": 78, "iterativephaseestim": 79, "iterativephaseestimationquantinuum": 79, "iterativephaseestimationstatevector": 79, "resourc": 80, "instanti": 81, "build": 81, "compil": 81, "fermionspac": 82, "qubit": 82, "integr": 82, "interfac": 82, "packag": 82, "via": 82, "fcidump": 82, "unrestrict": 82, "transform": 82, "optim": 82, "doubl": 82, "factor": 82, "find": 83, "point": 83, "z2": 83, "taper": 83, "bibliographi": 84, "releas": 85, "4": 85, "2": [85, 90, 91, 97], "0": [85, 90], "1": [85, 90, 91, 96], "8": 85, "3": [85, 90, 91, 98], "7": 85, "6": 85, "5": 85, "v0": 85, "cite": 86, "contact": 87, "support": 87, "softwar": 88, "licenc": 88, "notic": 88, "open": 89, "sourc": 89, "attribut": 89, "aer": 90, "simul": [90, 102], "noiseless": 90, "simpl": 90, "quantinuum": [91, 92, 93, 98], "defin": 91, "machin": 91, "emul": 91, "launch": 92, "retriev": 92, "result": 92, "b": 94, "tutori": [94, 108], "tackl": 95, "larger": 95, "fe4n2": [96, 97, 98, 108], "construct": [96, 97], "casscf": 96, "adapt": [97, 107], "excit": [101, 103], "A": 102, "extend": 103, "h2": 103, "bond": 103, "stretch": 103, "h2o": 103, "bend": 103, "reduct": 103, "allow": 103, "backend": [106, 108], "qse": 107, "time_evolut": 107, "vqd": 107, "gf": 107, "rdm": 107, "phase_estim": 107, "case": 108, "studi": 108}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"inquanto-cutensornet": [[0, "module-inquanto.extensions.cutensornet"]], "inquanto-nexus": [[1, "module-inquanto.extensions.nexus"]], "inquanto-nglview": [[2, "module-inquanto.extensions.nglview"], [35, "inquanto-nglview"]], "inquanto-phayes": [[3, "module-inquanto.extensions.phayes"], [35, "inquanto-phayes"]], "inquanto-pyscf": [[4, "module-inquanto.extensions.pyscf"], [35, "inquanto-pyscf"], [36, "inquanto-pyscf"]], "Examples": [[4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [7, null], [7, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [9, null], [9, null], [10, null], [10, null], [11, null], [11, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [16, null], [16, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [18, null], [18, null], [18, null], [18, null], [18, null], [18, null], [18, null], [18, null], [18, null], [18, null], [18, null], [18, null], [18, null], [18, null], [18, null], [18, null], [18, null]], "References": [[4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null]], "inquanto.extensions.pyscf.fmo": [[4, "module-inquanto.extensions.pyscf.fmo"]], "InQuanto-Extensions API Reference": [[5, "inquanto-extensions-api-reference"]], "inquanto.algorithms": [[6, "inquanto-algorithms"]], "Variational": [[6, "variational"]], "Non-variational": [[6, "non-variational"]], "Phase estimation": [[6, "phase-estimation"]], "Notes": [[6, null], [6, null], [6, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [8, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [15, null], [16, null], [16, null], [16, null], [16, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null], [17, null]], "Time evolution": [[6, "time-evolution"]], "inquanto.ansatzes": [[7, "inquanto-ansatzes"]], "Basic ansatzes": [[7, "basic-ansatzes"]], "Fermion Space ansatzes": [[7, "fermion-space-ansatzes"]], "Multi-configurational ansatzes": [[7, "multi-configurational-ansatzes"]], "Rotational ansatzes": [[7, "rotational-ansatzes"]], "Other ansatzes": [[7, "other-ansatzes"]], "inquanto.computables": [[8, "inquanto-computables"]], "inquanto.computables.atomic": [[8, "module-inquanto.computables.atomic"]], "inquanto.computables.primitive": [[8, "module-inquanto.computables.primitive"]], "Example": [[8, null], [8, null], [8, null], [8, null], [15, null]], "inquanto.computables.composite": [[8, "module-inquanto.computables.composite"]], "inquanto.core": [[9, "inquanto-core"]], "Logging and Timing": [[9, "logging-and-timing"]], "Parameters": [[9, "parameters"]], "Methods": [[9, "module-inquanto.core"]], "inquanto.embeddings": [[10, "inquanto-embeddings"]], "DMET": [[10, "module-inquanto.embeddings.dmet"]], "inquanto.express": [[11, "inquanto-express"]], "Express drivers": [[11, "express-drivers"]], "Express functions": [[11, "module-inquanto.express"]], "inquanto.geometries": [[12, "inquanto-geometries"]], "inquanto.mappings": [[13, "inquanto-mappings"]], "inquanto.minimizers": [[14, "module-inquanto.minimizers"]], "inquanto.operators": [[15, "module-inquanto.operators"]], "inquanto.protocols": [[16, "inquanto-protocols"]], "Protocols for Expectation Values": [[16, "protocols-for-expectation-values"]], "Protocols for Overlap Squared": [[16, "protocols-for-overlap-squared"]], "Protocols for Overlaps": [[16, "protocols-for-overlaps"]], "Statevector-Based Protocols": [[16, "statevector-based-protocols"]], "Protocols for Derivatives": [[16, "protocols-for-derivatives"]], "Protocols for Phase-Estimation": [[16, "protocols-for-phase-estimation"]], "Other protocols": [[16, "other-protocols"]], "Error mitigation": [[16, "error-mitigation"]], "Utility classes": [[16, "utility-classes"]], "inquanto.spaces": [[17, "module-inquanto.spaces"]], "inquanto.states": [[18, "module-inquanto.states"]], "inquanto.symmetry": [[19, "module-inquanto.symmetry"]], "InQuanto API Reference": [[20, "inquanto-api-reference"]], "COSMO": [[21, "cosmo"], [28, "cosmo"]], "Hamiltonians for Embedding methods": [[22, "hamiltonians-for-embedding-methods"], [28, "hamiltonians-for-embedding-methods"]], "DMET with PySCF fragment solvers": [[22, "dmet-with-pyscf-fragment-solvers"], [28, "dmet-with-pyscf-fragment-solvers"]], "Impurity DMET": [[22, "impurity-dmet"], [28, "impurity-dmet"], [68, "impurity-dmet"]], "One-shot DMET and full DMET": [[22, "one-shot-dmet-and-full-dmet"], [28, "one-shot-dmet-and-full-dmet"]], "DMET with a custom solver": [[22, "dmet-with-a-custom-solver"], [28, "dmet-with-a-custom-solver"]], "Other PySCF Hamiltonians for DMET": [[22, "other-pyscf-hamiltonians-for-dmet"], [28, "other-pyscf-hamiltonians-for-dmet"]], "FMO with a custom solver": [[22, "fmo-with-a-custom-solver"], [28, "fmo-with-a-custom-solver"]], "InQuanto-Extensions": [[23, "inquanto-extensions"]], "Overview of InQuanto extensions examples": [[24, "overview-of-inquanto-extensions-examples"]], "inquanto-pyscf/drivers": [[24, "inquanto-pyscf-drivers"]], "inquanto-pyscf/embeddings": [[24, "inquanto-pyscf-embeddings"]], "inquanto-pyscf/fmo": [[24, "inquanto-pyscf-fmo"]], "inquanto-pyscf/projection_embedding": [[24, "inquanto-pyscf-projection-embedding"]], "inquanto-pyscf/symmetry": [[24, "inquanto-pyscf-symmetry"]], "inquanto-phayes/algorithm": [[24, "inquanto-phayes-algorithm"]], "inquanto-nglview/nglview": [[24, "inquanto-nglview-nglview"]], "inquanto-cutensornet/algorithms": [[24, "inquanto-cutensornet-algorithms"]], "inquanto-cutensornet/protocols": [[24, "inquanto-cutensornet-protocols"]], "inquanto-nexus/getting_started": [[24, "inquanto-nexus-getting-started"]], "inquanto-nexus/workflows": [[24, "inquanto-nexus-workflows"]], "InQuanto-Nexus": [[25, "inquanto-nexus"]], "Setting up Projects and Protocols with QNexus": [[25, "setting-up-projects-and-protocols-with-qnexus"]], "Annotations": [[25, "annotations"]], "InQuanto-NGLView": [[26, "inquanto-nglview"]], "Visualizing Structures": [[26, "visualizing-structures"], [100, "visualizing-structures"]], "Visualizing Fragments": [[26, "visualizing-fragments"], [100, "visualizing-fragments"]], "Visualizing Orbitals": [[26, "visualizing-orbitals"], [100, "visualizing-orbitals"]], "InQuanto-Phayes": [[27, "inquanto-phayes"]], "InQuanto-PySCF": [[28, "inquanto-pyscf"]], "Basic usage": [[28, "basic-usage"]], "Generating a driver from a PySCF object": [[28, "generating-a-driver-from-a-pyscf-object"]], "Periodic systems": [[28, "periodic-systems"], [29, "periodic-systems"], [71, "periodic-systems"]], "Classical post-HF calculations": [[28, "classical-post-hf-calculations"]], "InQuanto-PySCF driver classes": [[28, "inquanto-pyscf-driver-classes"]], "Active space specification and AVAS": [[28, "active-space-specification-and-avas"]], "Energy correction with NEVPT2 and AC0": [[28, "energy-correction-with-nevpt2-and-ac0"]], "QM/MM": [[28, "qm-mm"], [30, "qm-mm"]], "InQuanto User Guide": [[31, "inquanto-user-guide"]], "Installing InQuanto": [[32, "installing-inquanto"]], "What is InQuanto?": [[33, "what-is-inquanto"]], "Why use InQuanto?": [[33, "why-use-inquanto"]], "How it works": [[33, "how-it-works"]], "Powered by TKET TM": [[33, "powered-by-tket-tm"]], "Quick-start guide": [[34, "quick-start-guide"]], "Express database": [[34, "express-database"]], "VQE wrapper function": [[34, "vqe-wrapper-function"]], "System Requirements": [[35, "system-requirements"]], "inquanto": [[35, "inquanto"]], "Troubleshooting": [[36, "troubleshooting"]], "Licensing": [[36, "licensing"]], "AlgorithmAdaptVQE and AlgorithmIQEB": [[37, "algorithmadaptvqe-and-algorithmiqeb"]], "Quantum Subspace Expansion AlgorithmQSE": [[38, "quantum-subspace-expansion-algorithmqse"]], "Quantum Self Consistent Equation of Motion AlgorithmSCEOM": [[39, "quantum-self-consistent-equation-of-motion-algorithmsceom"]], "Variational Quantum Deflation AlgorithmVQD": [[40, "variational-quantum-deflation-algorithmvqd"]], "Variational Quantum Eigensolver AlgorithmVQE": [[41, "variational-quantum-eigensolver-algorithmvqe"]], "Non-variational and Phase Estimation algorithms": [[42, "non-variational-and-phase-estimation-algorithms"]], "Canonical Quantum Phase Estimation AlgorithmDeterministicQPE": [[43, "canonical-quantum-phase-estimation-algorithmdeterministicqpe"]], "Iterative Phase Estimation Algorithms": [[44, "iterative-phase-estimation-algorithms"]], "Kitaev\u2019s QPE": [[44, "kitaev-s-qpe"]], "Information theory QPE": [[44, "information-theory-qpe"]], "AlgorithmVQS, AlgorithmMcLachlanRealTime and AlgorithmMcLachlanImagTime": [[45, "algorithmvqs-algorithmmclachlanrealtime-and-algorithmmclachlanimagtime"]], "Time evolution algorithms": [[46, "time-evolution-algorithms"]], "Variational Algorithms": [[47, "variational-algorithms"]], "Algorithms": [[48, "algorithms"]], "Ansatzes": [[49, "ansatzes"]], "Trotter based": [[49, "trotter-based"]], "Basic ansatz": [[49, "basic-ansatz"]], "Other Ansatz": [[49, "other-ansatz"], [49, null]], "Real Basis Rotation Ansatzes": [[50, "real-basis-rotation-ansatzes"]], "Chemically Aware Ansatz": [[51, "chemically-aware-ansatz"]], "Circuit Ansatz": [[52, "circuit-ansatz"]], "Composed Ansatz": [[53, "composed-ansatz"]], "Fermionic Exponentiated Ansatz": [[54, "fermionic-exponentiated-ansatz"]], "Hardware Efficient Ansatz": [[55, "hardware-efficient-ansatz"]], "Multiconfiguration States Using Givens Rotations": [[56, "multiconfiguration-states-using-givens-rotations"]], "Symbolic Multiconfiguration Ansatz": [[56, "symbolic-multiconfiguration-ansatz"]], "Multiconfiguration states without Givens rotations": [[56, "multiconfiguration-states-without-givens-rotations"]], "Trotter Ansatz": [[57, "trotter-ansatz"]], "The UCC Family": [[58, "the-ucc-family"]], "Unitary Coupled Cluster": [[58, "unitary-coupled-cluster"]], "Generalized Unitary Coupled Cluster": [[58, "generalized-unitary-coupled-cluster"]], "Basic Usage and Composability": [[59, "basic-usage-and-composability"]], "Composite Computables": [[60, "composite-computables"]], "Custom Computables & Partial Evaluations": [[61, "custom-computables-partial-evaluations"]], "Evaluating Computables with Protocols": [[62, "evaluating-computables-with-protocols"]], "Evaluating Composite Computables with ProtocolList": [[62, "evaluating-composite-computables-with-protocollist"]], "Krylov subspace & Green\u2019s functions": [[63, "krylov-subspace-green-s-functions"]], "Overlap Matrices & Non-Orthogonal Subspaces": [[64, "overlap-matrices-non-orthogonal-subspaces"]], "Primitive Computables": [[65, "primitive-computables"]], "Computable Lists and Tuples": [[65, "computable-lists-and-tuples"]], "Iterating Over Computable Trees": [[65, "iterating-over-computable-trees"]], "Computable Multi-dimensional Arrays": [[65, "computable-multi-dimensional-arrays"]], "Calling a Function with Computables": [[65, "calling-a-function-with-computables"]], "Reduced Density Matrices": [[66, "reduced-density-matrices"]], "Computables": [[67, "computables"]], "Density Matrix Embedding Theory": [[68, "density-matrix-embedding-theory"]], "One-shot DMET": [[68, "one-shot-dmet"]], "Full DMET with correlation matrix": [[68, "full-dmet-with-correlation-matrix"]], "Custom fragments": [[68, "custom-fragments"]], "DMET for model systems and other Hamiltonians": [[68, "dmet-for-model-systems-and-other-hamiltonians"]], "Noise mitigation": [[69, "noise-mitigation"]], "Using Qermit": [[69, "using-qermit"]], "Using InQuanto\u2019s PMSV and SPAM": [[69, "using-inquanto-s-pmsv-and-spam"]], "Express": [[70, "express"]], "Express methods": [[70, "express-methods"]], "Model hamiltonians": [[70, "model-hamiltonians"]], "List of Express files": [[70, "list-of-express-files"]], "Geometry": [[71, "geometry"]], "Molecular Systems": [[71, "molecular-systems"]], "Initializing Structures": [[71, "initializing-structures"]], "Calculating and Modifying Properties": [[71, "calculating-and-modifying-properties"]], "Calculating and Modifying Properties By Group": [[71, "calculating-and-modifying-properties-by-group"]], "Generating Many Structures": [[71, "generating-many-structures"]], "How to use InQuanto": [[72, "how-to-use-inquanto"]], "Chemistry Workflows": [[72, "chemistry-workflows"]], "Preparing Chemical Systems": [[72, "preparing-chemical-systems"]], "Spaces, Operators, States and Mappings": [[72, "spaces-operators-states-and-mappings"]], "Running Computables and Algorithms": [[72, "running-computables-and-algorithms"]], "Expert use of InQuanto": [[72, "expert-use-of-inquanto"]], "Classical Minimizers": [[73, "classical-minimizers"]], "MinimizerScipy": [[73, "minimizerscipy"]], "MinimizerRotosolve": [[73, "minimizerrotosolve"]], "MinimizerSGD": [[73, "minimizersgd"]], "Minimizer SPSA": [[73, "minimizer-spsa"]], "Protocols for derivatives": [[74, "protocols-for-derivatives"]], "HadamardTestDerivative": [[74, "hadamardtestderivative"]], "HadamardTestDerivativeOverlap": [[74, "hadamardtestderivativeoverlap"]], "Protocols for expectation values": [[75, "protocols-for-expectation-values"]], "PauliAveraging": [[75, "pauliaveraging"]], "HadamardTest": [[75, "hadamardtest"]], "Other averaging protocols": [[76, "other-averaging-protocols"]], "ProjectiveMeasurements": [[76, "projectivemeasurements"]], "Protocols for overlaps": [[77, "protocols-for-overlaps"]], "HadamardTestOverlap": [[77, "hadamardtestoverlap"]], "FactorizedOverlap": [[77, "factorizedoverlap"]], "SwapFactorizedOverlap": [[77, "swapfactorizedoverlap"]], "ComputeUncomputeFactorizedOverlap": [[77, "computeuncomputefactorizedoverlap"]], "Protocols for overlap squared": [[78, "protocols-for-overlap-squared"]], "ComputeUncompute": [[78, "computeuncompute"]], "SwapTest": [[78, "swaptest"]], "DestructiveSwapTest": [[78, "destructiveswaptest"]], "Protocols for Phase Estimation": [[79, "protocols-for-phase-estimation"]], "IterativePhaseEstimation": [[79, "iterativephaseestimation"]], "IterativePhaseEstimationQuantinuum": [[79, "iterativephaseestimationquantinuum"]], "IterativePhaseEstimationStatevector": [[79, "iterativephaseestimationstatevector"]], "Resource estimation": [[80, "resource-estimation"]], "Protocols": [[81, "protocols"]], "Usage": [[81, "usage"]], "Instantiate": [[81, "instantiate"]], "Build": [[81, "build"]], "Compile": [[81, "compile"]], "Run": [[81, "run"]], "Evaluate": [[81, "evaluate"]], "Spaces, Operators, and States": [[82, "spaces-operators-and-states"]], "Fermionic Spaces": [[82, "fermionic-spaces"]], "The FermionSpace Class": [[82, "the-fermionspace-class"]], "Fermion Operators & States": [[82, "fermion-operators-states"]], "Qubit spaces, operators and states": [[82, "qubit-spaces-operators-and-states"]], "Qubit Operators": [[82, "qubit-operators"]], "Qubit States & Expectation Values": [[82, "qubit-states-expectation-values"]], "Fermion-to-Qubit Mapping": [[82, "fermion-to-qubit-mapping"]], "Custom mappings": [[82, "custom-mappings"]], "Integral Operators": [[82, "integral-operators"]], "Interfacing with Quantum Chemistry Packages via FCIDUMP": [[82, "interfacing-with-quantum-chemistry-packages-via-fcidump"]], "Unrestricted integrals": [[82, "unrestricted-integrals"]], "Orbital Transformation and Optimization": [[82, "orbital-transformation-and-optimization"]], "Double Factorization": [[82, "double-factorization"]], "Symmetry": [[83, "symmetry"]], "Finding symmetries": [[83, "finding-symmetries"]], "Point Group Symmetry": [[83, "point-group-symmetry"]], "Z2 Tapering": [[83, "z2-tapering"]], "Bibliography": [[84, "bibliography"]], "Release Notes": [[85, "release-notes"]], "InQuanto 4.2.0": [[85, "inquanto-4-2-0"]], "InQuanto 4.1.0": [[85, "inquanto-4-1-0"]], "InQuanto 4.0.1": [[85, "inquanto-4-0-1"]], "InQuanto 4.0.0": [[85, "inquanto-4-0-0"]], "InQuanto-PySCF 2.0.0": [[85, "inquanto-pyscf-2-0-0"]], "InQuanto-NGLView 0.8.0": [[85, "inquanto-nglview-0-8-0"]], "InQuanto-Phayes 0.3.0": [[85, "inquanto-phayes-0-3-0"]], "InQuanto-Nexus 0.1.0": [[85, "inquanto-nexus-0-1-0"]], "InQuanto-cuTensorNet 0.0.0": [[85, "inquanto-cutensornet-0-0-0"]], "InQuanto 3.7.0": [[85, "inquanto-3-7-0"]], "InQuanto 3.6.1": [[85, "inquanto-3-6-1"]], "InQuanto 3.5.8": [[85, "inquanto-3-5-8"]], "InQuanto 3.5.7": [[85, "inquanto-3-5-7"]], "InQuanto 3.5.6": [[85, "inquanto-3-5-6"]], "InQuanto 3.5.5": [[85, "inquanto-3-5-5"]], "InQuanto 3.5.4": [[85, "inquanto-3-5-4"]], "InQuanto 3.5.3": [[85, "inquanto-3-5-3"]], "InQuanto 3.5.2": [[85, "inquanto-3-5-2"]], "InQuanto 3.5.1": [[85, "inquanto-3-5-1"]], "InQuanto 3.5.0": [[85, "inquanto-3-5-0"]], "InQuanto 3.4.2": [[85, "inquanto-3-4-2"]], "InQuanto 3.4.1": [[85, "inquanto-3-4-1"]], "InQuanto 3.4.0": [[85, "inquanto-3-4-0"]], "InQuanto 3.3.1": [[85, "inquanto-3-3-1"]], "InQuanto 3.3.0": [[85, "inquanto-3-3-0"]], "InQuanto-PySCF 1.5.0": [[85, "inquanto-pyscf-1-5-0"]], "InQuanto-NGLView v0.7.1": [[85, "inquanto-nglview-v0-7-1"]], "InQuanto-Phayes v0.2.0": [[85, "inquanto-phayes-v0-2-0"]], "InQuanto 3.2.1": [[85, "inquanto-3-2-1"]], "InQuanto 3.2.0": [[85, "inquanto-3-2-0"]], "InQuanto-PySCF 1.4.0": [[85, "inquanto-pyscf-1-4-0"]], "InQuanto 3.1.2": [[85, "inquanto-3-1-2"]], "InQuanto 3.1.1": [[85, "inquanto-3-1-1"]], "InQuanto 3.1.0": [[85, "inquanto-3-1-0"]], "InQuanto 3.0.2": [[85, "inquanto-3-0-2"]], "InQuanto 3.0.1": [[85, "inquanto-3-0-1"]], "InQuanto 3.0.0": [[85, "inquanto-3-0-0"]], "InQuanto-PySCF 1.3.0": [[85, "inquanto-pyscf-1-3-0"]], "2.1.1": [[85, "id2"]], "2.1.0": [[85, "id3"]], "2.0.0": [[85, "id4"]], "1.3.0": [[85, "id5"]], "1.2.2": [[85, "id6"]], "1.2.1": [[85, "id7"]], "1.2.0": [[85, "id8"]], "1.1.0": [[85, "id9"]], "1.0.5": [[85, "id10"]], "1.0.4": [[85, "id11"]], "1.0.3": [[85, "id12"]], "1.0.2": [[85, "id13"]], "1.0.1": [[85, "id14"]], "How to cite InQuanto": [[86, "how-to-cite-inquanto"]], "Contact Support": [[87, "contact-support"]], "Software Licence": [[88, "software-licence"]], "Notices": [[88, "notices"]], "Open-source Attribution": [[89, "open-source-attribution"]], "Running on the Aer simulator": [[90, "running-on-the-aer-simulator"]], "0. System preparation": [[90, "system-preparation"]], "1. Noiseless Statevector simulation": [[90, "noiseless-statevector-simulation"]], "2. Noiseless simulation": [[90, "noiseless-simulation"]], "3. Simple quantum noise model": [[90, "simple-quantum-noise-model"]], "Running on Quantinuum Hardware": [[91, "running-on-quantinuum-hardware"]], "1. Define the system": [[91, "define-the-system"]], "2. Machine emulation for quantum noise": [[91, "machine-emulation-for-quantum-noise"]], "3. Noise mitigation methods in Quantinuum emulation": [[91, "noise-mitigation-methods-in-quantinuum-emulation"]], "Quantinuum Systems -  Launching circuits and retrieving results": [[92, "quantinuum-systems-launching-circuits-and-retrieving-results"]], "Quantinuum Systems -  Quantum Subspace Expansion": [[93, "quantinuum-systems-quantum-subspace-expansion"]], "<b>Tutorial: InQuanto + qnexus</b>": [[94, "tutorial-inquanto-qnexus"]], "Tackling larger systems with fragmentation": [[95, "tackling-larger-systems-with-fragmentation"]], "Fe4N2 - 1 - system construction with AVAS and CASSCF": [[96, "fe4n2-1-system-construction-with-avas-and-casscf"]], "Fe4N2 - 2 - circuit construction with ADAPT-VQE": [[97, "fe4n2-2-circuit-construction-with-adapt-vqe"]], "Fe4N2 - 3 - calculations on Quantinuum hardware": [[98, "fe4n2-3-calculations-on-quantinuum-hardware"]], "NEVPT2 and AC0 energy corrections": [[99, "nevpt2-and-ac0-energy-corrections"]], "Visualization with inquanto-nglview": [[100, "visualization-with-inquanto-nglview"]], "Variational Quantum Deflation for excited states": [[101, "variational-quantum-deflation-for-excited-states"]], "A basic VQE simulation": [[102, "a-basic-vqe-simulation"]], "Extended VQE": [[103, "extended-vqe"]], "H2 Bond Stretching": [[103, "h2-bond-stretching"]], "H2O Bending - active space reduction": [[103, "h2o-bending-active-space-reduction"]], "H2O Stretching - symmetry-allowed excitations": [[103, "h2o-stretching-symmetry-allowed-excitations"]], "Projection-based embedding": [[104, "projection-based-embedding"]], "Projection-based embedding with energy corrections": [[105, "projection-based-embedding-with-energy-corrections"]], "Backends Overview": [[106, "backends-overview"]], "Overview of examples": [[107, "overview-of-examples"]], "algorithms/adapt": [[107, "algorithms-adapt"]], "algorithms/qse": [[107, "algorithms-qse"]], "algorithms/time_evolution": [[107, "algorithms-time-evolution"]], "algorithms/vqd": [[107, "algorithms-vqd"]], "algorithms/vqe": [[107, "algorithms-vqe"]], "ansatzes": [[107, "ansatzes"]], "computables": [[107, "computables"]], "computables/atomic": [[107, "computables-atomic"]], "computables/composite": [[107, "computables-composite"]], "computables/composite/gf": [[107, "computables-composite-gf"]], "computables/composite/rdm": [[107, "computables-composite-rdm"]], "computables/primitive": [[107, "computables-primitive"]], "core": [[107, "core"]], "embeddings": [[107, "embeddings"]], "express": [[107, "express"]], "mappings": [[107, "mappings"]], "minimizers": [[107, "minimizers"]], "operators": [[107, "operators"]], "protocols": [[107, "protocols"]], "protocols/phase_estimation": [[107, "protocols-phase-estimation"]], "spaces": [[107, "spaces"]], "symmetry": [[107, "symmetry"]], "Tutorials": [[108, "tutorials"]], "Core Tutorials": [[108, "core-tutorials"]], "Backend Tutorials": [[108, "backend-tutorials"]], "Case Study Tutorials - Fe4N2": [[108, "case-study-tutorials-fe4n2"]], "Fragmentation Tutorials": [[108, "fragmentation-tutorials"]]}, "indexentries": {"cutensornetprotocol (class in inquanto.extensions.cutensornet)": [[0, "inquanto.extensions.cutensornet.CuTensorNetProtocol"]], "dump() (cutensornetprotocol method)": [[0, "inquanto.extensions.cutensornet.CuTensorNetProtocol.dump"]], "dumps() (cutensornetprotocol method)": [[0, "inquanto.extensions.cutensornet.CuTensorNetProtocol.dumps"]], "get_evaluator() (cutensornetprotocol method)": [[0, "inquanto.extensions.cutensornet.CuTensorNetProtocol.get_evaluator"]], "get_runner() (cutensornetprotocol method)": [[0, "inquanto.extensions.cutensornet.CuTensorNetProtocol.get_runner"]], "inquanto.extensions.cutensornet": [[0, "module-inquanto.extensions.cutensornet"]], "load() (cutensornetprotocol class method)": [[0, "inquanto.extensions.cutensornet.CuTensorNetProtocol.load"]], "loads() (cutensornetprotocol class method)": [[0, "inquanto.extensions.cutensornet.CuTensorNetProtocol.loads"]], "module": [[0, "module-inquanto.extensions.cutensornet"], [1, "module-inquanto.extensions.nexus"], [2, "module-inquanto.extensions.nglview"], [3, "module-inquanto.extensions.phayes"], [4, "module-inquanto.extensions.pyscf"], [4, "module-inquanto.extensions.pyscf.fmo"], [8, "module-inquanto.computables.atomic"], [8, "module-inquanto.computables.composite"], [8, "module-inquanto.computables.primitive"], [9, "module-inquanto.core"], [10, "module-inquanto.embeddings.dmet"], [11, "module-inquanto.express"], [14, "module-inquanto.minimizers"], [15, "module-inquanto.operators"], [17, "module-inquanto.spaces"], [18, "module-inquanto.states"], [19, "module-inquanto.symmetry"]], "protocolannotations (class in inquanto.extensions.nexus)": [[1, "inquanto.extensions.nexus.ProtocolAnnotations"]], "inquanto.extensions.nexus": [[1, "module-inquanto.extensions.nexus"]], "visualizerngl (class in inquanto.extensions.nglview)": [[2, "inquanto.extensions.nglview.VisualizerNGL"]], "inquanto.extensions.nglview": [[2, "module-inquanto.extensions.nglview"]], "visualize_fragmentation() (visualizerngl method)": [[2, "inquanto.extensions.nglview.VisualizerNGL.visualize_fragmentation"]], "visualize_molecule() (visualizerngl method)": [[2, "inquanto.extensions.nglview.VisualizerNGL.visualize_molecule"]], "visualize_orbitals() (visualizerngl method)": [[2, "inquanto.extensions.nglview.VisualizerNGL.visualize_orbitals"]], "visualize_unit_cell() (visualizerngl method)": [[2, "inquanto.extensions.nglview.VisualizerNGL.visualize_unit_cell"]], "algorithmbayesianqpe (class in inquanto.extensions.phayes)": [[3, "inquanto.extensions.phayes.AlgorithmBayesianQPE"]], "build() (algorithmbayesianqpe method)": [[3, "inquanto.extensions.phayes.AlgorithmBayesianQPE.build"]], "final_pdf() (algorithmbayesianqpe method)": [[3, "inquanto.extensions.phayes.AlgorithmBayesianQPE.final_pdf"]], "final_value() (algorithmbayesianqpe method)": [[3, "inquanto.extensions.phayes.AlgorithmBayesianQPE.final_value"]], "has_updated (algorithmbayesianqpe property)": [[3, "inquanto.extensions.phayes.AlgorithmBayesianQPE.has_updated"]], "inquanto.extensions.phayes": [[3, "module-inquanto.extensions.phayes"]], "join() (algorithmbayesianqpe method)": [[3, "inquanto.extensions.phayes.AlgorithmBayesianQPE.join"]], "phayes_state (algorithmbayesianqpe property)": [[3, "inquanto.extensions.phayes.AlgorithmBayesianQPE.phayes_state"]], "run() (algorithmbayesianqpe method)": [[3, "inquanto.extensions.phayes.AlgorithmBayesianQPE.run"]], "run_async() (algorithmbayesianqpe method)": [[3, "inquanto.extensions.phayes.AlgorithmBayesianQPE.run_async"]], "avas (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.AVAS"]], "casscf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.CASSCF"]], "chemistrydriverpyscfembeddinggammarhf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF"]], "chemistrydriverpyscfembeddinggammarohf_uhf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF"]], "chemistrydriverpyscfembeddingrhf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF"]], "chemistrydriverpyscfembeddingrohf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF"]], "chemistrydriverpyscfembeddingrohf_uhf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF"]], "chemistrydriverpyscfgammarhf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF"]], "chemistrydriverpyscfgammarohf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF"]], "chemistrydriverpyscfintegrals (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals"]], "chemistrydriverpyscfmolecularrhf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF"]], "chemistrydriverpyscfmolecularrhfqmmmcosmo (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO"]], "chemistrydriverpyscfmolecularrohf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF"]], "chemistrydriverpyscfmolecularrohfqmmmcosmo (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO"]], "chemistrydriverpyscfmolecularuhf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF"]], "chemistrydriverpyscfmolecularuhfqmmmcosmo (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO"]], "chemistrydriverpyscfmomentumrhf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF"]], "chemistrydriverpyscfmomentumrohf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF"]], "dmetrhffragmentpyscfactive (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFActive"]], "dmetrhffragmentpyscfccsd (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFCCSD"]], "dmetrhffragmentpyscffci (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFFCI"]], "dmetrhffragmentpyscfmp2 (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFMP2"]], "dmetrhffragmentpyscfrhf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFRHF"]], "fmo (class in inquanto.extensions.pyscf.fmo)": [[4, "inquanto.extensions.pyscf.fmo.FMO"]], "fmofragment (class in inquanto.extensions.pyscf.fmo)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragment"]], "fmofragmentpyscfactive (class in inquanto.extensions.pyscf.fmo)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFActive"]], "fmofragmentpyscfccsd (class in inquanto.extensions.pyscf.fmo)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFCCSD"]], "fmofragmentpyscfmp2 (class in inquanto.extensions.pyscf.fmo)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFMP2"]], "fmofragmentpyscfrhf (class in inquanto.extensions.pyscf.fmo)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFRHF"]], "fromactiveorbitals (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.FromActiveOrbitals"]], "fromactivespace (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.FromActiveSpace"]], "frozencore (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.FrozenCore"]], "impuritydmetrohffragmentpyscfactive (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFActive"]], "impuritydmetrohffragmentpyscfccsd (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFCCSD"]], "impuritydmetrohffragmentpyscffci (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFFCI"]], "impuritydmetrohffragmentpyscfmp2 (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFMP2"]], "impuritydmetrohffragmentpyscfrohf (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFROHF"]], "pyscfchemistryrestrictedintegraloperator (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator"]], "pyscfchemistryunrestrictedintegraloperator (class in inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator"]], "tolerance (pyscfchemistryrestrictedintegraloperator attribute)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.TOLERANCE"]], "tolerance (pyscfchemistryunrestrictedintegraloperator attribute)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.TOLERANCE"]], "ao_mask_2_atom_mask() (fmo static method)": [[4, "inquanto.extensions.pyscf.fmo.FMO.ao_mask_2_atom_mask"]], "approx_equal() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.approx_equal"]], "approx_equal() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.approx_equal"]], "atom_mask_2_ao_mask() (fmo static method)": [[4, "inquanto.extensions.pyscf.fmo.FMO.atom_mask_2_ao_mask"]], "build_mm_charges() (chemistrydriverpyscfmolecularrhfqmmmcosmo static method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.build_mm_charges"]], "build_mm_charges() (chemistrydriverpyscfmolecularrohfqmmmcosmo static method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.build_mm_charges"]], "build_mm_charges() (chemistrydriverpyscfmolecularuhfqmmmcosmo static method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.build_mm_charges"]], "compose_fragments() (fmofragment class method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragment.compose_fragments"]], "compose_fragments() (fmofragmentpyscfactive class method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFActive.compose_fragments"]], "compose_fragments() (fmofragmentpyscfccsd class method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFCCSD.compose_fragments"]], "compose_fragments() (fmofragmentpyscfmp2 class method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFMP2.compose_fragments"]], "compose_fragments() (fmofragmentpyscfrhf class method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFRHF.compose_fragments"]], "compute_fragment_energy() (dmetrhffragmentpyscfccsd static method)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFCCSD.compute_fragment_energy"]], "compute_fragment_energy() (dmetrhffragmentpyscffci static method)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFFCI.compute_fragment_energy"]], "compute_fragment_energy() (dmetrhffragmentpyscfmp2 static method)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFMP2.compute_fragment_energy"]], "compute_fragment_energy() (dmetrhffragmentpyscfrhf static method)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFRHF.compute_fragment_energy"]], "compute_nuclear_dipole() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.compute_nuclear_dipole"]], "compute_nuclear_dipole() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.compute_nuclear_dipole"]], "compute_nuclear_dipole() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.compute_nuclear_dipole"]], "compute_nuclear_dipole() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.compute_nuclear_dipole"]], "compute_nuclear_dipole() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.compute_nuclear_dipole"]], "compute_nuclear_dipole() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.compute_nuclear_dipole"]], "compute_nuclear_dipole() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.compute_nuclear_dipole"]], "compute_nuclear_dipole() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.compute_nuclear_dipole"]], "compute_nuclear_dipole() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.compute_nuclear_dipole"]], "compute_nuclear_dipole() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.compute_nuclear_dipole"]], "compute_nuclear_dipole() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.compute_nuclear_dipole"]], "compute_nuclear_dipole() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.compute_nuclear_dipole"]], "compute_nuclear_dipole() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.compute_nuclear_dipole"]], "compute_one_electron_operator() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.compute_one_electron_operator"]], "compute_one_electron_operator() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.compute_one_electron_operator"]], "compute_one_electron_operator() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.compute_one_electron_operator"]], "compute_one_electron_operator() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.compute_one_electron_operator"]], "compute_one_electron_operator() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.compute_one_electron_operator"]], "compute_one_electron_operator() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.compute_one_electron_operator"]], "compute_one_electron_operator() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.compute_one_electron_operator"]], "compute_one_electron_operator() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.compute_one_electron_operator"]], "compute_one_electron_operator() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.compute_one_electron_operator"]], "compute_one_electron_operator() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.compute_one_electron_operator"]], "compute_one_electron_operator() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.compute_one_electron_operator"]], "compute_one_electron_operator() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.compute_one_electron_operator"]], "compute_one_electron_operator() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.compute_one_electron_operator"]], "compute_unitary() (avas method)": [[4, "inquanto.extensions.pyscf.AVAS.compute_unitary"]], "compute_unitary() (casscf method)": [[4, "inquanto.extensions.pyscf.CASSCF.compute_unitary"]], "construct_fragment_energy_operator() (dmetrhffragmentpyscfactive static method)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFActive.construct_fragment_energy_operator"]], "copy() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.copy"]], "copy() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.copy"]], "df() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.df"]], "df() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.df"]], "double_factorize() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.double_factorize"]], "double_factorize() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.double_factorize"]], "dump_flags() (avas method)": [[4, "inquanto.extensions.pyscf.AVAS.dump_flags"]], "effective_potential() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.effective_potential"]], "effective_potential() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.effective_potential"]], "effective_potential_spin() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.effective_potential_spin"]], "energy() (fmo method)": [[4, "inquanto.extensions.pyscf.fmo.FMO.energy"]], "energy() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.energy"]], "energy() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.energy"]], "energy_electron_mean_field() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.energy_electron_mean_field"]], "energy_electron_mean_field() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.energy_electron_mean_field"]], "extract_point_group_information() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.extract_point_group_information"]], "extract_point_group_information() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.extract_point_group_information"]], "extract_point_group_information() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.extract_point_group_information"]], "extract_point_group_information() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.extract_point_group_information"]], "extract_point_group_information() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.extract_point_group_information"]], "extract_point_group_information() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.extract_point_group_information"]], "extract_point_group_information() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.extract_point_group_information"]], "extract_point_group_information() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.extract_point_group_information"]], "extract_point_group_information() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.extract_point_group_information"]], "extract_point_group_information() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.extract_point_group_information"]], "extract_point_group_information() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.extract_point_group_information"]], "extract_point_group_information() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.extract_point_group_information"]], "extract_point_group_information() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.extract_point_group_information"]], "from_integral_operator() (chemistrydriverpyscfintegrals class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.from_integral_operator"]], "from_mf() (chemistrydriverpyscfembeddinggammarhf class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.from_mf"]], "from_mf() (chemistrydriverpyscfembeddinggammarohf_uhf class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.from_mf"]], "from_mf() (chemistrydriverpyscfembeddingrhf class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.from_mf"]], "from_mf() (chemistrydriverpyscfembeddingrohf class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.from_mf"]], "from_mf() (chemistrydriverpyscfembeddingrohf_uhf class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.from_mf"]], "from_mf() (chemistrydriverpyscfgammarhf class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.from_mf"]], "from_mf() (chemistrydriverpyscfgammarohf class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.from_mf"]], "from_mf() (chemistrydriverpyscfmolecularrhf class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.from_mf"]], "from_mf() (chemistrydriverpyscfmolecularrhfqmmmcosmo class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.from_mf"]], "from_mf() (chemistrydriverpyscfmolecularrohf class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.from_mf"]], "from_mf() (chemistrydriverpyscfmolecularrohfqmmmcosmo class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.from_mf"]], "from_mf() (chemistrydriverpyscfmolecularuhf class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.from_mf"]], "from_mf() (chemistrydriverpyscfmolecularuhfqmmmcosmo class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.from_mf"]], "from_mf() (chemistrydriverpyscfmomentumrhf class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.from_mf"]], "from_mf() (chemistrydriverpyscfmomentumrohf class method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.from_mf"]], "frozen (chemistrydriverpyscfembeddinggammarhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.frozen"]], "frozen (chemistrydriverpyscfembeddinggammarohf_uhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.frozen"]], "frozen (chemistrydriverpyscfembeddingrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.frozen"]], "frozen (chemistrydriverpyscfembeddingrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.frozen"]], "frozen (chemistrydriverpyscfembeddingrohf_uhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.frozen"]], "frozen (chemistrydriverpyscfgammarhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.frozen"]], "frozen (chemistrydriverpyscfgammarohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.frozen"]], "frozen (chemistrydriverpyscfintegrals property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.frozen"]], "frozen (chemistrydriverpyscfmolecularrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.frozen"]], "frozen (chemistrydriverpyscfmolecularrhfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.frozen"]], "frozen (chemistrydriverpyscfmolecularrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.frozen"]], "frozen (chemistrydriverpyscfmolecularrohfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.frozen"]], "frozen (chemistrydriverpyscfmolecularuhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.frozen"]], "frozen (chemistrydriverpyscfmolecularuhfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.frozen"]], "frozen (chemistrydriverpyscfmomentumrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.frozen"]], "frozen (chemistrydriverpyscfmomentumrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.frozen"]], "frozenf() (avas method)": [[4, "inquanto.extensions.pyscf.AVAS.frozenf"]], "generate_report() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.generate_report"]], "generate_report() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.generate_report"]], "generate_report() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.generate_report"]], "generate_report() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.generate_report"]], "generate_report() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.generate_report"]], "generate_report() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.generate_report"]], "generate_report() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.generate_report"]], "generate_report() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.generate_report"]], "generate_report() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.generate_report"]], "generate_report() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.generate_report"]], "generate_report() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.generate_report"]], "generate_report() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.generate_report"]], "generate_report() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.generate_report"]], "generate_report() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.generate_report"]], "generate_report() (chemistrydriverpyscfmomentumrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.generate_report"]], "generate_report() (chemistrydriverpyscfmomentumrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.generate_report"]], "get_ac0_correction() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_ac0_correction"]], "get_ac0_correction() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_ac0_correction"]], "get_ac0_correction() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_ac0_correction"]], "get_ac0_correction() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_ac0_correction"]], "get_ac0_correction() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_ac0_correction"]], "get_ac0_correction() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_ac0_correction"]], "get_ac0_correction() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_ac0_correction"]], "get_ac0_correction() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_ac0_correction"]], "get_ac0_correction() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_ac0_correction"]], "get_ac0_correction() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_ac0_correction"]], "get_ac0_correction() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_ac0_correction"]], "get_ac0_correction() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_ac0_correction"]], "get_ac0_correction() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_ac0_correction"]], "get_ac0_correction() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_ac0_correction"]], "get_casci_1234pdms() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfmomentumrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.get_casci_1234pdms"]], "get_casci_1234pdms() (chemistrydriverpyscfmomentumrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.get_casci_1234pdms"]], "get_casci_12rdms() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfmomentumrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.get_casci_12rdms"]], "get_casci_12rdms() (chemistrydriverpyscfmomentumrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.get_casci_12rdms"]], "get_correlation_potential_pattern() (in module inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.get_correlation_potential_pattern"]], "get_cube_density() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_cube_density"]], "get_cube_density() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_cube_density"]], "get_cube_density() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_cube_density"]], "get_cube_density() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_cube_density"]], "get_cube_density() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_cube_density"]], "get_cube_density() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_cube_density"]], "get_cube_density() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_cube_density"]], "get_cube_density() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_cube_density"]], "get_cube_density() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_cube_density"]], "get_cube_density() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_cube_density"]], "get_cube_density() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_cube_density"]], "get_cube_density() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_cube_density"]], "get_cube_density() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_cube_density"]], "get_cube_density() (in module inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.get_cube_density"]], "get_cube_orbitals() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_cube_orbitals"]], "get_cube_orbitals() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_cube_orbitals"]], "get_cube_orbitals() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_cube_orbitals"]], "get_cube_orbitals() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_cube_orbitals"]], "get_cube_orbitals() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_cube_orbitals"]], "get_cube_orbitals() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_cube_orbitals"]], "get_cube_orbitals() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_cube_orbitals"]], "get_cube_orbitals() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_cube_orbitals"]], "get_cube_orbitals() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_cube_orbitals"]], "get_cube_orbitals() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_cube_orbitals"]], "get_cube_orbitals() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_cube_orbitals"]], "get_cube_orbitals() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_cube_orbitals"]], "get_cube_orbitals() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_cube_orbitals"]], "get_cube_orbitals() (in module inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.get_cube_orbitals"]], "get_double_factorized_system() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_double_factorized_system"]], "get_double_factorized_system() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_double_factorized_system"]], "get_double_factorized_system() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_double_factorized_system"]], "get_double_factorized_system() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_double_factorized_system"]], "get_double_factorized_system() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_double_factorized_system"]], "get_double_factorized_system() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_double_factorized_system"]], "get_double_factorized_system() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_double_factorized_system"]], "get_double_factorized_system() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_double_factorized_system"]], "get_double_factorized_system() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_double_factorized_system"]], "get_double_factorized_system() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_double_factorized_system"]], "get_double_factorized_system() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_double_factorized_system"]], "get_double_factorized_system() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_double_factorized_system"]], "get_double_factorized_system() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_double_factorized_system"]], "get_double_factorized_system() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_double_factorized_system"]], "get_excitation_amplitudes() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfmomentumrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.get_excitation_amplitudes"]], "get_excitation_amplitudes() (chemistrydriverpyscfmomentumrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.get_excitation_amplitudes"]], "get_excitation_operators() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfmomentumrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.get_excitation_operators"]], "get_excitation_operators() (chemistrydriverpyscfmomentumrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.get_excitation_operators"]], "get_fragment_orbital_masks() (in module inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.get_fragment_orbital_masks"]], "get_fragment_orbitals() (in module inquanto.extensions.pyscf)": [[4, "inquanto.extensions.pyscf.get_fragment_orbitals"]], "get_lowdin_system() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_lowdin_system"]], "get_lowdin_system() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_lowdin_system"]], "get_lowdin_system() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_lowdin_system"]], "get_lowdin_system() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_lowdin_system"]], "get_lowdin_system() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_lowdin_system"]], "get_lowdin_system() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_lowdin_system"]], "get_lowdin_system() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_lowdin_system"]], "get_lowdin_system() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_lowdin_system"]], "get_lowdin_system() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_lowdin_system"]], "get_lowdin_system() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_lowdin_system"]], "get_lowdin_system() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_lowdin_system"]], "get_lowdin_system() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_lowdin_system"]], "get_lowdin_system() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_lowdin_system"]], "get_lowdin_system() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_lowdin_system"]], "get_madelung_constant() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_madelung_constant"]], "get_madelung_constant() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_madelung_constant"]], "get_madelung_constant() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_madelung_constant"]], "get_madelung_constant() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_madelung_constant"]], "get_madelung_constant() (chemistrydriverpyscfmomentumrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.get_madelung_constant"]], "get_madelung_constant() (chemistrydriverpyscfmomentumrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.get_madelung_constant"]], "get_mm_coulomb() (chemistrydriverpyscfmolecularrhfqmmmcosmo static method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_mm_coulomb"]], "get_mm_coulomb() (chemistrydriverpyscfmolecularrohfqmmmcosmo static method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_mm_coulomb"]], "get_mm_coulomb() (chemistrydriverpyscfmolecularuhfqmmmcosmo static method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_mm_coulomb"]], "get_mulliken_pop() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_mulliken_pop"]], "get_mulliken_pop() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_mulliken_pop"]], "get_mulliken_pop() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_mulliken_pop"]], "get_mulliken_pop() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_mulliken_pop"]], "get_mulliken_pop() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_mulliken_pop"]], "get_mulliken_pop() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_mulliken_pop"]], "get_mulliken_pop() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_mulliken_pop"]], "get_mulliken_pop() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_mulliken_pop"]], "get_mulliken_pop() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_mulliken_pop"]], "get_mulliken_pop() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_mulliken_pop"]], "get_mulliken_pop() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_mulliken_pop"]], "get_mulliken_pop() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_mulliken_pop"]], "get_mulliken_pop() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_mulliken_pop"]], "get_nevpt2_correction() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_nevpt2_correction"]], "get_nevpt2_correction() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_nevpt2_correction"]], "get_nevpt2_correction() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_nevpt2_correction"]], "get_nevpt2_correction() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_nevpt2_correction"]], "get_nevpt2_correction() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_nevpt2_correction"]], "get_nevpt2_correction() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_nevpt2_correction"]], "get_nevpt2_correction() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_nevpt2_correction"]], "get_nevpt2_correction() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_nevpt2_correction"]], "get_nevpt2_correction() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_nevpt2_correction"]], "get_nevpt2_correction() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_nevpt2_correction"]], "get_nevpt2_correction() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_nevpt2_correction"]], "get_nevpt2_correction() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_nevpt2_correction"]], "get_nevpt2_correction() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_nevpt2_correction"]], "get_nevpt2_correction() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_nevpt2_correction"]], "get_one_body_rdm() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_one_body_rdm"]], "get_orbital_coefficients() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_orbital_coefficients"]], "get_orbital_coefficients() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_orbital_coefficients"]], "get_orbital_coefficients() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_orbital_coefficients"]], "get_orbital_coefficients() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_orbital_coefficients"]], "get_orbital_coefficients() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_orbital_coefficients"]], "get_orbital_coefficients() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_orbital_coefficients"]], "get_orbital_coefficients() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_orbital_coefficients"]], "get_orbital_coefficients() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_orbital_coefficients"]], "get_orbital_coefficients() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_orbital_coefficients"]], "get_orbital_coefficients() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_orbital_coefficients"]], "get_orbital_coefficients() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_orbital_coefficients"]], "get_orbital_coefficients() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_orbital_coefficients"]], "get_orbital_coefficients() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_orbital_coefficients"]], "get_orbital_coefficients() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_orbital_coefficients"]], "get_rdm1_ccsd() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_rdm1_ccsd"]], "get_rdm1_ccsd() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_rdm1_ccsd"]], "get_rdm1_ccsd() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_rdm1_ccsd"]], "get_rdm1_ccsd() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_rdm1_ccsd"]], "get_rdm1_ccsd() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_rdm1_ccsd"]], "get_rdm1_ccsd() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_rdm1_ccsd"]], "get_rdm1_ccsd() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_rdm1_ccsd"]], "get_rdm1_ccsd() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_rdm1_ccsd"]], "get_rdm1_ccsd() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_rdm1_ccsd"]], "get_rdm1_ccsd() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_rdm1_ccsd"]], "get_rdm1_ccsd() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_rdm1_ccsd"]], "get_rdm1_ccsd() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_rdm1_ccsd"]], "get_rdm1_ccsd() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_rdm1_ccsd"]], "get_rdm1_ccsd() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_rdm1_ccsd"]], "get_rdm2_ccsd() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_rdm2_ccsd"]], "get_rdm2_ccsd() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_rdm2_ccsd"]], "get_rdm2_ccsd() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_rdm2_ccsd"]], "get_rdm2_ccsd() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_rdm2_ccsd"]], "get_rdm2_ccsd() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_rdm2_ccsd"]], "get_rdm2_ccsd() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_rdm2_ccsd"]], "get_rdm2_ccsd() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_rdm2_ccsd"]], "get_rdm2_ccsd() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_rdm2_ccsd"]], "get_rdm2_ccsd() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_rdm2_ccsd"]], "get_rdm2_ccsd() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_rdm2_ccsd"]], "get_rdm2_ccsd() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_rdm2_ccsd"]], "get_rdm2_ccsd() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_rdm2_ccsd"]], "get_rdm2_ccsd() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_rdm2_ccsd"]], "get_rdm2_ccsd() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_rdm2_ccsd"]], "get_subsystem_driver() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_subsystem_driver"]], "get_subsystem_driver() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_subsystem_driver"]], "get_subsystem_driver() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_subsystem_driver"]], "get_subsystem_driver() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_subsystem_driver"]], "get_subsystem_driver() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_subsystem_driver"]], "get_subsystem_driver() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_subsystem_driver"]], "get_subsystem_driver() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_subsystem_driver"]], "get_subsystem_driver() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_subsystem_driver"]], "get_subsystem_driver() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_subsystem_driver"]], "get_subsystem_driver() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_subsystem_driver"]], "get_subsystem_driver() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_subsystem_driver"]], "get_subsystem_driver() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_subsystem_driver"]], "get_subsystem_driver() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_subsystem_driver"]], "get_subsystem_driver() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_subsystem_driver"]], "get_system() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_system"]], "get_system() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_system"]], "get_system() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_system"]], "get_system() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_system"]], "get_system() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_system"]], "get_system() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_system"]], "get_system() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_system"]], "get_system() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_system"]], "get_system() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_system"]], "get_system() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_system"]], "get_system() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_system"]], "get_system() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_system"]], "get_system() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_system"]], "get_system() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_system"]], "get_system() (chemistrydriverpyscfmomentumrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.get_system"]], "get_system() (chemistrydriverpyscfmomentumrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.get_system"]], "get_system_ao() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.get_system_ao"]], "get_system_ao() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.get_system_ao"]], "get_system_ao() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.get_system_ao"]], "get_system_ao() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.get_system_ao"]], "get_system_ao() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.get_system_ao"]], "get_system_ao() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.get_system_ao"]], "get_system_ao() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.get_system_ao"]], "get_system_ao() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.get_system_ao"]], "get_system_ao() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.get_system_ao"]], "get_system_ao() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.get_system_ao"]], "get_system_ao() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.get_system_ao"]], "get_system_ao() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.get_system_ao"]], "get_system_ao() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.get_system_ao"]], "get_system_ao() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.get_system_ao"]], "inquanto.extensions.pyscf": [[4, "module-inquanto.extensions.pyscf"]], "inquanto.extensions.pyscf.fmo": [[4, "module-inquanto.extensions.pyscf.fmo"]], "is_openshell() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.is_openshell"]], "is_transf (avas property)": [[4, "inquanto.extensions.pyscf.AVAS.is_transf"]], "is_transf (casscf property)": [[4, "inquanto.extensions.pyscf.CASSCF.is_transf"]], "items() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.items"]], "items() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.items"]], "load_h5() (pyscfchemistryrestrictedintegraloperator class method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.load_h5"]], "load_h5() (pyscfchemistryunrestrictedintegraloperator class method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.load_h5"]], "make_actives_contiguous() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.make_actives_contiguous"]], "make_actives_contiguous() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.make_actives_contiguous"]], "make_actives_contiguous() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.make_actives_contiguous"]], "make_actives_contiguous() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.make_actives_contiguous"]], "make_actives_contiguous() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.make_actives_contiguous"]], "make_actives_contiguous() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.make_actives_contiguous"]], "make_actives_contiguous() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.make_actives_contiguous"]], "make_actives_contiguous() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.make_actives_contiguous"]], "make_actives_contiguous() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.make_actives_contiguous"]], "make_actives_contiguous() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.make_actives_contiguous"]], "make_actives_contiguous() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.make_actives_contiguous"]], "make_actives_contiguous() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.make_actives_contiguous"]], "make_actives_contiguous() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.make_actives_contiguous"]], "make_actives_contiguous() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.make_actives_contiguous"]], "mf_energy (chemistrydriverpyscfembeddinggammarhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.mf_energy"]], "mf_energy (chemistrydriverpyscfembeddinggammarohf_uhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.mf_energy"]], "mf_energy (chemistrydriverpyscfembeddingrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.mf_energy"]], "mf_energy (chemistrydriverpyscfembeddingrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.mf_energy"]], "mf_energy (chemistrydriverpyscfembeddingrohf_uhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.mf_energy"]], "mf_energy (chemistrydriverpyscfgammarhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.mf_energy"]], "mf_energy (chemistrydriverpyscfgammarohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.mf_energy"]], "mf_energy (chemistrydriverpyscfintegrals property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.mf_energy"]], "mf_energy (chemistrydriverpyscfmolecularrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.mf_energy"]], "mf_energy (chemistrydriverpyscfmolecularrhfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.mf_energy"]], "mf_energy (chemistrydriverpyscfmolecularrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.mf_energy"]], "mf_energy (chemistrydriverpyscfmolecularrohfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.mf_energy"]], "mf_energy (chemistrydriverpyscfmolecularuhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.mf_energy"]], "mf_energy (chemistrydriverpyscfmolecularuhfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.mf_energy"]], "mf_energy (chemistrydriverpyscfmomentumrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.mf_energy"]], "mf_energy (chemistrydriverpyscfmomentumrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.mf_energy"]], "mf_type (chemistrydriverpyscfembeddinggammarhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.mf_type"]], "mf_type (chemistrydriverpyscfembeddinggammarohf_uhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.mf_type"]], "mf_type (chemistrydriverpyscfembeddingrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.mf_type"]], "mf_type (chemistrydriverpyscfembeddingrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.mf_type"]], "mf_type (chemistrydriverpyscfembeddingrohf_uhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.mf_type"]], "mf_type (chemistrydriverpyscfgammarhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.mf_type"]], "mf_type (chemistrydriverpyscfgammarohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.mf_type"]], "mf_type (chemistrydriverpyscfintegrals property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.mf_type"]], "mf_type (chemistrydriverpyscfmolecularrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.mf_type"]], "mf_type (chemistrydriverpyscfmolecularrhfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.mf_type"]], "mf_type (chemistrydriverpyscfmolecularrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.mf_type"]], "mf_type (chemistrydriverpyscfmolecularrohfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.mf_type"]], "mf_type (chemistrydriverpyscfmolecularuhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.mf_type"]], "mf_type (chemistrydriverpyscfmolecularuhfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.mf_type"]], "mf_type (chemistrydriverpyscfmomentumrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.mf_type"]], "mf_type (chemistrydriverpyscfmomentumrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.mf_type"]], "mo_coeff (chemistrydriverpyscfintegrals property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.mo_coeff"]], "n_electron (chemistrydriverpyscfembeddinggammarhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.n_electron"]], "n_electron (chemistrydriverpyscfembeddinggammarohf_uhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.n_electron"]], "n_electron (chemistrydriverpyscfembeddingrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.n_electron"]], "n_electron (chemistrydriverpyscfembeddingrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.n_electron"]], "n_electron (chemistrydriverpyscfembeddingrohf_uhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.n_electron"]], "n_electron (chemistrydriverpyscfgammarhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.n_electron"]], "n_electron (chemistrydriverpyscfgammarohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.n_electron"]], "n_electron (chemistrydriverpyscfintegrals property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.n_electron"]], "n_electron (chemistrydriverpyscfmolecularrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.n_electron"]], "n_electron (chemistrydriverpyscfmolecularrhfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.n_electron"]], "n_electron (chemistrydriverpyscfmolecularrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.n_electron"]], "n_electron (chemistrydriverpyscfmolecularrohfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.n_electron"]], "n_electron (chemistrydriverpyscfmolecularuhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.n_electron"]], "n_electron (chemistrydriverpyscfmolecularuhfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.n_electron"]], "n_electron (chemistrydriverpyscfmomentumrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.n_electron"]], "n_electron (chemistrydriverpyscfmomentumrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.n_electron"]], "n_kp (chemistrydriverpyscfmomentumrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.n_kp"]], "n_kp (chemistrydriverpyscfmomentumrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.n_kp"]], "n_orb (chemistrydriverpyscfembeddinggammarhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.n_orb"]], "n_orb (chemistrydriverpyscfembeddinggammarohf_uhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.n_orb"]], "n_orb (chemistrydriverpyscfembeddingrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.n_orb"]], "n_orb (chemistrydriverpyscfembeddingrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.n_orb"]], "n_orb (chemistrydriverpyscfembeddingrohf_uhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.n_orb"]], "n_orb (chemistrydriverpyscfgammarhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.n_orb"]], "n_orb (chemistrydriverpyscfgammarohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.n_orb"]], "n_orb (chemistrydriverpyscfintegrals property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.n_orb"]], "n_orb (chemistrydriverpyscfmolecularrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.n_orb"]], "n_orb (chemistrydriverpyscfmolecularrhfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.n_orb"]], "n_orb (chemistrydriverpyscfmolecularrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.n_orb"]], "n_orb (chemistrydriverpyscfmolecularrohfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.n_orb"]], "n_orb (chemistrydriverpyscfmolecularuhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.n_orb"]], "n_orb (chemistrydriverpyscfmolecularuhfqmmmcosmo property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.n_orb"]], "n_orb (chemistrydriverpyscfmomentumrhf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.n_orb"]], "n_orb (chemistrydriverpyscfmomentumrohf property)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.n_orb"]], "original (avas property)": [[4, "inquanto.extensions.pyscf.AVAS.original"]], "original (casscf property)": [[4, "inquanto.extensions.pyscf.CASSCF.original"]], "print_json_report() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.print_json_report"]], "print_json_report() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.print_json_report"]], "print_json_report() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.print_json_report"]], "print_json_report() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.print_json_report"]], "print_json_report() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.print_json_report"]], "print_json_report() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.print_json_report"]], "print_json_report() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.print_json_report"]], "print_json_report() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.print_json_report"]], "print_json_report() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.print_json_report"]], "print_json_report() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.print_json_report"]], "print_json_report() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.print_json_report"]], "print_json_report() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.print_json_report"]], "print_json_report() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.print_json_report"]], "print_json_report() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.print_json_report"]], "print_json_report() (chemistrydriverpyscfmomentumrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.print_json_report"]], "print_json_report() (chemistrydriverpyscfmomentumrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.print_json_report"]], "print_table() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.print_table"]], "print_table() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.print_table"]], "qubit_encode() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.qubit_encode"]], "qubit_encode() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.qubit_encode"]], "rotate() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.rotate"]], "rotate() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.rotate"]], "run() (avas method)": [[4, "inquanto.extensions.pyscf.AVAS.run"]], "run() (fmo method)": [[4, "inquanto.extensions.pyscf.fmo.FMO.run"]], "run_casci() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.run_casci"]], "run_casci() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.run_casci"]], "run_casci() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.run_casci"]], "run_casci() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.run_casci"]], "run_casci() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.run_casci"]], "run_casci() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.run_casci"]], "run_casci() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.run_casci"]], "run_casci() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.run_casci"]], "run_casci() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.run_casci"]], "run_casci() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.run_casci"]], "run_casci() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.run_casci"]], "run_casci() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.run_casci"]], "run_casci() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.run_casci"]], "run_casci() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.run_casci"]], "run_casci() (chemistrydriverpyscfmomentumrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.run_casci"]], "run_casci() (chemistrydriverpyscfmomentumrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.run_casci"]], "run_ccsd() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfmomentumrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.run_ccsd"]], "run_ccsd() (chemistrydriverpyscfmomentumrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.run_ccsd"]], "run_hf() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.run_hf"]], "run_hf() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.run_hf"]], "run_hf() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.run_hf"]], "run_hf() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.run_hf"]], "run_hf() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.run_hf"]], "run_hf() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.run_hf"]], "run_hf() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.run_hf"]], "run_hf() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.run_hf"]], "run_hf() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.run_hf"]], "run_hf() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.run_hf"]], "run_hf() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.run_hf"]], "run_hf() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.run_hf"]], "run_hf() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.run_hf"]], "run_hf() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.run_hf"]], "run_hf() (chemistrydriverpyscfmomentumrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.run_hf"]], "run_hf() (chemistrydriverpyscfmomentumrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.run_hf"]], "run_mp2() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.run_mp2"]], "run_mp2() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.run_mp2"]], "run_mp2() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.run_mp2"]], "run_mp2() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.run_mp2"]], "run_mp2() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.run_mp2"]], "run_mp2() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.run_mp2"]], "run_mp2() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.run_mp2"]], "run_mp2() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.run_mp2"]], "run_mp2() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.run_mp2"]], "run_mp2() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.run_mp2"]], "run_mp2() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.run_mp2"]], "run_mp2() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.run_mp2"]], "run_mp2() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.run_mp2"]], "run_mp2() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.run_mp2"]], "run_mp2() (chemistrydriverpyscfmomentumrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.run_mp2"]], "run_mp2() (chemistrydriverpyscfmomentumrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.run_mp2"]], "run_rhf() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.run_rhf"]], "run_uhf() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.run_uhf"]], "save_h5() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.save_h5"]], "save_h5() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.save_h5"]], "set_checkfile() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.set_checkfile"]], "set_checkfile() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.set_checkfile"]], "set_checkfile() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.set_checkfile"]], "set_checkfile() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.set_checkfile"]], "set_checkfile() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.set_checkfile"]], "set_checkfile() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.set_checkfile"]], "set_checkfile() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.set_checkfile"]], "set_checkfile() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.set_checkfile"]], "set_checkfile() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.set_checkfile"]], "set_checkfile() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.set_checkfile"]], "set_checkfile() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.set_checkfile"]], "set_checkfile() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.set_checkfile"]], "set_checkfile() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.set_checkfile"]], "set_checkfile() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.set_checkfile"]], "set_diis_space_dimension() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.set_diis_space_dimension"]], "set_diis_space_dimension() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.set_diis_space_dimension"]], "set_diis_space_dimension() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.set_diis_space_dimension"]], "set_diis_space_dimension() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.set_diis_space_dimension"]], "set_diis_space_dimension() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.set_diis_space_dimension"]], "set_diis_space_dimension() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.set_diis_space_dimension"]], "set_diis_space_dimension() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.set_diis_space_dimension"]], "set_diis_space_dimension() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.set_diis_space_dimension"]], "set_diis_space_dimension() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.set_diis_space_dimension"]], "set_diis_space_dimension() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.set_diis_space_dimension"]], "set_diis_space_dimension() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.set_diis_space_dimension"]], "set_diis_space_dimension() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.set_diis_space_dimension"]], "set_diis_space_dimension() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.set_diis_space_dimension"]], "set_diis_space_dimension() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.set_diis_space_dimension"]], "set_init_orbitals() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfmomentumrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumRHF.set_init_orbitals"]], "set_init_orbitals() (chemistrydriverpyscfmomentumrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMomentumROHF.set_init_orbitals"]], "set_level_shift() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.set_level_shift"]], "set_level_shift() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.set_level_shift"]], "set_level_shift() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.set_level_shift"]], "set_level_shift() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.set_level_shift"]], "set_level_shift() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.set_level_shift"]], "set_level_shift() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.set_level_shift"]], "set_level_shift() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.set_level_shift"]], "set_level_shift() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.set_level_shift"]], "set_level_shift() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.set_level_shift"]], "set_level_shift() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.set_level_shift"]], "set_level_shift() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.set_level_shift"]], "set_level_shift() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.set_level_shift"]], "set_level_shift() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.set_level_shift"]], "set_level_shift() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.set_level_shift"]], "set_max_scf_cycles() (chemistrydriverpyscfembeddinggammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaRHF.set_max_scf_cycles"]], "set_max_scf_cycles() (chemistrydriverpyscfembeddinggammarohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingGammaROHF_UHF.set_max_scf_cycles"]], "set_max_scf_cycles() (chemistrydriverpyscfembeddingrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingRHF.set_max_scf_cycles"]], "set_max_scf_cycles() (chemistrydriverpyscfembeddingrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF.set_max_scf_cycles"]], "set_max_scf_cycles() (chemistrydriverpyscfembeddingrohf_uhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFEmbeddingROHF_UHF.set_max_scf_cycles"]], "set_max_scf_cycles() (chemistrydriverpyscfgammarhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaRHF.set_max_scf_cycles"]], "set_max_scf_cycles() (chemistrydriverpyscfgammarohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFGammaROHF.set_max_scf_cycles"]], "set_max_scf_cycles() (chemistrydriverpyscfintegrals method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFIntegrals.set_max_scf_cycles"]], "set_max_scf_cycles() (chemistrydriverpyscfmolecularrhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHF.set_max_scf_cycles"]], "set_max_scf_cycles() (chemistrydriverpyscfmolecularrhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularRHFQMMMCOSMO.set_max_scf_cycles"]], "set_max_scf_cycles() (chemistrydriverpyscfmolecularrohf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHF.set_max_scf_cycles"]], "set_max_scf_cycles() (chemistrydriverpyscfmolecularrohfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularROHFQMMMCOSMO.set_max_scf_cycles"]], "set_max_scf_cycles() (chemistrydriverpyscfmolecularuhf method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHF.set_max_scf_cycles"]], "set_max_scf_cycles() (chemistrydriverpyscfmolecularuhfqmmmcosmo method)": [[4, "inquanto.extensions.pyscf.ChemistryDriverPySCFMolecularUHFQMMMCOSMO.set_max_scf_cycles"]], "solve() (dmetrhffragmentpyscfactive method)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFActive.solve"]], "solve() (dmetrhffragmentpyscfccsd method)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFCCSD.solve"]], "solve() (dmetrhffragmentpyscffci method)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFFCI.solve"]], "solve() (dmetrhffragmentpyscfmp2 method)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFMP2.solve"]], "solve() (dmetrhffragmentpyscfrhf method)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFRHF.solve"]], "solve() (fmofragment method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragment.solve"]], "solve() (fmofragmentpyscfactive method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFActive.solve"]], "solve() (fmofragmentpyscfccsd method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFCCSD.solve"]], "solve() (fmofragmentpyscfmp2 method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFMP2.solve"]], "solve() (fmofragmentpyscfrhf method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFRHF.solve"]], "solve() (impuritydmetrohffragmentpyscfactive method)": [[4, "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFActive.solve"]], "solve() (impuritydmetrohffragmentpyscfccsd method)": [[4, "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFCCSD.solve"]], "solve() (impuritydmetrohffragmentpyscffci method)": [[4, "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFFCI.solve"]], "solve() (impuritydmetrohffragmentpyscfmp2 method)": [[4, "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFMP2.solve"]], "solve() (impuritydmetrohffragmentpyscfrohf method)": [[4, "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFROHF.solve"]], "solve_active() (dmetrhffragmentpyscfactive method)": [[4, "inquanto.extensions.pyscf.DMETRHFFragmentPySCFActive.solve_active"]], "solve_active() (impuritydmetrohffragmentpyscfactive method)": [[4, "inquanto.extensions.pyscf.ImpurityDMETROHFFragmentPySCFActive.solve_active"]], "solve_final() (fmofragment method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragment.solve_final"]], "solve_final() (fmofragmentpyscfactive method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFActive.solve_final"]], "solve_final() (fmofragmentpyscfccsd method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFCCSD.solve_final"]], "solve_final() (fmofragmentpyscfmp2 method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFMP2.solve_final"]], "solve_final() (fmofragmentpyscfrhf method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFRHF.solve_final"]], "solve_final_active() (fmofragmentpyscfactive method)": [[4, "inquanto.extensions.pyscf.fmo.FMOFragmentPySCFActive.solve_final_active"]], "to_chemistryrestrictedintegraloperator() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.to_ChemistryRestrictedIntegralOperator"]], "to_chemistryunrestrictedintegraloperator() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.to_ChemistryUnrestrictedIntegralOperator"]], "to_fermionoperator() (pyscfchemistryrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryRestrictedIntegralOperator.to_FermionOperator"]], "to_fermionoperator() (pyscfchemistryunrestrictedintegraloperator method)": [[4, "inquanto.extensions.pyscf.PySCFChemistryUnrestrictedIntegralOperator.to_FermionOperator"]], "transf() (avas method)": [[4, "inquanto.extensions.pyscf.AVAS.transf"]], "transf() (casscf method)": [[4, "inquanto.extensions.pyscf.CASSCF.transf"]], "algorithmadaptvqe (class in inquanto.algorithms.adapt)": [[6, "inquanto.algorithms.adapt.AlgorithmAdaptVQE"]], "algorithmdeterministicqpe (class in inquanto.algorithms.phase_estimation)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmDeterministicQPE"]], "algorithmfermionicadaptvqe (class in inquanto.algorithms.adapt)": [[6, "inquanto.algorithms.adapt.AlgorithmFermionicAdaptVQE"]], "algorithmiqeb (class in inquanto.algorithms.adapt)": [[6, "inquanto.algorithms.adapt.AlgorithmIQEB"]], "algorithminfotheoryqpe (class in inquanto.algorithms.phase_estimation)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmInfoTheoryQPE"]], "algorithmkitaevqpe (class in inquanto.algorithms.phase_estimation)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmKitaevQPE"]], "algorithmmclachlanimagtime (class in inquanto.algorithms.time_evolution)": [[6, "inquanto.algorithms.time_evolution.AlgorithmMcLachlanImagTime"]], "algorithmmclachlanrealtime (class in inquanto.algorithms.time_evolution)": [[6, "inquanto.algorithms.time_evolution.AlgorithmMcLachlanRealTime"]], "algorithmqse (class in inquanto.algorithms.qse)": [[6, "inquanto.algorithms.qse.AlgorithmQSE"]], "algorithmsceom (class in inquanto.algorithms.sceom)": [[6, "inquanto.algorithms.sceom.AlgorithmSCEOM"]], "algorithmvqd (class in inquanto.algorithms.vqd)": [[6, "inquanto.algorithms.vqd.AlgorithmVQD"]], "algorithmvqe (class in inquanto.algorithms.vqe)": [[6, "inquanto.algorithms.vqe.AlgorithmVQE"]], "algorithmvqs (class in inquanto.algorithms.time_evolution)": [[6, "inquanto.algorithms.time_evolution.AlgorithmVQS"]], "build() (algorithmadaptvqe method)": [[6, "inquanto.algorithms.adapt.AlgorithmAdaptVQE.build"]], "build() (algorithmdeterministicqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmDeterministicQPE.build"]], "build() (algorithmfermionicadaptvqe method)": [[6, "inquanto.algorithms.adapt.AlgorithmFermionicAdaptVQE.build"]], "build() (algorithmiqeb method)": [[6, "inquanto.algorithms.adapt.AlgorithmIQEB.build"]], "build() (algorithminfotheoryqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmInfoTheoryQPE.build"]], "build() (algorithmkitaevqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmKitaevQPE.build"]], "build() (algorithmmclachlanimagtime method)": [[6, "inquanto.algorithms.time_evolution.AlgorithmMcLachlanImagTime.build"]], "build() (algorithmmclachlanrealtime method)": [[6, "inquanto.algorithms.time_evolution.AlgorithmMcLachlanRealTime.build"]], "build() (algorithmqse method)": [[6, "inquanto.algorithms.qse.AlgorithmQSE.build"]], "build() (algorithmsceom method)": [[6, "inquanto.algorithms.sceom.AlgorithmSCEOM.build"]], "build() (algorithmvqd method)": [[6, "inquanto.algorithms.vqd.AlgorithmVQD.build"]], "build() (algorithmvqe method)": [[6, "inquanto.algorithms.vqe.AlgorithmVQE.build"]], "build() (algorithmvqs method)": [[6, "inquanto.algorithms.time_evolution.AlgorithmVQS.build"]], "final_energy() (algorithmdeterministicqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmDeterministicQPE.final_energy"]], "final_evaluated_auxiliary_expression (algorithmvqe property)": [[6, "inquanto.algorithms.vqe.AlgorithmVQE.final_evaluated_auxiliary_expression"]], "final_evaluated_objective_expression (algorithmvqe property)": [[6, "inquanto.algorithms.vqe.AlgorithmVQE.final_evaluated_objective_expression"]], "final_parameters (algorithmadaptvqe property)": [[6, "inquanto.algorithms.adapt.AlgorithmAdaptVQE.final_parameters"]], "final_parameters (algorithmfermionicadaptvqe property)": [[6, "inquanto.algorithms.adapt.AlgorithmFermionicAdaptVQE.final_parameters"]], "final_parameters (algorithmiqeb property)": [[6, "inquanto.algorithms.adapt.AlgorithmIQEB.final_parameters"]], "final_parameters (algorithmmclachlanimagtime property)": [[6, "inquanto.algorithms.time_evolution.AlgorithmMcLachlanImagTime.final_parameters"]], "final_parameters (algorithmmclachlanrealtime property)": [[6, "inquanto.algorithms.time_evolution.AlgorithmMcLachlanRealTime.final_parameters"]], "final_parameters (algorithmvqd property)": [[6, "inquanto.algorithms.vqd.AlgorithmVQD.final_parameters"]], "final_parameters (algorithmvqe property)": [[6, "inquanto.algorithms.vqe.AlgorithmVQE.final_parameters"]], "final_parameters (algorithmvqs property)": [[6, "inquanto.algorithms.time_evolution.AlgorithmVQS.final_parameters"]], "final_pdf() (algorithminfotheoryqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmInfoTheoryQPE.final_pdf"]], "final_phase() (algorithmdeterministicqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmDeterministicQPE.final_phase"]], "final_propagation_evaluation() (algorithmmclachlanimagtime method)": [[6, "inquanto.algorithms.time_evolution.AlgorithmMcLachlanImagTime.final_propagation_evaluation"]], "final_propagation_evaluation() (algorithmmclachlanrealtime method)": [[6, "inquanto.algorithms.time_evolution.AlgorithmMcLachlanRealTime.final_propagation_evaluation"]], "final_propagation_evaluation() (algorithmvqs method)": [[6, "inquanto.algorithms.time_evolution.AlgorithmVQS.final_propagation_evaluation"]], "final_states (algorithmqse property)": [[6, "inquanto.algorithms.qse.AlgorithmQSE.final_states"]], "final_states (algorithmsceom property)": [[6, "inquanto.algorithms.sceom.AlgorithmSCEOM.final_states"]], "final_value (algorithmvqe property)": [[6, "inquanto.algorithms.vqe.AlgorithmVQE.final_value"]], "final_value() (algorithminfotheoryqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmInfoTheoryQPE.final_value"]], "final_value() (algorithmkitaevqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmKitaevQPE.final_value"]], "final_values (algorithmqse property)": [[6, "inquanto.algorithms.qse.AlgorithmQSE.final_values"]], "final_values (algorithmsceom property)": [[6, "inquanto.algorithms.sceom.AlgorithmSCEOM.final_values"]], "final_values (algorithmvqd property)": [[6, "inquanto.algorithms.vqd.AlgorithmVQD.final_values"]], "from_array() (algorithmvqd method)": [[6, "inquanto.algorithms.vqd.AlgorithmVQD.from_array"]], "generate_report() (algorithmadaptvqe method)": [[6, "inquanto.algorithms.adapt.AlgorithmAdaptVQE.generate_report"]], "generate_report() (algorithmdeterministicqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmDeterministicQPE.generate_report"]], "generate_report() (algorithmfermionicadaptvqe method)": [[6, "inquanto.algorithms.adapt.AlgorithmFermionicAdaptVQE.generate_report"]], "generate_report() (algorithmiqeb method)": [[6, "inquanto.algorithms.adapt.AlgorithmIQEB.generate_report"]], "generate_report() (algorithmqse method)": [[6, "inquanto.algorithms.qse.AlgorithmQSE.generate_report"]], "generate_report() (algorithmsceom method)": [[6, "inquanto.algorithms.sceom.AlgorithmSCEOM.generate_report"]], "generate_report() (algorithmvqd method)": [[6, "inquanto.algorithms.vqd.AlgorithmVQD.generate_report"]], "generate_report() (algorithmvqe method)": [[6, "inquanto.algorithms.vqe.AlgorithmVQE.generate_report"]], "generate_report_params() (algorithmadaptvqe method)": [[6, "inquanto.algorithms.adapt.AlgorithmAdaptVQE.generate_report_params"]], "generate_report_params() (algorithmfermionicadaptvqe method)": [[6, "inquanto.algorithms.adapt.AlgorithmFermionicAdaptVQE.generate_report_params"]], "generate_report_params() (algorithmiqeb method)": [[6, "inquanto.algorithms.adapt.AlgorithmIQEB.generate_report_params"]], "generate_report_params() (algorithmvqe method)": [[6, "inquanto.algorithms.vqe.AlgorithmVQE.generate_report_params"]], "get_ansatz() (algorithmfermionicadaptvqe method)": [[6, "inquanto.algorithms.adapt.AlgorithmFermionicAdaptVQE.get_ansatz"]], "get_dataframe_sceom_analysis() (algorithmsceom method)": [[6, "inquanto.algorithms.sceom.AlgorithmSCEOM.get_dataframe_sceom_analysis"]], "get_exponents_with_symbols() (algorithmfermionicadaptvqe method)": [[6, "inquanto.algorithms.adapt.AlgorithmFermionicAdaptVQE.get_exponents_with_symbols"]], "join() (algorithminfotheoryqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmInfoTheoryQPE.join"]], "join() (algorithmkitaevqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmKitaevQPE.join"]], "launch_experiment() (algorithmdeterministicqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmDeterministicQPE.launch_experiment"]], "post_propagation_evaluation() (algorithmmclachlanimagtime method)": [[6, "inquanto.algorithms.time_evolution.AlgorithmMcLachlanImagTime.post_propagation_evaluation"]], "post_propagation_evaluation() (algorithmmclachlanrealtime method)": [[6, "inquanto.algorithms.time_evolution.AlgorithmMcLachlanRealTime.post_propagation_evaluation"]], "post_propagation_evaluation() (algorithmvqs method)": [[6, "inquanto.algorithms.time_evolution.AlgorithmVQS.post_propagation_evaluation"]], "print_sceom_states() (algorithmsceom method)": [[6, "inquanto.algorithms.sceom.AlgorithmSCEOM.print_sceom_states"]], "retrieve_experiment() (algorithmdeterministicqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmDeterministicQPE.retrieve_experiment"]], "run() (algorithmadaptvqe method)": [[6, "inquanto.algorithms.adapt.AlgorithmAdaptVQE.run"]], "run() (algorithmdeterministicqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmDeterministicQPE.run"]], "run() (algorithmfermionicadaptvqe method)": [[6, "inquanto.algorithms.adapt.AlgorithmFermionicAdaptVQE.run"]], "run() (algorithmiqeb method)": [[6, "inquanto.algorithms.adapt.AlgorithmIQEB.run"]], "run() (algorithminfotheoryqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmInfoTheoryQPE.run"]], "run() (algorithmkitaevqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmKitaevQPE.run"]], "run() (algorithmmclachlanimagtime method)": [[6, "inquanto.algorithms.time_evolution.AlgorithmMcLachlanImagTime.run"]], "run() (algorithmmclachlanrealtime method)": [[6, "inquanto.algorithms.time_evolution.AlgorithmMcLachlanRealTime.run"]], "run() (algorithmqse method)": [[6, "inquanto.algorithms.qse.AlgorithmQSE.run"]], "run() (algorithmsceom method)": [[6, "inquanto.algorithms.sceom.AlgorithmSCEOM.run"]], "run() (algorithmvqd method)": [[6, "inquanto.algorithms.vqd.AlgorithmVQD.run"]], "run() (algorithmvqe method)": [[6, "inquanto.algorithms.vqe.AlgorithmVQE.run"]], "run() (algorithmvqs method)": [[6, "inquanto.algorithms.time_evolution.AlgorithmVQS.run"]], "run_async() (algorithminfotheoryqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmInfoTheoryQPE.run_async"]], "run_async() (algorithmkitaevqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmKitaevQPE.run_async"]], "run_experiment() (algorithmdeterministicqpe method)": [[6, "inquanto.algorithms.phase_estimation.AlgorithmDeterministicQPE.run_experiment"]], "circuitansatz (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.CircuitAnsatz"]], "composedansatz (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.ComposedAnsatz"]], "fermionspaceansatzchemicallyawareuccsd (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD"]], "fermionspaceansatzuccd (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD"]], "fermionspaceansatzuccgd (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD"]], "fermionspaceansatzuccgsd (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD"]], "fermionspaceansatzuccsd (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD"]], "fermionspaceansatzuccsdsinglet (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet"]], "fermionspaceansatzkupccgd (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD"]], "fermionspaceansatzkupccgsd (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD"]], "fermionspaceansatzkupccgsdsinglet (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet"]], "fermionspacestateexp (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.FermionSpaceStateExp"]], "fermionspacestateexpchemicallyaware (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware"]], "generalansatz (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.GeneralAnsatz"]], "hamiltonianvariationalansatz (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz"]], "hardwareefficientansatz (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz"]], "layeredansatz (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.LayeredAnsatz"]], "multiconfigurationansatz (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz"]], "multiconfigurationstate (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.MultiConfigurationState"]], "multiconfigurationstatebox (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox"]], "realgeneralizedbasisrotationansatz (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz"]], "realrestrictedbasisrotationansatz (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz"]], "realunrestrictedbasisrotationansatz (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz"]], "trotteransatz (class in inquanto.ansatzes)": [[7, "inquanto.ansatzes.TrotterAnsatz"]], "ansatz_parameters_from_unitary() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.ansatz_parameters_from_unitary"]], "ansatz_parameters_from_unitary() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.ansatz_parameters_from_unitary"]], "ansatz_parameters_from_unitary() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.ansatz_parameters_from_unitary"]], "circuit_resources() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.circuit_resources"]], "circuit_resources() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.circuit_resources"]], "circuit_resources() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.circuit_resources"]], "circuit_resources() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.circuit_resources"]], "circuit_resources() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.circuit_resources"]], "circuit_resources() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.circuit_resources"]], "circuit_resources() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.circuit_resources"]], "circuit_resources() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.circuit_resources"]], "circuit_resources() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.circuit_resources"]], "circuit_resources() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.circuit_resources"]], "circuit_resources() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.circuit_resources"]], "circuit_resources() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.circuit_resources"]], "circuit_resources() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.circuit_resources"]], "circuit_resources() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.circuit_resources"]], "circuit_resources() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.circuit_resources"]], "circuit_resources() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.circuit_resources"]], "circuit_resources() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.circuit_resources"]], "circuit_resources() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.circuit_resources"]], "circuit_resources() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.circuit_resources"]], "circuit_resources() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.circuit_resources"]], "circuit_resources() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.circuit_resources"]], "circuit_resources() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.circuit_resources"]], "circuit_resources() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.circuit_resources"]], "circuit_resources() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.circuit_resources"]], "clone() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.clone"]], "clone() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.clone"]], "clone() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.clone"]], "clone() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.clone"]], "clone() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.clone"]], "clone() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.clone"]], "clone() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.clone"]], "clone() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.clone"]], "clone() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.clone"]], "clone() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.clone"]], "clone() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.clone"]], "clone() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.clone"]], "clone() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.clone"]], "clone() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.clone"]], "clone() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.clone"]], "clone() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.clone"]], "clone() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.clone"]], "clone() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.clone"]], "clone() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.clone"]], "clone() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.clone"]], "clone() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.clone"]], "clone() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.clone"]], "clone() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.clone"]], "clone() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.clone"]], "copy() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.copy"]], "copy() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.copy"]], "copy() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.copy"]], "copy() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.copy"]], "copy() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.copy"]], "copy() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.copy"]], "copy() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.copy"]], "copy() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.copy"]], "copy() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.copy"]], "copy() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.copy"]], "copy() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.copy"]], "copy() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.copy"]], "copy() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.copy"]], "copy() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.copy"]], "copy() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.copy"]], "copy() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.copy"]], "copy() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.copy"]], "copy() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.copy"]], "copy() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.copy"]], "copy() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.copy"]], "copy() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.copy"]], "copy() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.copy"]], "copy() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.copy"]], "copy() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.copy"]], "default_pass() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.default_pass"]], "default_pass() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.default_pass"]], "default_pass() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.default_pass"]], "default_pass() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.default_pass"]], "default_pass() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.default_pass"]], "default_pass() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.default_pass"]], "default_pass() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.default_pass"]], "default_pass() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.default_pass"]], "default_pass() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.default_pass"]], "default_pass() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.default_pass"]], "default_pass() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.default_pass"]], "default_pass() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.default_pass"]], "default_pass() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.default_pass"]], "default_pass() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.default_pass"]], "default_pass() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.default_pass"]], "default_pass() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.default_pass"]], "default_pass() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.default_pass"]], "default_pass() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.default_pass"]], "default_pass() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.default_pass"]], "default_pass() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.default_pass"]], "default_pass() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.default_pass"]], "default_pass() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.default_pass"]], "default_pass() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.default_pass"]], "default_pass() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.default_pass"]], "df_numeric() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.df_numeric"]], "df_numeric() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.df_numeric"]], "df_numeric() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.df_numeric"]], "df_numeric() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.df_numeric"]], "df_numeric() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.df_numeric"]], "df_numeric() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.df_numeric"]], "df_numeric() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.df_numeric"]], "df_numeric() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.df_numeric"]], "df_numeric() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.df_numeric"]], "df_numeric() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.df_numeric"]], "df_numeric() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.df_numeric"]], "df_numeric() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.df_numeric"]], "df_numeric() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.df_numeric"]], "df_numeric() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.df_numeric"]], "df_numeric() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.df_numeric"]], "df_numeric() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.df_numeric"]], "df_numeric() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.df_numeric"]], "df_numeric() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.df_numeric"]], "df_numeric() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.df_numeric"]], "df_numeric() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.df_numeric"]], "df_numeric() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.df_numeric"]], "df_numeric() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.df_numeric"]], "df_numeric() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.df_numeric"]], "df_numeric() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.df_numeric"]], "df_symbolic() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.df_symbolic"]], "df_symbolic() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.df_symbolic"]], "df_symbolic() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.df_symbolic"]], "df_symbolic() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.df_symbolic"]], "df_symbolic() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.df_symbolic"]], "df_symbolic() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.df_symbolic"]], "df_symbolic() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.df_symbolic"]], "df_symbolic() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.df_symbolic"]], "df_symbolic() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.df_symbolic"]], "df_symbolic() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.df_symbolic"]], "df_symbolic() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.df_symbolic"]], "df_symbolic() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.df_symbolic"]], "df_symbolic() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.df_symbolic"]], "df_symbolic() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.df_symbolic"]], "df_symbolic() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.df_symbolic"]], "df_symbolic() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.df_symbolic"]], "df_symbolic() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.df_symbolic"]], "df_symbolic() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.df_symbolic"]], "df_symbolic() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.df_symbolic"]], "df_symbolic() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.df_symbolic"]], "df_symbolic() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.df_symbolic"]], "df_symbolic() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.df_symbolic"]], "df_symbolic() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.df_symbolic"]], "df_symbolic() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.df_symbolic"]], "exponents (fermionspaceansatzuccd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.exponents"]], "exponents (fermionspaceansatzuccgd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.exponents"]], "exponents (fermionspaceansatzuccgsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.exponents"]], "exponents (fermionspaceansatzuccsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.exponents"]], "exponents (fermionspaceansatzuccsdsinglet property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.exponents"]], "exponents (fermionspaceansatzkupccgd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.exponents"]], "exponents (fermionspaceansatzkupccgsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.exponents"]], "exponents (fermionspaceansatzkupccgsdsinglet property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.exponents"]], "exponents (fermionspacestateexp property)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.exponents"]], "exponents (hamiltonianvariationalansatz property)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.exponents"]], "exponents (trotteransatz property)": [[7, "inquanto.ansatzes.TrotterAnsatz.exponents"]], "fermion_operator_exponents (fermionspaceansatzchemicallyawareuccsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.fermion_operator_exponents"]], "fermion_operator_exponents (fermionspaceansatzuccd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.fermion_operator_exponents"]], "fermion_operator_exponents (fermionspaceansatzuccgd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.fermion_operator_exponents"]], "fermion_operator_exponents (fermionspaceansatzuccgsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.fermion_operator_exponents"]], "fermion_operator_exponents (fermionspaceansatzuccsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.fermion_operator_exponents"]], "fermion_operator_exponents (fermionspaceansatzuccsdsinglet property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.fermion_operator_exponents"]], "fermion_operator_exponents (fermionspaceansatzkupccgd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.fermion_operator_exponents"]], "fermion_operator_exponents (fermionspaceansatzkupccgsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.fermion_operator_exponents"]], "fermion_operator_exponents (fermionspaceansatzkupccgsdsinglet property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.fermion_operator_exponents"]], "fermion_operator_exponents (fermionspacestateexp property)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.fermion_operator_exponents"]], "fermion_operator_exponents (fermionspacestateexpchemicallyaware property)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.fermion_operator_exponents"]], "free_symbols() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.free_symbols"]], "free_symbols() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.free_symbols"]], "free_symbols() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.free_symbols"]], "free_symbols() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.free_symbols"]], "free_symbols() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.free_symbols"]], "free_symbols() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.free_symbols"]], "free_symbols() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.free_symbols"]], "free_symbols() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.free_symbols"]], "free_symbols() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.free_symbols"]], "free_symbols() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.free_symbols"]], "free_symbols() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.free_symbols"]], "free_symbols() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.free_symbols"]], "free_symbols() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.free_symbols"]], "free_symbols() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.free_symbols"]], "free_symbols() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.free_symbols"]], "free_symbols() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.free_symbols"]], "free_symbols() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.free_symbols"]], "free_symbols() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.free_symbols"]], "free_symbols() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.free_symbols"]], "free_symbols() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.free_symbols"]], "free_symbols() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.free_symbols"]], "free_symbols() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.free_symbols"]], "free_symbols() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.free_symbols"]], "free_symbols() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.free_symbols"]], "free_symbols_ordered() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.free_symbols_ordered"]], "free_symbols_ordered() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.free_symbols_ordered"]], "free_symbols_ordered() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.free_symbols_ordered"]], "free_symbols_ordered() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.free_symbols_ordered"]], "free_symbols_ordered() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.free_symbols_ordered"]], "free_symbols_ordered() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.free_symbols_ordered"]], "free_symbols_ordered() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.free_symbols_ordered"]], "free_symbols_ordered() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.free_symbols_ordered"]], "free_symbols_ordered() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.free_symbols_ordered"]], "free_symbols_ordered() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.free_symbols_ordered"]], "free_symbols_ordered() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.free_symbols_ordered"]], "free_symbols_ordered() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.free_symbols_ordered"]], "free_symbols_ordered() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.free_symbols_ordered"]], "free_symbols_ordered() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.free_symbols_ordered"]], "free_symbols_ordered() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.free_symbols_ordered"]], "free_symbols_ordered() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.free_symbols_ordered"]], "free_symbols_ordered() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.free_symbols_ordered"]], "free_symbols_ordered() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.free_symbols_ordered"]], "free_symbols_ordered() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.free_symbols_ordered"]], "free_symbols_ordered() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.free_symbols_ordered"]], "free_symbols_ordered() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.free_symbols_ordered"]], "free_symbols_ordered() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.free_symbols_ordered"]], "free_symbols_ordered() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.free_symbols_ordered"]], "free_symbols_ordered() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.free_symbols_ordered"]], "generalized_basis_rotation_to_circuit() (in module inquanto.ansatzes)": [[7, "inquanto.ansatzes.generalized_basis_rotation_to_circuit"]], "generate_report() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.generate_report"]], "generate_report() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.generate_report"]], "generate_report() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.generate_report"]], "generate_report() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.generate_report"]], "generate_report() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.generate_report"]], "generate_report() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.generate_report"]], "generate_report() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.generate_report"]], "generate_report() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.generate_report"]], "generate_report() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.generate_report"]], "generate_report() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.generate_report"]], "generate_report() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.generate_report"]], "generate_report() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.generate_report"]], "generate_report() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.generate_report"]], "generate_report() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.generate_report"]], "generate_report() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.generate_report"]], "generate_report() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.generate_report"]], "generate_report() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.generate_report"]], "generate_report() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.generate_report"]], "generate_report() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.generate_report"]], "generate_report() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.generate_report"]], "generate_report() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.generate_report"]], "generate_report() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.generate_report"]], "generate_report() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.generate_report"]], "generate_report() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.generate_report"]], "get_circuit() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.get_circuit"]], "get_circuit() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.get_circuit"]], "get_circuit() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.get_circuit"]], "get_circuit() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.get_circuit"]], "get_circuit() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.get_circuit"]], "get_circuit() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.get_circuit"]], "get_circuit() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.get_circuit"]], "get_circuit() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.get_circuit"]], "get_circuit() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.get_circuit"]], "get_circuit() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.get_circuit"]], "get_circuit() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.get_circuit"]], "get_circuit() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.get_circuit"]], "get_circuit() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.get_circuit"]], "get_circuit() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.get_circuit"]], "get_circuit() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.get_circuit"]], "get_circuit() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.get_circuit"]], "get_circuit() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.get_circuit"]], "get_circuit() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.get_circuit"]], "get_circuit() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.get_circuit"]], "get_circuit() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.get_circuit"]], "get_circuit() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.get_circuit"]], "get_circuit() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.get_circuit"]], "get_circuit() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.get_circuit"]], "get_circuit() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.get_circuit"]], "get_circuit_no_ref() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.get_circuit_no_ref"]], "get_circuit_no_ref() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.get_circuit_no_ref"]], "get_circuit_no_ref() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.get_circuit_no_ref"]], "get_circuit_no_ref() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.get_circuit_no_ref"]], "get_circuit_no_ref() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.get_circuit_no_ref"]], "get_circuit_no_ref() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.get_circuit_no_ref"]], "get_circuit_no_ref() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.get_circuit_no_ref"]], "get_circuit_no_ref() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.get_circuit_no_ref"]], "get_circuit_no_ref() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.get_circuit_no_ref"]], "get_circuit_no_ref() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.get_circuit_no_ref"]], "get_circuit_no_ref() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.get_circuit_no_ref"]], "get_circuit_no_ref() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.get_circuit_no_ref"]], "get_circuit_no_ref() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.get_circuit_no_ref"]], "get_circuit_no_ref() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.get_circuit_no_ref"]], "get_circuit_no_ref() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.get_circuit_no_ref"]], "get_circuit_no_ref() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.get_circuit_no_ref"]], "get_circuit_no_ref() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.get_circuit_no_ref"]], "get_circuit_no_ref() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.get_circuit_no_ref"]], "get_circuit_no_ref() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.get_circuit_no_ref"]], "get_circuit_no_ref() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.get_circuit_no_ref"]], "get_circuit_no_ref() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.get_circuit_no_ref"]], "get_circuit_no_ref() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.get_circuit_no_ref"]], "get_circuit_no_ref() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.get_circuit_no_ref"]], "get_circuit_no_ref() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.get_circuit_no_ref"]], "get_numeric_representation() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.get_numeric_representation"]], "get_numeric_representation() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.get_numeric_representation"]], "get_numeric_representation() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.get_numeric_representation"]], "get_numeric_representation() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.get_numeric_representation"]], "get_numeric_representation() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.get_numeric_representation"]], "get_numeric_representation() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.get_numeric_representation"]], "get_numeric_representation() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.get_numeric_representation"]], "get_numeric_representation() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.get_numeric_representation"]], "get_numeric_representation() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.get_numeric_representation"]], "get_numeric_representation() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.get_numeric_representation"]], "get_numeric_representation() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.get_numeric_representation"]], "get_numeric_representation() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.get_numeric_representation"]], "get_numeric_representation() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.get_numeric_representation"]], "get_numeric_representation() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.get_numeric_representation"]], "get_numeric_representation() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.get_numeric_representation"]], "get_numeric_representation() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.get_numeric_representation"]], "get_numeric_representation() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.get_numeric_representation"]], "get_numeric_representation() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.get_numeric_representation"]], "get_numeric_representation() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.get_numeric_representation"]], "get_numeric_representation() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.get_numeric_representation"]], "get_numeric_representation() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.get_numeric_representation"]], "get_numeric_representation() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.get_numeric_representation"]], "get_numeric_representation() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.get_numeric_representation"]], "get_numeric_representation() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.get_numeric_representation"]], "get_symbolic_representation() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.get_symbolic_representation"]], "get_symbolic_representation() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.get_symbolic_representation"]], "get_symbolic_representation() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.get_symbolic_representation"]], "get_symbolic_representation() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.get_symbolic_representation"]], "get_symbolic_representation() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.get_symbolic_representation"]], "get_symbolic_representation() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.get_symbolic_representation"]], "get_symbolic_representation() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.get_symbolic_representation"]], "get_symbolic_representation() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.get_symbolic_representation"]], "get_symbolic_representation() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.get_symbolic_representation"]], "get_symbolic_representation() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.get_symbolic_representation"]], "get_symbolic_representation() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.get_symbolic_representation"]], "get_symbolic_representation() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.get_symbolic_representation"]], "get_symbolic_representation() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.get_symbolic_representation"]], "get_symbolic_representation() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.get_symbolic_representation"]], "get_symbolic_representation() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.get_symbolic_representation"]], "get_symbolic_representation() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.get_symbolic_representation"]], "get_symbolic_representation() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.get_symbolic_representation"]], "get_symbolic_representation() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.get_symbolic_representation"]], "get_symbolic_representation() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.get_symbolic_representation"]], "get_symbolic_representation() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.get_symbolic_representation"]], "get_symbolic_representation() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.get_symbolic_representation"]], "get_symbolic_representation() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.get_symbolic_representation"]], "get_symbolic_representation() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.get_symbolic_representation"]], "get_symbolic_representation() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.get_symbolic_representation"]], "make_hashable() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.make_hashable"]], "make_hashable() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.make_hashable"]], "make_hashable() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.make_hashable"]], "make_hashable() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.make_hashable"]], "make_hashable() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.make_hashable"]], "make_hashable() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.make_hashable"]], "make_hashable() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.make_hashable"]], "make_hashable() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.make_hashable"]], "make_hashable() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.make_hashable"]], "make_hashable() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.make_hashable"]], "make_hashable() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.make_hashable"]], "make_hashable() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.make_hashable"]], "make_hashable() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.make_hashable"]], "make_hashable() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.make_hashable"]], "make_hashable() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.make_hashable"]], "make_hashable() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.make_hashable"]], "make_hashable() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.make_hashable"]], "make_hashable() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.make_hashable"]], "make_hashable() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.make_hashable"]], "make_hashable() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.make_hashable"]], "make_hashable() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.make_hashable"]], "make_hashable() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.make_hashable"]], "make_hashable() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.make_hashable"]], "make_hashable() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.make_hashable"]], "n_qubits (circuitansatz property)": [[7, "inquanto.ansatzes.CircuitAnsatz.n_qubits"]], "n_qubits (composedansatz property)": [[7, "inquanto.ansatzes.ComposedAnsatz.n_qubits"]], "n_qubits (fermionspaceansatzchemicallyawareuccsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.n_qubits"]], "n_qubits (fermionspaceansatzuccd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.n_qubits"]], "n_qubits (fermionspaceansatzuccgd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.n_qubits"]], "n_qubits (fermionspaceansatzuccgsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.n_qubits"]], "n_qubits (fermionspaceansatzuccsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.n_qubits"]], "n_qubits (fermionspaceansatzuccsdsinglet property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.n_qubits"]], "n_qubits (fermionspaceansatzkupccgd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.n_qubits"]], "n_qubits (fermionspaceansatzkupccgsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.n_qubits"]], "n_qubits (fermionspaceansatzkupccgsdsinglet property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.n_qubits"]], "n_qubits (fermionspacestateexp property)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.n_qubits"]], "n_qubits (fermionspacestateexpchemicallyaware property)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.n_qubits"]], "n_qubits (generalansatz property)": [[7, "inquanto.ansatzes.GeneralAnsatz.n_qubits"]], "n_qubits (hamiltonianvariationalansatz property)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.n_qubits"]], "n_qubits (hardwareefficientansatz property)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.n_qubits"]], "n_qubits (layeredansatz property)": [[7, "inquanto.ansatzes.LayeredAnsatz.n_qubits"]], "n_qubits (multiconfigurationansatz property)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.n_qubits"]], "n_qubits (multiconfigurationstate property)": [[7, "inquanto.ansatzes.MultiConfigurationState.n_qubits"]], "n_qubits (multiconfigurationstatebox property)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.n_qubits"]], "n_qubits (realgeneralizedbasisrotationansatz property)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.n_qubits"]], "n_qubits (realrestrictedbasisrotationansatz property)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.n_qubits"]], "n_qubits (realunrestrictedbasisrotationansatz property)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.n_qubits"]], "n_qubits (trotteransatz property)": [[7, "inquanto.ansatzes.TrotterAnsatz.n_qubits"]], "n_symbols (circuitansatz property)": [[7, "inquanto.ansatzes.CircuitAnsatz.n_symbols"]], "n_symbols (composedansatz property)": [[7, "inquanto.ansatzes.ComposedAnsatz.n_symbols"]], "n_symbols (fermionspaceansatzchemicallyawareuccsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.n_symbols"]], "n_symbols (fermionspaceansatzuccd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.n_symbols"]], "n_symbols (fermionspaceansatzuccgd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.n_symbols"]], "n_symbols (fermionspaceansatzuccgsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.n_symbols"]], "n_symbols (fermionspaceansatzuccsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.n_symbols"]], "n_symbols (fermionspaceansatzuccsdsinglet property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.n_symbols"]], "n_symbols (fermionspaceansatzkupccgd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.n_symbols"]], "n_symbols (fermionspaceansatzkupccgsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.n_symbols"]], "n_symbols (fermionspaceansatzkupccgsdsinglet property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.n_symbols"]], "n_symbols (fermionspacestateexp property)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.n_symbols"]], "n_symbols (fermionspacestateexpchemicallyaware property)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.n_symbols"]], "n_symbols (generalansatz property)": [[7, "inquanto.ansatzes.GeneralAnsatz.n_symbols"]], "n_symbols (hamiltonianvariationalansatz property)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.n_symbols"]], "n_symbols (hardwareefficientansatz property)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.n_symbols"]], "n_symbols (layeredansatz property)": [[7, "inquanto.ansatzes.LayeredAnsatz.n_symbols"]], "n_symbols (multiconfigurationansatz property)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.n_symbols"]], "n_symbols (multiconfigurationstate property)": [[7, "inquanto.ansatzes.MultiConfigurationState.n_symbols"]], "n_symbols (multiconfigurationstatebox property)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.n_symbols"]], "n_symbols (realgeneralizedbasisrotationansatz property)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.n_symbols"]], "n_symbols (realrestrictedbasisrotationansatz property)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.n_symbols"]], "n_symbols (realunrestrictedbasisrotationansatz property)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.n_symbols"]], "n_symbols (trotteransatz property)": [[7, "inquanto.ansatzes.TrotterAnsatz.n_symbols"]], "reference_circuit_builder() (in module inquanto.ansatzes)": [[7, "inquanto.ansatzes.reference_circuit_builder"]], "reference_qubit_state() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.reference_qubit_state"]], "reference_qubit_state() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.reference_qubit_state"]], "reference_qubit_state() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.reference_qubit_state"]], "reference_qubit_state() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.reference_qubit_state"]], "reference_qubit_state() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.reference_qubit_state"]], "reference_qubit_state() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.reference_qubit_state"]], "reference_qubit_state() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.reference_qubit_state"]], "reference_qubit_state() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.reference_qubit_state"]], "reference_qubit_state() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.reference_qubit_state"]], "reference_qubit_state() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.reference_qubit_state"]], "reference_qubit_state() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.reference_qubit_state"]], "reference_qubit_state() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.reference_qubit_state"]], "reference_qubit_state() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.reference_qubit_state"]], "reference_qubit_state() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.reference_qubit_state"]], "reference_qubit_state() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.reference_qubit_state"]], "reference_qubit_state() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.reference_qubit_state"]], "reference_qubit_state() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.reference_qubit_state"]], "reference_qubit_state() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.reference_qubit_state"]], "reference_qubit_state() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.reference_qubit_state"]], "reference_qubit_state() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.reference_qubit_state"]], "reference_qubit_state() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.reference_qubit_state"]], "reference_qubit_state() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.reference_qubit_state"]], "reference_qubit_state() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.reference_qubit_state"]], "reference_qubit_state() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.reference_qubit_state"]], "reset_reference() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.reset_reference"]], "reset_reference() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.reset_reference"]], "reset_reference() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.reset_reference"]], "reset_reference() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.reset_reference"]], "reset_reference() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.reset_reference"]], "reset_reference() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.reset_reference"]], "reset_reference() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.reset_reference"]], "reset_reference() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.reset_reference"]], "reset_reference() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.reset_reference"]], "reset_reference() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.reset_reference"]], "reset_reference() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.reset_reference"]], "reset_reference() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.reset_reference"]], "reset_reference() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.reset_reference"]], "reset_reference() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.reset_reference"]], "reset_reference() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.reset_reference"]], "reset_reference() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.reset_reference"]], "reset_reference() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.reset_reference"]], "reset_reference() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.reset_reference"]], "reset_reference() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.reset_reference"]], "reset_reference() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.reset_reference"]], "reset_reference() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.reset_reference"]], "reset_reference() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.reset_reference"]], "reset_reference() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.reset_reference"]], "reset_reference() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.reset_reference"]], "restricted_basis_rotation_to_circuit() (in module inquanto.ansatzes)": [[7, "inquanto.ansatzes.restricted_basis_rotation_to_circuit"]], "rotate_ansatz_restricted() (in module inquanto.ansatzes)": [[7, "inquanto.ansatzes.rotate_ansatz_restricted"]], "split_hamiltonian (hamiltonianvariationalansatz property)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.split_hamiltonian"]], "state_circuit (circuitansatz property)": [[7, "inquanto.ansatzes.CircuitAnsatz.state_circuit"]], "state_circuit (composedansatz property)": [[7, "inquanto.ansatzes.ComposedAnsatz.state_circuit"]], "state_circuit (fermionspaceansatzchemicallyawareuccsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.state_circuit"]], "state_circuit (fermionspaceansatzuccd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.state_circuit"]], "state_circuit (fermionspaceansatzuccgd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.state_circuit"]], "state_circuit (fermionspaceansatzuccgsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.state_circuit"]], "state_circuit (fermionspaceansatzuccsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.state_circuit"]], "state_circuit (fermionspaceansatzuccsdsinglet property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.state_circuit"]], "state_circuit (fermionspaceansatzkupccgd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.state_circuit"]], "state_circuit (fermionspaceansatzkupccgsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.state_circuit"]], "state_circuit (fermionspaceansatzkupccgsdsinglet property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.state_circuit"]], "state_circuit (fermionspacestateexp property)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.state_circuit"]], "state_circuit (fermionspacestateexpchemicallyaware property)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.state_circuit"]], "state_circuit (generalansatz property)": [[7, "inquanto.ansatzes.GeneralAnsatz.state_circuit"]], "state_circuit (hamiltonianvariationalansatz property)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.state_circuit"]], "state_circuit (hardwareefficientansatz property)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.state_circuit"]], "state_circuit (layeredansatz property)": [[7, "inquanto.ansatzes.LayeredAnsatz.state_circuit"]], "state_circuit (multiconfigurationansatz property)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.state_circuit"]], "state_circuit (multiconfigurationstate property)": [[7, "inquanto.ansatzes.MultiConfigurationState.state_circuit"]], "state_circuit (multiconfigurationstatebox property)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.state_circuit"]], "state_circuit (realgeneralizedbasisrotationansatz property)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.state_circuit"]], "state_circuit (realrestrictedbasisrotationansatz property)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.state_circuit"]], "state_circuit (realunrestrictedbasisrotationansatz property)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.state_circuit"]], "state_circuit (trotteransatz property)": [[7, "inquanto.ansatzes.TrotterAnsatz.state_circuit"]], "state_symbols (circuitansatz property)": [[7, "inquanto.ansatzes.CircuitAnsatz.state_symbols"]], "state_symbols (composedansatz property)": [[7, "inquanto.ansatzes.ComposedAnsatz.state_symbols"]], "state_symbols (fermionspaceansatzchemicallyawareuccsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.state_symbols"]], "state_symbols (fermionspaceansatzuccd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.state_symbols"]], "state_symbols (fermionspaceansatzuccgd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.state_symbols"]], "state_symbols (fermionspaceansatzuccgsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.state_symbols"]], "state_symbols (fermionspaceansatzuccsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.state_symbols"]], "state_symbols (fermionspaceansatzuccsdsinglet property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.state_symbols"]], "state_symbols (fermionspaceansatzkupccgd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.state_symbols"]], "state_symbols (fermionspaceansatzkupccgsd property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.state_symbols"]], "state_symbols (fermionspaceansatzkupccgsdsinglet property)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.state_symbols"]], "state_symbols (fermionspacestateexp property)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.state_symbols"]], "state_symbols (fermionspacestateexpchemicallyaware property)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.state_symbols"]], "state_symbols (generalansatz property)": [[7, "inquanto.ansatzes.GeneralAnsatz.state_symbols"]], "state_symbols (hamiltonianvariationalansatz property)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.state_symbols"]], "state_symbols (hardwareefficientansatz property)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.state_symbols"]], "state_symbols (layeredansatz property)": [[7, "inquanto.ansatzes.LayeredAnsatz.state_symbols"]], "state_symbols (multiconfigurationansatz property)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.state_symbols"]], "state_symbols (multiconfigurationstate property)": [[7, "inquanto.ansatzes.MultiConfigurationState.state_symbols"]], "state_symbols (multiconfigurationstatebox property)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.state_symbols"]], "state_symbols (realgeneralizedbasisrotationansatz property)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.state_symbols"]], "state_symbols (realrestrictedbasisrotationansatz property)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.state_symbols"]], "state_symbols (realunrestrictedbasisrotationansatz property)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.state_symbols"]], "state_symbols (trotteransatz property)": [[7, "inquanto.ansatzes.TrotterAnsatz.state_symbols"]], "subs() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.subs"]], "subs() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.subs"]], "subs() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.subs"]], "subs() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.subs"]], "subs() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.subs"]], "subs() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.subs"]], "subs() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.subs"]], "subs() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.subs"]], "subs() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.subs"]], "subs() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.subs"]], "subs() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.subs"]], "subs() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.subs"]], "subs() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.subs"]], "subs() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.subs"]], "subs() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.subs"]], "subs() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.subs"]], "subs() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.subs"]], "subs() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.subs"]], "subs() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.subs"]], "subs() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.subs"]], "subs() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.subs"]], "subs() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.subs"]], "subs() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.subs"]], "subs() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.subs"]], "symbol_substitution() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.symbol_substitution"]], "symbol_substitution() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.symbol_substitution"]], "symbol_substitution() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.symbol_substitution"]], "symbol_substitution() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.symbol_substitution"]], "symbol_substitution() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.symbol_substitution"]], "symbol_substitution() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.symbol_substitution"]], "symbol_substitution() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.symbol_substitution"]], "symbol_substitution() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.symbol_substitution"]], "symbol_substitution() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.symbol_substitution"]], "symbol_substitution() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.symbol_substitution"]], "symbol_substitution() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.symbol_substitution"]], "symbol_substitution() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.symbol_substitution"]], "symbol_substitution() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.symbol_substitution"]], "symbol_substitution() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.symbol_substitution"]], "symbol_substitution() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.symbol_substitution"]], "symbol_substitution() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.symbol_substitution"]], "symbol_substitution() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.symbol_substitution"]], "symbol_substitution() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.symbol_substitution"]], "symbol_substitution() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.symbol_substitution"]], "symbol_substitution() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.symbol_substitution"]], "symbol_substitution() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.symbol_substitution"]], "symbol_substitution() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.symbol_substitution"]], "symbol_substitution() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.symbol_substitution"]], "symbol_substitution() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.symbol_substitution"]], "to_circuitansatz() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.to_CircuitAnsatz"]], "to_circuitansatz() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.to_CircuitAnsatz"]], "to_circuitansatz() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.to_CircuitAnsatz"]], "to_circuitansatz() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.to_CircuitAnsatz"]], "to_circuitansatz() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.to_CircuitAnsatz"]], "to_circuitansatz() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.to_CircuitAnsatz"]], "to_circuitansatz() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.to_CircuitAnsatz"]], "to_circuitansatz() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.to_CircuitAnsatz"]], "to_circuitansatz() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.to_CircuitAnsatz"]], "to_circuitansatz() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.to_CircuitAnsatz"]], "to_circuitansatz() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.to_CircuitAnsatz"]], "to_circuitansatz() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.to_CircuitAnsatz"]], "to_circuitansatz() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.to_CircuitAnsatz"]], "to_circuitansatz() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.to_CircuitAnsatz"]], "to_circuitansatz() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.to_CircuitAnsatz"]], "to_circuitansatz() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.to_CircuitAnsatz"]], "to_circuitansatz() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.to_CircuitAnsatz"]], "to_circuitansatz() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.to_CircuitAnsatz"]], "to_circuitansatz() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.to_CircuitAnsatz"]], "to_circuitansatz() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.to_CircuitAnsatz"]], "to_circuitansatz() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.to_CircuitAnsatz"]], "to_circuitansatz() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.to_CircuitAnsatz"]], "to_circuitansatz() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.to_CircuitAnsatz"]], "to_circuitansatz() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.to_CircuitAnsatz"]], "to_qubitstate() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.to_QubitState"]], "to_qubitstate() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.to_QubitState"]], "to_qubitstate() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.to_QubitState"]], "to_qubitstate() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.to_QubitState"]], "to_qubitstate() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.to_QubitState"]], "to_qubitstate() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.to_QubitState"]], "to_qubitstate() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.to_QubitState"]], "to_qubitstate() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.to_QubitState"]], "to_qubitstate() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.to_QubitState"]], "to_qubitstate() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.to_QubitState"]], "to_qubitstate() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.to_QubitState"]], "to_qubitstate() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.to_QubitState"]], "to_qubitstate() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.to_QubitState"]], "to_qubitstate() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.to_QubitState"]], "to_qubitstate() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.to_QubitState"]], "to_qubitstate() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.to_QubitState"]], "to_qubitstate() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.to_QubitState"]], "to_qubitstate() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.to_QubitState"]], "to_qubitstate() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.to_QubitState"]], "to_qubitstate() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.to_QubitState"]], "to_qubitstate() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.to_QubitState"]], "to_qubitstate() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.to_QubitState"]], "to_qubitstate() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.to_QubitState"]], "to_qubitstate() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.to_QubitState"]], "to_qubitstate_direct() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.to_QubitState_direct"]], "to_qubitstate_direct() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.to_QubitState_direct"]], "to_qubitstate_direct() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.to_QubitState_direct"]], "to_qubitstate_direct() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.to_QubitState_direct"]], "to_qubitstate_direct() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.to_QubitState_direct"]], "to_qubitstate_direct() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.to_QubitState_direct"]], "to_qubitstate_direct() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.to_QubitState_direct"]], "to_qubitstate_direct() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.to_QubitState_direct"]], "to_qubitstate_direct() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.to_QubitState_direct"]], "to_qubitstate_direct() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.to_QubitState_direct"]], "to_qubitstate_direct() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.to_QubitState_direct"]], "unrestricted_basis_rotation_to_circuit() (in module inquanto.ansatzes)": [[7, "inquanto.ansatzes.unrestricted_basis_rotation_to_circuit"]], "unsympify() (circuitansatz method)": [[7, "inquanto.ansatzes.CircuitAnsatz.unsympify"]], "unsympify() (composedansatz method)": [[7, "inquanto.ansatzes.ComposedAnsatz.unsympify"]], "unsympify() (fermionspaceansatzchemicallyawareuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzChemicallyAwareUCCSD.unsympify"]], "unsympify() (fermionspaceansatzuccd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCD.unsympify"]], "unsympify() (fermionspaceansatzuccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGD.unsympify"]], "unsympify() (fermionspaceansatzuccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCGSD.unsympify"]], "unsympify() (fermionspaceansatzuccsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSD.unsympify"]], "unsympify() (fermionspaceansatzuccsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzUCCSDSinglet.unsympify"]], "unsympify() (fermionspaceansatzkupccgd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGD.unsympify"]], "unsympify() (fermionspaceansatzkupccgsd method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSD.unsympify"]], "unsympify() (fermionspaceansatzkupccgsdsinglet method)": [[7, "inquanto.ansatzes.FermionSpaceAnsatzkUpCCGSDSinglet.unsympify"]], "unsympify() (fermionspacestateexp method)": [[7, "inquanto.ansatzes.FermionSpaceStateExp.unsympify"]], "unsympify() (fermionspacestateexpchemicallyaware method)": [[7, "inquanto.ansatzes.FermionSpaceStateExpChemicallyAware.unsympify"]], "unsympify() (generalansatz method)": [[7, "inquanto.ansatzes.GeneralAnsatz.unsympify"]], "unsympify() (hamiltonianvariationalansatz method)": [[7, "inquanto.ansatzes.HamiltonianVariationalAnsatz.unsympify"]], "unsympify() (hardwareefficientansatz method)": [[7, "inquanto.ansatzes.HardwareEfficientAnsatz.unsympify"]], "unsympify() (layeredansatz method)": [[7, "inquanto.ansatzes.LayeredAnsatz.unsympify"]], "unsympify() (multiconfigurationansatz method)": [[7, "inquanto.ansatzes.MultiConfigurationAnsatz.unsympify"]], "unsympify() (multiconfigurationstate method)": [[7, "inquanto.ansatzes.MultiConfigurationState.unsympify"]], "unsympify() (multiconfigurationstatebox method)": [[7, "inquanto.ansatzes.MultiConfigurationStateBox.unsympify"]], "unsympify() (realgeneralizedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealGeneralizedBasisRotationAnsatz.unsympify"]], "unsympify() (realrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealRestrictedBasisRotationAnsatz.unsympify"]], "unsympify() (realunrestrictedbasisrotationansatz method)": [[7, "inquanto.ansatzes.RealUnrestrictedBasisRotationAnsatz.unsympify"]], "unsympify() (trotteransatz method)": [[7, "inquanto.ansatzes.TrotterAnsatz.unsympify"]], "aligned (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.ALIGNED"]], "averageable (class in inquanto.computables.primitive)": [[8, "inquanto.computables.primitive.Averageable"]], "behaved (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.BEHAVED"]], "carray (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.CARRAY"]], "c_contiguous (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.C_CONTIGUOUS"]], "commutatorcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.CommutatorComputable"]], "computablefunction (class in inquanto.computables.primitive)": [[8, "inquanto.computables.primitive.ComputableFunction"]], "computableint (class in inquanto.computables.primitive)": [[8, "inquanto.computables.primitive.ComputableInt"]], "computablelist (class in inquanto.computables.primitive)": [[8, "inquanto.computables.primitive.ComputableList"]], "computablendarray (class in inquanto.computables.primitive)": [[8, "inquanto.computables.primitive.ComputableNDArray"]], "computablenode (class in inquanto.computables.primitive)": [[8, "inquanto.computables.primitive.ComputableNode"]], "computablesinglechild (class in inquanto.computables.primitive)": [[8, "inquanto.computables.primitive.ComputableSingleChild"]], "computabletuple (class in inquanto.computables.primitive)": [[8, "inquanto.computables.primitive.ComputableTuple"]], "evaluatable (class in inquanto.computables.primitive)": [[8, "inquanto.computables.primitive.Evaluatable"]], "expectationvalue (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.ExpectationValue"]], "expectationvaluebraderivative (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative"]], "expectationvaluebraderivativeimag (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag"]], "expectationvaluebraderivativereal (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal"]], "expectationvaluederivative (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative"]], "expectationvalueketderivative (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative"]], "expectationvalueketderivativeimag (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag"]], "expectationvalueketderivativereal (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal"]], "expectationvaluenonhermitian (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian"]], "expectationvaluesumcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.ExpectationValueSumComputable"]], "farray (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.FARRAY"]], "fnc (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.FNC"]], "forc (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.FORC"]], "f_contiguous (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.F_CONTIGUOUS"]], "holegfcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.HoleGFComputable"]], "krylovsubspace (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.KrylovSubspace"]], "krylovsubspacecomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.KrylovSubspaceComputable"]], "lanczoscoefficientscomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.LanczosCoefficientsComputable"]], "lanczosmatrixcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.LanczosMatrixComputable"]], "manybodygfcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.ManyBodyGFComputable"]], "metrictensorimag (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.MetricTensorImag"]], "metrictensorreal (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.MetricTensorReal"]], "nonorthogonalmatricescomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.NonOrthogonalMatricesComputable"]], "owndata (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.OWNDATA"]], "overlap (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.Overlap"]], "overlapimag (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.OverlapImag"]], "overlapmatrixcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.OverlapMatrixComputable"]], "overlapreal (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.OverlapReal"]], "overlapsquared (class in inquanto.computables.atomic)": [[8, "inquanto.computables.atomic.OverlapSquared"]], "pdm1234realcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.PDM1234RealComputable"]], "particlegfcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.ParticleGFComputable"]], "qcm4computable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.QCM4Computable"]], "qsematricescomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.QSEMatricesComputable"]], "rdm1234realcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.RDM1234RealComputable"]], "restrictedonebodyrdmcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMComputable"]], "restrictedonebodyrdmrealcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMRealComputable"]], "sceommatrixcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable"]], "spinlessnbodypdmarrayrealcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.SpinlessNBodyPDMArrayRealComputable"]], "spinlessnbodyrdmarrayrealcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.SpinlessNBodyRDMArrayRealComputable"]], "t (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.T"]], "unrestrictedonebodyrdmcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMComputable"]], "unrestrictedonebodyrdmrealcomputable (class in inquanto.computables.composite)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMRealComputable"]], "writeable (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.WRITEABLE"]], "writebackifcopy (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.WRITEBACKIFCOPY"]], "__init__() (qcm4computable method)": [[8, "inquanto.computables.composite.QCM4Computable.__init__"]], "add_label() (commutatorcomputable method)": [[8, "inquanto.computables.composite.CommutatorComputable.add_label"]], "add_label() (computablefunction method)": [[8, "inquanto.computables.primitive.ComputableFunction.add_label"]], "add_label() (computableint method)": [[8, "inquanto.computables.primitive.ComputableInt.add_label"]], "add_label() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.add_label"]], "add_label() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.add_label"]], "add_label() (computablenode method)": [[8, "inquanto.computables.primitive.ComputableNode.add_label"]], "add_label() (computablesinglechild method)": [[8, "inquanto.computables.primitive.ComputableSingleChild.add_label"]], "add_label() (expectationvalue method)": [[8, "inquanto.computables.atomic.ExpectationValue.add_label"]], "add_label() (expectationvaluebraderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative.add_label"]], "add_label() (expectationvaluebraderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag.add_label"]], "add_label() (expectationvaluebraderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal.add_label"]], "add_label() (expectationvaluederivative method)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative.add_label"]], "add_label() (expectationvalueketderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative.add_label"]], "add_label() (expectationvalueketderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag.add_label"]], "add_label() (expectationvalueketderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal.add_label"]], "add_label() (expectationvaluenonhermitian method)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.add_label"]], "add_label() (expectationvaluesumcomputable method)": [[8, "inquanto.computables.composite.ExpectationValueSumComputable.add_label"]], "add_label() (holegfcomputable method)": [[8, "inquanto.computables.composite.HoleGFComputable.add_label"]], "add_label() (krylovsubspacecomputable method)": [[8, "inquanto.computables.composite.KrylovSubspaceComputable.add_label"]], "add_label() (lanczoscoefficientscomputable method)": [[8, "inquanto.computables.composite.LanczosCoefficientsComputable.add_label"]], "add_label() (lanczosmatrixcomputable method)": [[8, "inquanto.computables.composite.LanczosMatrixComputable.add_label"]], "add_label() (manybodygfcomputable method)": [[8, "inquanto.computables.composite.ManyBodyGFComputable.add_label"]], "add_label() (metrictensorimag method)": [[8, "inquanto.computables.atomic.MetricTensorImag.add_label"]], "add_label() (metrictensorreal method)": [[8, "inquanto.computables.atomic.MetricTensorReal.add_label"]], "add_label() (nonorthogonalmatricescomputable method)": [[8, "inquanto.computables.composite.NonOrthogonalMatricesComputable.add_label"]], "add_label() (overlap method)": [[8, "inquanto.computables.atomic.Overlap.add_label"]], "add_label() (overlapimag method)": [[8, "inquanto.computables.atomic.OverlapImag.add_label"]], "add_label() (overlapmatrixcomputable method)": [[8, "inquanto.computables.composite.OverlapMatrixComputable.add_label"]], "add_label() (overlapreal method)": [[8, "inquanto.computables.atomic.OverlapReal.add_label"]], "add_label() (overlapsquared method)": [[8, "inquanto.computables.atomic.OverlapSquared.add_label"]], "add_label() (pdm1234realcomputable method)": [[8, "inquanto.computables.composite.PDM1234RealComputable.add_label"]], "add_label() (particlegfcomputable method)": [[8, "inquanto.computables.composite.ParticleGFComputable.add_label"]], "add_label() (qcm4computable method)": [[8, "inquanto.computables.composite.QCM4Computable.add_label"]], "add_label() (qsematricescomputable method)": [[8, "inquanto.computables.composite.QSEMatricesComputable.add_label"]], "add_label() (rdm1234realcomputable method)": [[8, "inquanto.computables.composite.RDM1234RealComputable.add_label"]], "add_label() (restrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMComputable.add_label"]], "add_label() (restrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMRealComputable.add_label"]], "add_label() (sceommatrixcomputable method)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.add_label"]], "add_label() (spinlessnbodypdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyPDMArrayRealComputable.add_label"]], "add_label() (spinlessnbodyrdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyRDMArrayRealComputable.add_label"]], "add_label() (unrestrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMComputable.add_label"]], "add_label() (unrestrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMRealComputable.add_label"]], "all() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.all"]], "alpha_f() (krylovsubspace method)": [[8, "inquanto.computables.composite.KrylovSubspace.alpha_f"]], "any() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.any"]], "append() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.append"]], "argmax() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.argmax"]], "argmin() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.argmin"]], "argpartition() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.argpartition"]], "args (computablefunction attribute)": [[8, "inquanto.computables.primitive.ComputableFunction.args"]], "argsort() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.argsort"]], "astype() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.astype"]], "base (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.base"]], "beta_f() (krylovsubspace method)": [[8, "inquanto.computables.composite.KrylovSubspace.beta_f"]], "bra_state (overlap attribute)": [[8, "inquanto.computables.atomic.Overlap.bra_state"]], "bra_state (overlapimag attribute)": [[8, "inquanto.computables.atomic.OverlapImag.bra_state"]], "bra_state (overlapreal attribute)": [[8, "inquanto.computables.atomic.OverlapReal.bra_state"]], "bra_state (overlapsquared attribute)": [[8, "inquanto.computables.atomic.OverlapSquared.bra_state"]], "byteswap() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.byteswap"]], "check_energies() (sceommatrixcomputable method)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.check_energies"]], "children() (commutatorcomputable method)": [[8, "inquanto.computables.composite.CommutatorComputable.children"]], "children() (computablefunction method)": [[8, "inquanto.computables.primitive.ComputableFunction.children"]], "children() (computableint method)": [[8, "inquanto.computables.primitive.ComputableInt.children"]], "children() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.children"]], "children() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.children"]], "children() (computablenode method)": [[8, "inquanto.computables.primitive.ComputableNode.children"]], "children() (computablesinglechild method)": [[8, "inquanto.computables.primitive.ComputableSingleChild.children"]], "children() (computabletuple method)": [[8, "inquanto.computables.primitive.ComputableTuple.children"]], "children() (expectationvalue method)": [[8, "inquanto.computables.atomic.ExpectationValue.children"]], "children() (expectationvaluebraderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative.children"]], "children() (expectationvaluebraderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag.children"]], "children() (expectationvaluebraderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal.children"]], "children() (expectationvaluederivative method)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative.children"]], "children() (expectationvalueketderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative.children"]], "children() (expectationvalueketderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag.children"]], "children() (expectationvalueketderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal.children"]], "children() (expectationvaluenonhermitian method)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.children"]], "children() (expectationvaluesumcomputable method)": [[8, "inquanto.computables.composite.ExpectationValueSumComputable.children"]], "children() (holegfcomputable method)": [[8, "inquanto.computables.composite.HoleGFComputable.children"]], "children() (krylovsubspacecomputable method)": [[8, "inquanto.computables.composite.KrylovSubspaceComputable.children"]], "children() (lanczoscoefficientscomputable method)": [[8, "inquanto.computables.composite.LanczosCoefficientsComputable.children"]], "children() (lanczosmatrixcomputable method)": [[8, "inquanto.computables.composite.LanczosMatrixComputable.children"]], "children() (manybodygfcomputable method)": [[8, "inquanto.computables.composite.ManyBodyGFComputable.children"]], "children() (metrictensorimag method)": [[8, "inquanto.computables.atomic.MetricTensorImag.children"]], "children() (metrictensorreal method)": [[8, "inquanto.computables.atomic.MetricTensorReal.children"]], "children() (nonorthogonalmatricescomputable method)": [[8, "inquanto.computables.composite.NonOrthogonalMatricesComputable.children"]], "children() (overlap method)": [[8, "inquanto.computables.atomic.Overlap.children"]], "children() (overlapimag method)": [[8, "inquanto.computables.atomic.OverlapImag.children"]], "children() (overlapmatrixcomputable method)": [[8, "inquanto.computables.composite.OverlapMatrixComputable.children"]], "children() (overlapreal method)": [[8, "inquanto.computables.atomic.OverlapReal.children"]], "children() (overlapsquared method)": [[8, "inquanto.computables.atomic.OverlapSquared.children"]], "children() (pdm1234realcomputable method)": [[8, "inquanto.computables.composite.PDM1234RealComputable.children"]], "children() (particlegfcomputable method)": [[8, "inquanto.computables.composite.ParticleGFComputable.children"]], "children() (qcm4computable method)": [[8, "inquanto.computables.composite.QCM4Computable.children"]], "children() (qsematricescomputable method)": [[8, "inquanto.computables.composite.QSEMatricesComputable.children"]], "children() (rdm1234realcomputable method)": [[8, "inquanto.computables.composite.RDM1234RealComputable.children"]], "children() (restrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMComputable.children"]], "children() (restrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMRealComputable.children"]], "children() (sceommatrixcomputable method)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.children"]], "children() (spinlessnbodypdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyPDMArrayRealComputable.children"]], "children() (spinlessnbodyrdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyRDMArrayRealComputable.children"]], "children() (unrestrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMComputable.children"]], "children() (unrestrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMRealComputable.children"]], "choose() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.choose"]], "clear() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.clear"]], "clip() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.clip"]], "compress() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.compress"]], "conj() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.conj"]], "conjugate() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.conjugate"]], "construct_symbolic_recursive_gf() (krylovsubspace method)": [[8, "inquanto.computables.composite.KrylovSubspace.construct_symbolic_recursive_gf"]], "construct_symbolic_recursive_gf_h() (krylovsubspace method)": [[8, "inquanto.computables.composite.KrylovSubspace.construct_symbolic_recursive_gf_h"]], "construct_symbolic_recursive_gf_p() (krylovsubspace method)": [[8, "inquanto.computables.composite.KrylovSubspace.construct_symbolic_recursive_gf_p"]], "construct_symbolic_recursive_lanczos_gf00() (krylovsubspace method)": [[8, "inquanto.computables.composite.KrylovSubspace.construct_symbolic_recursive_lanczos_gf00"]], "construct_tridiagonal_representation() (krylovsubspace method)": [[8, "inquanto.computables.composite.KrylovSubspace.construct_tridiagonal_representation"]], "copy() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.copy"]], "copy() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.copy"]], "count() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.count"]], "ctypes (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.ctypes"]], "cumprod() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.cumprod"]], "cumsum() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.cumsum"]], "data (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.data"]], "default_evaluate() (averageable method)": [[8, "inquanto.computables.primitive.Averageable.default_evaluate"]], "default_evaluate() (commutatorcomputable method)": [[8, "inquanto.computables.composite.CommutatorComputable.default_evaluate"]], "default_evaluate() (computablefunction method)": [[8, "inquanto.computables.primitive.ComputableFunction.default_evaluate"]], "default_evaluate() (computableint method)": [[8, "inquanto.computables.primitive.ComputableInt.default_evaluate"]], "default_evaluate() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.default_evaluate"]], "default_evaluate() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.default_evaluate"]], "default_evaluate() (computablenode method)": [[8, "inquanto.computables.primitive.ComputableNode.default_evaluate"]], "default_evaluate() (computablesinglechild method)": [[8, "inquanto.computables.primitive.ComputableSingleChild.default_evaluate"]], "default_evaluate() (evaluatable method)": [[8, "inquanto.computables.primitive.Evaluatable.default_evaluate"]], "default_evaluate() (expectationvalue method)": [[8, "inquanto.computables.atomic.ExpectationValue.default_evaluate"]], "default_evaluate() (expectationvaluebraderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative.default_evaluate"]], "default_evaluate() (expectationvaluebraderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag.default_evaluate"]], "default_evaluate() (expectationvaluebraderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal.default_evaluate"]], "default_evaluate() (expectationvaluederivative method)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative.default_evaluate"]], "default_evaluate() (expectationvalueketderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative.default_evaluate"]], "default_evaluate() (expectationvalueketderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag.default_evaluate"]], "default_evaluate() (expectationvalueketderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal.default_evaluate"]], "default_evaluate() (expectationvaluenonhermitian method)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.default_evaluate"]], "default_evaluate() (expectationvaluesumcomputable method)": [[8, "inquanto.computables.composite.ExpectationValueSumComputable.default_evaluate"]], "default_evaluate() (holegfcomputable method)": [[8, "inquanto.computables.composite.HoleGFComputable.default_evaluate"]], "default_evaluate() (krylovsubspacecomputable method)": [[8, "inquanto.computables.composite.KrylovSubspaceComputable.default_evaluate"]], "default_evaluate() (lanczoscoefficientscomputable method)": [[8, "inquanto.computables.composite.LanczosCoefficientsComputable.default_evaluate"]], "default_evaluate() (lanczosmatrixcomputable method)": [[8, "inquanto.computables.composite.LanczosMatrixComputable.default_evaluate"]], "default_evaluate() (manybodygfcomputable method)": [[8, "inquanto.computables.composite.ManyBodyGFComputable.default_evaluate"]], "default_evaluate() (metrictensorimag method)": [[8, "inquanto.computables.atomic.MetricTensorImag.default_evaluate"]], "default_evaluate() (metrictensorreal method)": [[8, "inquanto.computables.atomic.MetricTensorReal.default_evaluate"]], "default_evaluate() (nonorthogonalmatricescomputable method)": [[8, "inquanto.computables.composite.NonOrthogonalMatricesComputable.default_evaluate"]], "default_evaluate() (overlap method)": [[8, "inquanto.computables.atomic.Overlap.default_evaluate"]], "default_evaluate() (overlapimag method)": [[8, "inquanto.computables.atomic.OverlapImag.default_evaluate"]], "default_evaluate() (overlapmatrixcomputable method)": [[8, "inquanto.computables.composite.OverlapMatrixComputable.default_evaluate"]], "default_evaluate() (overlapreal method)": [[8, "inquanto.computables.atomic.OverlapReal.default_evaluate"]], "default_evaluate() (overlapsquared method)": [[8, "inquanto.computables.atomic.OverlapSquared.default_evaluate"]], "default_evaluate() (pdm1234realcomputable method)": [[8, "inquanto.computables.composite.PDM1234RealComputable.default_evaluate"]], "default_evaluate() (particlegfcomputable method)": [[8, "inquanto.computables.composite.ParticleGFComputable.default_evaluate"]], "default_evaluate() (qcm4computable method)": [[8, "inquanto.computables.composite.QCM4Computable.default_evaluate"]], "default_evaluate() (qsematricescomputable method)": [[8, "inquanto.computables.composite.QSEMatricesComputable.default_evaluate"]], "default_evaluate() (rdm1234realcomputable method)": [[8, "inquanto.computables.composite.RDM1234RealComputable.default_evaluate"]], "default_evaluate() (restrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMComputable.default_evaluate"]], "default_evaluate() (restrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMRealComputable.default_evaluate"]], "default_evaluate() (sceommatrixcomputable method)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.default_evaluate"]], "default_evaluate() (spinlessnbodypdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyPDMArrayRealComputable.default_evaluate"]], "default_evaluate() (spinlessnbodyrdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyRDMArrayRealComputable.default_evaluate"]], "default_evaluate() (unrestrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMComputable.default_evaluate"]], "default_evaluate() (unrestrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMRealComputable.default_evaluate"]], "default_evaluate_as_function() (manybodygfcomputable method)": [[8, "inquanto.computables.composite.ManyBodyGFComputable.default_evaluate_as_function"]], "device (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.device"]], "diagonal() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.diagonal"]], "dot() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.dot"]], "dtype (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.dtype"]], "dump() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.dump"]], "dumps() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.dumps"]], "eigenvalues() (krylovsubspace method)": [[8, "inquanto.computables.composite.KrylovSubspace.eigenvalues"]], "evaluate() (averageable method)": [[8, "inquanto.computables.primitive.Averageable.evaluate"]], "evaluate() (commutatorcomputable method)": [[8, "inquanto.computables.composite.CommutatorComputable.evaluate"]], "evaluate() (computablefunction method)": [[8, "inquanto.computables.primitive.ComputableFunction.evaluate"]], "evaluate() (computableint method)": [[8, "inquanto.computables.primitive.ComputableInt.evaluate"]], "evaluate() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.evaluate"]], "evaluate() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.evaluate"]], "evaluate() (computablenode method)": [[8, "inquanto.computables.primitive.ComputableNode.evaluate"]], "evaluate() (computablesinglechild method)": [[8, "inquanto.computables.primitive.ComputableSingleChild.evaluate"]], "evaluate() (computabletuple method)": [[8, "inquanto.computables.primitive.ComputableTuple.evaluate"]], "evaluate() (evaluatable method)": [[8, "inquanto.computables.primitive.Evaluatable.evaluate"]], "evaluate() (expectationvalue method)": [[8, "inquanto.computables.atomic.ExpectationValue.evaluate"]], "evaluate() (expectationvaluebraderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative.evaluate"]], "evaluate() (expectationvaluebraderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag.evaluate"]], "evaluate() (expectationvaluebraderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal.evaluate"]], "evaluate() (expectationvaluederivative method)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative.evaluate"]], "evaluate() (expectationvalueketderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative.evaluate"]], "evaluate() (expectationvalueketderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag.evaluate"]], "evaluate() (expectationvalueketderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal.evaluate"]], "evaluate() (expectationvaluenonhermitian method)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.evaluate"]], "evaluate() (expectationvaluesumcomputable method)": [[8, "inquanto.computables.composite.ExpectationValueSumComputable.evaluate"]], "evaluate() (holegfcomputable method)": [[8, "inquanto.computables.composite.HoleGFComputable.evaluate"]], "evaluate() (krylovsubspacecomputable method)": [[8, "inquanto.computables.composite.KrylovSubspaceComputable.evaluate"]], "evaluate() (lanczoscoefficientscomputable method)": [[8, "inquanto.computables.composite.LanczosCoefficientsComputable.evaluate"]], "evaluate() (lanczosmatrixcomputable method)": [[8, "inquanto.computables.composite.LanczosMatrixComputable.evaluate"]], "evaluate() (manybodygfcomputable method)": [[8, "inquanto.computables.composite.ManyBodyGFComputable.evaluate"]], "evaluate() (metrictensorimag method)": [[8, "inquanto.computables.atomic.MetricTensorImag.evaluate"]], "evaluate() (metrictensorreal method)": [[8, "inquanto.computables.atomic.MetricTensorReal.evaluate"]], "evaluate() (nonorthogonalmatricescomputable method)": [[8, "inquanto.computables.composite.NonOrthogonalMatricesComputable.evaluate"]], "evaluate() (overlap method)": [[8, "inquanto.computables.atomic.Overlap.evaluate"]], "evaluate() (overlapimag method)": [[8, "inquanto.computables.atomic.OverlapImag.evaluate"]], "evaluate() (overlapmatrixcomputable method)": [[8, "inquanto.computables.composite.OverlapMatrixComputable.evaluate"]], "evaluate() (overlapreal method)": [[8, "inquanto.computables.atomic.OverlapReal.evaluate"]], "evaluate() (overlapsquared method)": [[8, "inquanto.computables.atomic.OverlapSquared.evaluate"]], "evaluate() (pdm1234realcomputable method)": [[8, "inquanto.computables.composite.PDM1234RealComputable.evaluate"]], "evaluate() (particlegfcomputable method)": [[8, "inquanto.computables.composite.ParticleGFComputable.evaluate"]], "evaluate() (qcm4computable method)": [[8, "inquanto.computables.composite.QCM4Computable.evaluate"]], "evaluate() (qsematricescomputable method)": [[8, "inquanto.computables.composite.QSEMatricesComputable.evaluate"]], "evaluate() (rdm1234realcomputable method)": [[8, "inquanto.computables.composite.RDM1234RealComputable.evaluate"]], "evaluate() (restrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMComputable.evaluate"]], "evaluate() (restrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMRealComputable.evaluate"]], "evaluate() (sceommatrixcomputable method)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.evaluate"]], "evaluate() (spinlessnbodypdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyPDMArrayRealComputable.evaluate"]], "evaluate() (spinlessnbodyrdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyRDMArrayRealComputable.evaluate"]], "evaluate() (unrestrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMComputable.evaluate"]], "evaluate() (unrestrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMRealComputable.evaluate"]], "evaluate_as_function() (manybodygfcomputable method)": [[8, "inquanto.computables.composite.ManyBodyGFComputable.evaluate_as_function"]], "evaluate_list() (averageable method)": [[8, "inquanto.computables.primitive.Averageable.evaluate_list"]], "evaluate_list() (commutatorcomputable method)": [[8, "inquanto.computables.composite.CommutatorComputable.evaluate_list"]], "evaluate_list() (computablefunction method)": [[8, "inquanto.computables.primitive.ComputableFunction.evaluate_list"]], "evaluate_list() (computableint method)": [[8, "inquanto.computables.primitive.ComputableInt.evaluate_list"]], "evaluate_list() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.evaluate_list"]], "evaluate_list() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.evaluate_list"]], "evaluate_list() (computablenode method)": [[8, "inquanto.computables.primitive.ComputableNode.evaluate_list"]], "evaluate_list() (computablesinglechild method)": [[8, "inquanto.computables.primitive.ComputableSingleChild.evaluate_list"]], "evaluate_list() (evaluatable method)": [[8, "inquanto.computables.primitive.Evaluatable.evaluate_list"]], "evaluate_list() (expectationvalue method)": [[8, "inquanto.computables.atomic.ExpectationValue.evaluate_list"]], "evaluate_list() (expectationvaluebraderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative.evaluate_list"]], "evaluate_list() (expectationvaluebraderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag.evaluate_list"]], "evaluate_list() (expectationvaluebraderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal.evaluate_list"]], "evaluate_list() (expectationvaluederivative method)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative.evaluate_list"]], "evaluate_list() (expectationvalueketderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative.evaluate_list"]], "evaluate_list() (expectationvalueketderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag.evaluate_list"]], "evaluate_list() (expectationvalueketderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal.evaluate_list"]], "evaluate_list() (expectationvaluenonhermitian method)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.evaluate_list"]], "evaluate_list() (expectationvaluesumcomputable method)": [[8, "inquanto.computables.composite.ExpectationValueSumComputable.evaluate_list"]], "evaluate_list() (holegfcomputable method)": [[8, "inquanto.computables.composite.HoleGFComputable.evaluate_list"]], "evaluate_list() (krylovsubspacecomputable method)": [[8, "inquanto.computables.composite.KrylovSubspaceComputable.evaluate_list"]], "evaluate_list() (lanczoscoefficientscomputable method)": [[8, "inquanto.computables.composite.LanczosCoefficientsComputable.evaluate_list"]], "evaluate_list() (lanczosmatrixcomputable method)": [[8, "inquanto.computables.composite.LanczosMatrixComputable.evaluate_list"]], "evaluate_list() (manybodygfcomputable method)": [[8, "inquanto.computables.composite.ManyBodyGFComputable.evaluate_list"]], "evaluate_list() (metrictensorimag method)": [[8, "inquanto.computables.atomic.MetricTensorImag.evaluate_list"]], "evaluate_list() (metrictensorreal method)": [[8, "inquanto.computables.atomic.MetricTensorReal.evaluate_list"]], "evaluate_list() (nonorthogonalmatricescomputable method)": [[8, "inquanto.computables.composite.NonOrthogonalMatricesComputable.evaluate_list"]], "evaluate_list() (overlap method)": [[8, "inquanto.computables.atomic.Overlap.evaluate_list"]], "evaluate_list() (overlapimag method)": [[8, "inquanto.computables.atomic.OverlapImag.evaluate_list"]], "evaluate_list() (overlapmatrixcomputable method)": [[8, "inquanto.computables.composite.OverlapMatrixComputable.evaluate_list"]], "evaluate_list() (overlapreal method)": [[8, "inquanto.computables.atomic.OverlapReal.evaluate_list"]], "evaluate_list() (overlapsquared method)": [[8, "inquanto.computables.atomic.OverlapSquared.evaluate_list"]], "evaluate_list() (pdm1234realcomputable method)": [[8, "inquanto.computables.composite.PDM1234RealComputable.evaluate_list"]], "evaluate_list() (particlegfcomputable method)": [[8, "inquanto.computables.composite.ParticleGFComputable.evaluate_list"]], "evaluate_list() (qcm4computable method)": [[8, "inquanto.computables.composite.QCM4Computable.evaluate_list"]], "evaluate_list() (qsematricescomputable method)": [[8, "inquanto.computables.composite.QSEMatricesComputable.evaluate_list"]], "evaluate_list() (rdm1234realcomputable method)": [[8, "inquanto.computables.composite.RDM1234RealComputable.evaluate_list"]], "evaluate_list() (restrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMComputable.evaluate_list"]], "evaluate_list() (restrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMRealComputable.evaluate_list"]], "evaluate_list() (sceommatrixcomputable method)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.evaluate_list"]], "evaluate_list() (spinlessnbodypdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyPDMArrayRealComputable.evaluate_list"]], "evaluate_list() (spinlessnbodyrdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyRDMArrayRealComputable.evaluate_list"]], "evaluate_list() (unrestrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMComputable.evaluate_list"]], "evaluate_list() (unrestrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMRealComputable.evaluate_list"]], "evaluate_mean() (averageable method)": [[8, "inquanto.computables.primitive.Averageable.evaluate_mean"]], "evaluate_mean() (expectationvalue method)": [[8, "inquanto.computables.atomic.ExpectationValue.evaluate_mean"]], "evaluate_mean() (expectationvaluenonhermitian method)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.evaluate_mean"]], "evaluate_median() (averageable method)": [[8, "inquanto.computables.primitive.Averageable.evaluate_median"]], "evaluate_median() (expectationvalue method)": [[8, "inquanto.computables.atomic.ExpectationValue.evaluate_median"]], "evaluate_median() (expectationvaluenonhermitian method)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.evaluate_median"]], "evaluate_std() (averageable method)": [[8, "inquanto.computables.primitive.Averageable.evaluate_std"]], "evaluate_std() (expectationvalue method)": [[8, "inquanto.computables.atomic.ExpectationValue.evaluate_std"]], "evaluate_std() (expectationvaluenonhermitian method)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.evaluate_std"]], "evaluate_var() (averageable method)": [[8, "inquanto.computables.primitive.Averageable.evaluate_var"]], "evaluate_var() (expectationvalue method)": [[8, "inquanto.computables.atomic.ExpectationValue.evaluate_var"]], "evaluate_var() (expectationvaluenonhermitian method)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.evaluate_var"]], "extend() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.extend"]], "factors() (krylovsubspace method)": [[8, "inquanto.computables.composite.KrylovSubspace.factors"]], "fill() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.fill"]], "flags (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.flags"]], "flat (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.flat"]], "flatten() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.flatten"]], "free_symbols() (commutatorcomputable method)": [[8, "inquanto.computables.composite.CommutatorComputable.free_symbols"]], "free_symbols() (computablefunction method)": [[8, "inquanto.computables.primitive.ComputableFunction.free_symbols"]], "free_symbols() (computableint method)": [[8, "inquanto.computables.primitive.ComputableInt.free_symbols"]], "free_symbols() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.free_symbols"]], "free_symbols() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.free_symbols"]], "free_symbols() (computablenode method)": [[8, "inquanto.computables.primitive.ComputableNode.free_symbols"]], "free_symbols() (computablesinglechild method)": [[8, "inquanto.computables.primitive.ComputableSingleChild.free_symbols"]], "free_symbols() (expectationvalue method)": [[8, "inquanto.computables.atomic.ExpectationValue.free_symbols"]], "free_symbols() (expectationvaluebraderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative.free_symbols"]], "free_symbols() (expectationvaluebraderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag.free_symbols"]], "free_symbols() (expectationvaluebraderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal.free_symbols"]], "free_symbols() (expectationvaluederivative method)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative.free_symbols"]], "free_symbols() (expectationvalueketderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative.free_symbols"]], "free_symbols() (expectationvalueketderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag.free_symbols"]], "free_symbols() (expectationvalueketderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal.free_symbols"]], "free_symbols() (expectationvaluenonhermitian method)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.free_symbols"]], "free_symbols() (expectationvaluesumcomputable method)": [[8, "inquanto.computables.composite.ExpectationValueSumComputable.free_symbols"]], "free_symbols() (holegfcomputable method)": [[8, "inquanto.computables.composite.HoleGFComputable.free_symbols"]], "free_symbols() (krylovsubspacecomputable method)": [[8, "inquanto.computables.composite.KrylovSubspaceComputable.free_symbols"]], "free_symbols() (lanczoscoefficientscomputable method)": [[8, "inquanto.computables.composite.LanczosCoefficientsComputable.free_symbols"]], "free_symbols() (lanczosmatrixcomputable method)": [[8, "inquanto.computables.composite.LanczosMatrixComputable.free_symbols"]], "free_symbols() (manybodygfcomputable method)": [[8, "inquanto.computables.composite.ManyBodyGFComputable.free_symbols"]], "free_symbols() (metrictensorimag method)": [[8, "inquanto.computables.atomic.MetricTensorImag.free_symbols"]], "free_symbols() (metrictensorreal method)": [[8, "inquanto.computables.atomic.MetricTensorReal.free_symbols"]], "free_symbols() (nonorthogonalmatricescomputable method)": [[8, "inquanto.computables.composite.NonOrthogonalMatricesComputable.free_symbols"]], "free_symbols() (overlap method)": [[8, "inquanto.computables.atomic.Overlap.free_symbols"]], "free_symbols() (overlapimag method)": [[8, "inquanto.computables.atomic.OverlapImag.free_symbols"]], "free_symbols() (overlapmatrixcomputable method)": [[8, "inquanto.computables.composite.OverlapMatrixComputable.free_symbols"]], "free_symbols() (overlapreal method)": [[8, "inquanto.computables.atomic.OverlapReal.free_symbols"]], "free_symbols() (overlapsquared method)": [[8, "inquanto.computables.atomic.OverlapSquared.free_symbols"]], "free_symbols() (pdm1234realcomputable method)": [[8, "inquanto.computables.composite.PDM1234RealComputable.free_symbols"]], "free_symbols() (particlegfcomputable method)": [[8, "inquanto.computables.composite.ParticleGFComputable.free_symbols"]], "free_symbols() (qcm4computable method)": [[8, "inquanto.computables.composite.QCM4Computable.free_symbols"]], "free_symbols() (qsematricescomputable method)": [[8, "inquanto.computables.composite.QSEMatricesComputable.free_symbols"]], "free_symbols() (rdm1234realcomputable method)": [[8, "inquanto.computables.composite.RDM1234RealComputable.free_symbols"]], "free_symbols() (restrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMComputable.free_symbols"]], "free_symbols() (restrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMRealComputable.free_symbols"]], "free_symbols() (sceommatrixcomputable method)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.free_symbols"]], "free_symbols() (spinlessnbodypdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyPDMArrayRealComputable.free_symbols"]], "free_symbols() (spinlessnbodyrdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyRDMArrayRealComputable.free_symbols"]], "free_symbols() (unrestrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMComputable.free_symbols"]], "free_symbols() (unrestrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMRealComputable.free_symbols"]], "free_symbols_ordered() (commutatorcomputable method)": [[8, "inquanto.computables.composite.CommutatorComputable.free_symbols_ordered"]], "free_symbols_ordered() (computablefunction method)": [[8, "inquanto.computables.primitive.ComputableFunction.free_symbols_ordered"]], "free_symbols_ordered() (computableint method)": [[8, "inquanto.computables.primitive.ComputableInt.free_symbols_ordered"]], "free_symbols_ordered() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.free_symbols_ordered"]], "free_symbols_ordered() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.free_symbols_ordered"]], "free_symbols_ordered() (computablenode method)": [[8, "inquanto.computables.primitive.ComputableNode.free_symbols_ordered"]], "free_symbols_ordered() (computablesinglechild method)": [[8, "inquanto.computables.primitive.ComputableSingleChild.free_symbols_ordered"]], "free_symbols_ordered() (expectationvalue method)": [[8, "inquanto.computables.atomic.ExpectationValue.free_symbols_ordered"]], "free_symbols_ordered() (expectationvaluebraderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative.free_symbols_ordered"]], "free_symbols_ordered() (expectationvaluebraderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag.free_symbols_ordered"]], "free_symbols_ordered() (expectationvaluebraderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal.free_symbols_ordered"]], "free_symbols_ordered() (expectationvaluederivative method)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative.free_symbols_ordered"]], "free_symbols_ordered() (expectationvalueketderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative.free_symbols_ordered"]], "free_symbols_ordered() (expectationvalueketderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag.free_symbols_ordered"]], "free_symbols_ordered() (expectationvalueketderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal.free_symbols_ordered"]], "free_symbols_ordered() (expectationvaluenonhermitian method)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.free_symbols_ordered"]], "free_symbols_ordered() (expectationvaluesumcomputable method)": [[8, "inquanto.computables.composite.ExpectationValueSumComputable.free_symbols_ordered"]], "free_symbols_ordered() (holegfcomputable method)": [[8, "inquanto.computables.composite.HoleGFComputable.free_symbols_ordered"]], "free_symbols_ordered() (krylovsubspacecomputable method)": [[8, "inquanto.computables.composite.KrylovSubspaceComputable.free_symbols_ordered"]], "free_symbols_ordered() (lanczoscoefficientscomputable method)": [[8, "inquanto.computables.composite.LanczosCoefficientsComputable.free_symbols_ordered"]], "free_symbols_ordered() (lanczosmatrixcomputable method)": [[8, "inquanto.computables.composite.LanczosMatrixComputable.free_symbols_ordered"]], "free_symbols_ordered() (manybodygfcomputable method)": [[8, "inquanto.computables.composite.ManyBodyGFComputable.free_symbols_ordered"]], "free_symbols_ordered() (metrictensorimag method)": [[8, "inquanto.computables.atomic.MetricTensorImag.free_symbols_ordered"]], "free_symbols_ordered() (metrictensorreal method)": [[8, "inquanto.computables.atomic.MetricTensorReal.free_symbols_ordered"]], "free_symbols_ordered() (nonorthogonalmatricescomputable method)": [[8, "inquanto.computables.composite.NonOrthogonalMatricesComputable.free_symbols_ordered"]], "free_symbols_ordered() (overlap method)": [[8, "inquanto.computables.atomic.Overlap.free_symbols_ordered"]], "free_symbols_ordered() (overlapimag method)": [[8, "inquanto.computables.atomic.OverlapImag.free_symbols_ordered"]], "free_symbols_ordered() (overlapmatrixcomputable method)": [[8, "inquanto.computables.composite.OverlapMatrixComputable.free_symbols_ordered"]], "free_symbols_ordered() (overlapreal method)": [[8, "inquanto.computables.atomic.OverlapReal.free_symbols_ordered"]], "free_symbols_ordered() (overlapsquared method)": [[8, "inquanto.computables.atomic.OverlapSquared.free_symbols_ordered"]], "free_symbols_ordered() (pdm1234realcomputable method)": [[8, "inquanto.computables.composite.PDM1234RealComputable.free_symbols_ordered"]], "free_symbols_ordered() (particlegfcomputable method)": [[8, "inquanto.computables.composite.ParticleGFComputable.free_symbols_ordered"]], "free_symbols_ordered() (qcm4computable method)": [[8, "inquanto.computables.composite.QCM4Computable.free_symbols_ordered"]], "free_symbols_ordered() (qsematricescomputable method)": [[8, "inquanto.computables.composite.QSEMatricesComputable.free_symbols_ordered"]], "free_symbols_ordered() (rdm1234realcomputable method)": [[8, "inquanto.computables.composite.RDM1234RealComputable.free_symbols_ordered"]], "free_symbols_ordered() (restrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMComputable.free_symbols_ordered"]], "free_symbols_ordered() (restrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMRealComputable.free_symbols_ordered"]], "free_symbols_ordered() (sceommatrixcomputable method)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.free_symbols_ordered"]], "free_symbols_ordered() (spinlessnbodypdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyPDMArrayRealComputable.free_symbols_ordered"]], "free_symbols_ordered() (spinlessnbodyrdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyRDMArrayRealComputable.free_symbols_ordered"]], "free_symbols_ordered() (unrestrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMComputable.free_symbols_ordered"]], "free_symbols_ordered() (unrestrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMRealComputable.free_symbols_ordered"]], "func (computablefunction attribute)": [[8, "inquanto.computables.primitive.ComputableFunction.func"]], "get_overlap_computables() (sceommatrixcomputable method)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.get_overlap_computables"]], "get_s2_computables() (sceommatrixcomputable method)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.get_s2_computables"]], "get_sz_computables() (sceommatrixcomputable method)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.get_sz_computables"]], "getfield() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.getfield"]], "imag (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.imag"]], "index() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.index"]], "inquanto.computables.atomic": [[8, "module-inquanto.computables.atomic"]], "inquanto.computables.composite": [[8, "module-inquanto.computables.composite"]], "inquanto.computables.primitive": [[8, "module-inquanto.computables.primitive"]], "insert() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.insert"]], "is_leaf() (commutatorcomputable method)": [[8, "inquanto.computables.composite.CommutatorComputable.is_leaf"]], "is_leaf() (computablefunction method)": [[8, "inquanto.computables.primitive.ComputableFunction.is_leaf"]], "is_leaf() (computableint method)": [[8, "inquanto.computables.primitive.ComputableInt.is_leaf"]], "is_leaf() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.is_leaf"]], "is_leaf() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.is_leaf"]], "is_leaf() (computablenode method)": [[8, "inquanto.computables.primitive.ComputableNode.is_leaf"]], "is_leaf() (computablesinglechild method)": [[8, "inquanto.computables.primitive.ComputableSingleChild.is_leaf"]], "is_leaf() (expectationvalue method)": [[8, "inquanto.computables.atomic.ExpectationValue.is_leaf"]], "is_leaf() (expectationvaluebraderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative.is_leaf"]], "is_leaf() (expectationvaluebraderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag.is_leaf"]], "is_leaf() (expectationvaluebraderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal.is_leaf"]], "is_leaf() (expectationvaluederivative method)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative.is_leaf"]], "is_leaf() (expectationvalueketderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative.is_leaf"]], "is_leaf() (expectationvalueketderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag.is_leaf"]], "is_leaf() (expectationvalueketderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal.is_leaf"]], "is_leaf() (expectationvaluenonhermitian method)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.is_leaf"]], "is_leaf() (expectationvaluesumcomputable method)": [[8, "inquanto.computables.composite.ExpectationValueSumComputable.is_leaf"]], "is_leaf() (holegfcomputable method)": [[8, "inquanto.computables.composite.HoleGFComputable.is_leaf"]], "is_leaf() (krylovsubspacecomputable method)": [[8, "inquanto.computables.composite.KrylovSubspaceComputable.is_leaf"]], "is_leaf() (lanczoscoefficientscomputable method)": [[8, "inquanto.computables.composite.LanczosCoefficientsComputable.is_leaf"]], "is_leaf() (lanczosmatrixcomputable method)": [[8, "inquanto.computables.composite.LanczosMatrixComputable.is_leaf"]], "is_leaf() (manybodygfcomputable method)": [[8, "inquanto.computables.composite.ManyBodyGFComputable.is_leaf"]], "is_leaf() (metrictensorimag method)": [[8, "inquanto.computables.atomic.MetricTensorImag.is_leaf"]], "is_leaf() (metrictensorreal method)": [[8, "inquanto.computables.atomic.MetricTensorReal.is_leaf"]], "is_leaf() (nonorthogonalmatricescomputable method)": [[8, "inquanto.computables.composite.NonOrthogonalMatricesComputable.is_leaf"]], "is_leaf() (overlap method)": [[8, "inquanto.computables.atomic.Overlap.is_leaf"]], "is_leaf() (overlapimag method)": [[8, "inquanto.computables.atomic.OverlapImag.is_leaf"]], "is_leaf() (overlapmatrixcomputable method)": [[8, "inquanto.computables.composite.OverlapMatrixComputable.is_leaf"]], "is_leaf() (overlapreal method)": [[8, "inquanto.computables.atomic.OverlapReal.is_leaf"]], "is_leaf() (overlapsquared method)": [[8, "inquanto.computables.atomic.OverlapSquared.is_leaf"]], "is_leaf() (pdm1234realcomputable method)": [[8, "inquanto.computables.composite.PDM1234RealComputable.is_leaf"]], "is_leaf() (particlegfcomputable method)": [[8, "inquanto.computables.composite.ParticleGFComputable.is_leaf"]], "is_leaf() (qcm4computable method)": [[8, "inquanto.computables.composite.QCM4Computable.is_leaf"]], "is_leaf() (qsematricescomputable method)": [[8, "inquanto.computables.composite.QSEMatricesComputable.is_leaf"]], "is_leaf() (rdm1234realcomputable method)": [[8, "inquanto.computables.composite.RDM1234RealComputable.is_leaf"]], "is_leaf() (restrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMComputable.is_leaf"]], "is_leaf() (restrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMRealComputable.is_leaf"]], "is_leaf() (sceommatrixcomputable method)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.is_leaf"]], "is_leaf() (spinlessnbodypdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyPDMArrayRealComputable.is_leaf"]], "is_leaf() (spinlessnbodyrdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyRDMArrayRealComputable.is_leaf"]], "is_leaf() (unrestrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMComputable.is_leaf"]], "is_leaf() (unrestrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMRealComputable.is_leaf"]], "item() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.item"]], "itemset (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.itemset"]], "itemsize (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.itemsize"]], "kernel (expectationvalue attribute)": [[8, "inquanto.computables.atomic.ExpectationValue.kernel"]], "kernel (expectationvaluebraderivative attribute)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative.kernel"]], "kernel (expectationvaluebraderivativeimag attribute)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag.kernel"]], "kernel (expectationvaluebraderivativereal attribute)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal.kernel"]], "kernel (expectationvaluederivative attribute)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative.kernel"]], "kernel (expectationvalueketderivative attribute)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative.kernel"]], "kernel (expectationvalueketderivativeimag attribute)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag.kernel"]], "kernel (expectationvalueketderivativereal attribute)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal.kernel"]], "kernel (expectationvaluenonhermitian attribute)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.kernel"]], "kernel (overlap attribute)": [[8, "inquanto.computables.atomic.Overlap.kernel"]], "kernel (overlapimag attribute)": [[8, "inquanto.computables.atomic.OverlapImag.kernel"]], "kernel (overlapreal attribute)": [[8, "inquanto.computables.atomic.OverlapReal.kernel"]], "kernel (overlapsquared attribute)": [[8, "inquanto.computables.atomic.OverlapSquared.kernel"]], "ket_state (overlap attribute)": [[8, "inquanto.computables.atomic.Overlap.ket_state"]], "ket_state (overlapimag attribute)": [[8, "inquanto.computables.atomic.OverlapImag.ket_state"]], "ket_state (overlapreal attribute)": [[8, "inquanto.computables.atomic.OverlapReal.ket_state"]], "ket_state (overlapsquared attribute)": [[8, "inquanto.computables.atomic.OverlapSquared.ket_state"]], "label (commutatorcomputable attribute)": [[8, "inquanto.computables.composite.CommutatorComputable.label"]], "label (computablefunction attribute)": [[8, "inquanto.computables.primitive.ComputableFunction.label"]], "label (computableint attribute)": [[8, "inquanto.computables.primitive.ComputableInt.label"]], "label (computablelist attribute)": [[8, "inquanto.computables.primitive.ComputableList.label"]], "label (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.label"]], "label (computablenode attribute)": [[8, "inquanto.computables.primitive.ComputableNode.label"]], "label (computablesinglechild attribute)": [[8, "inquanto.computables.primitive.ComputableSingleChild.label"]], "label (expectationvalue attribute)": [[8, "inquanto.computables.atomic.ExpectationValue.label"]], "label (expectationvaluebraderivative attribute)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative.label"]], "label (expectationvaluebraderivativeimag attribute)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag.label"]], "label (expectationvaluebraderivativereal attribute)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal.label"]], "label (expectationvaluederivative attribute)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative.label"]], "label (expectationvalueketderivative attribute)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative.label"]], "label (expectationvalueketderivativeimag attribute)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag.label"]], "label (expectationvalueketderivativereal attribute)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal.label"]], "label (expectationvaluenonhermitian attribute)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.label"]], "label (expectationvaluesumcomputable attribute)": [[8, "inquanto.computables.composite.ExpectationValueSumComputable.label"]], "label (holegfcomputable attribute)": [[8, "inquanto.computables.composite.HoleGFComputable.label"]], "label (krylovsubspacecomputable attribute)": [[8, "inquanto.computables.composite.KrylovSubspaceComputable.label"]], "label (lanczoscoefficientscomputable attribute)": [[8, "inquanto.computables.composite.LanczosCoefficientsComputable.label"]], "label (lanczosmatrixcomputable attribute)": [[8, "inquanto.computables.composite.LanczosMatrixComputable.label"]], "label (manybodygfcomputable attribute)": [[8, "inquanto.computables.composite.ManyBodyGFComputable.label"]], "label (metrictensorimag attribute)": [[8, "inquanto.computables.atomic.MetricTensorImag.label"]], "label (metrictensorreal attribute)": [[8, "inquanto.computables.atomic.MetricTensorReal.label"]], "label (nonorthogonalmatricescomputable attribute)": [[8, "inquanto.computables.composite.NonOrthogonalMatricesComputable.label"]], "label (overlap attribute)": [[8, "inquanto.computables.atomic.Overlap.label"]], "label (overlapimag attribute)": [[8, "inquanto.computables.atomic.OverlapImag.label"]], "label (overlapmatrixcomputable attribute)": [[8, "inquanto.computables.composite.OverlapMatrixComputable.label"]], "label (overlapreal attribute)": [[8, "inquanto.computables.atomic.OverlapReal.label"]], "label (overlapsquared attribute)": [[8, "inquanto.computables.atomic.OverlapSquared.label"]], "label (pdm1234realcomputable attribute)": [[8, "inquanto.computables.composite.PDM1234RealComputable.label"]], "label (particlegfcomputable attribute)": [[8, "inquanto.computables.composite.ParticleGFComputable.label"]], "label (qcm4computable attribute)": [[8, "inquanto.computables.composite.QCM4Computable.label"]], "label (qsematricescomputable attribute)": [[8, "inquanto.computables.composite.QSEMatricesComputable.label"]], "label (rdm1234realcomputable attribute)": [[8, "inquanto.computables.composite.RDM1234RealComputable.label"]], "label (restrictedonebodyrdmcomputable attribute)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMComputable.label"]], "label (restrictedonebodyrdmrealcomputable attribute)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMRealComputable.label"]], "label (sceommatrixcomputable attribute)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.label"]], "label (spinlessnbodypdmarrayrealcomputable attribute)": [[8, "inquanto.computables.composite.SpinlessNBodyPDMArrayRealComputable.label"]], "label (spinlessnbodyrdmarrayrealcomputable attribute)": [[8, "inquanto.computables.composite.SpinlessNBodyRDMArrayRealComputable.label"]], "label (unrestrictedonebodyrdmcomputable attribute)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMComputable.label"]], "label (unrestrictedonebodyrdmrealcomputable attribute)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMRealComputable.label"]], "lowest_eigenvalue() (krylovsubspace method)": [[8, "inquanto.computables.composite.KrylovSubspace.lowest_eigenvalue"]], "mt (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.mT"]], "max() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.max"]], "mean() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.mean"]], "min() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.min"]], "moments() (krylovsubspace method)": [[8, "inquanto.computables.composite.KrylovSubspace.moments"]], "nbytes (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.nbytes"]], "ndim (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.ndim"]], "newbyteorder (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.newbyteorder"]], "nonzero() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.nonzero"]], "partition() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.partition"]], "pop() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.pop"]], "print_tree() (commutatorcomputable method)": [[8, "inquanto.computables.composite.CommutatorComputable.print_tree"]], "print_tree() (computablefunction method)": [[8, "inquanto.computables.primitive.ComputableFunction.print_tree"]], "print_tree() (computableint method)": [[8, "inquanto.computables.primitive.ComputableInt.print_tree"]], "print_tree() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.print_tree"]], "print_tree() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.print_tree"]], "print_tree() (computablenode method)": [[8, "inquanto.computables.primitive.ComputableNode.print_tree"]], "print_tree() (computablesinglechild method)": [[8, "inquanto.computables.primitive.ComputableSingleChild.print_tree"]], "print_tree() (expectationvalue method)": [[8, "inquanto.computables.atomic.ExpectationValue.print_tree"]], "print_tree() (expectationvaluebraderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative.print_tree"]], "print_tree() (expectationvaluebraderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag.print_tree"]], "print_tree() (expectationvaluebraderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal.print_tree"]], "print_tree() (expectationvaluederivative method)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative.print_tree"]], "print_tree() (expectationvalueketderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative.print_tree"]], "print_tree() (expectationvalueketderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag.print_tree"]], "print_tree() (expectationvalueketderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal.print_tree"]], "print_tree() (expectationvaluenonhermitian method)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.print_tree"]], "print_tree() (expectationvaluesumcomputable method)": [[8, "inquanto.computables.composite.ExpectationValueSumComputable.print_tree"]], "print_tree() (holegfcomputable method)": [[8, "inquanto.computables.composite.HoleGFComputable.print_tree"]], "print_tree() (krylovsubspacecomputable method)": [[8, "inquanto.computables.composite.KrylovSubspaceComputable.print_tree"]], "print_tree() (lanczoscoefficientscomputable method)": [[8, "inquanto.computables.composite.LanczosCoefficientsComputable.print_tree"]], "print_tree() (lanczosmatrixcomputable method)": [[8, "inquanto.computables.composite.LanczosMatrixComputable.print_tree"]], "print_tree() (manybodygfcomputable method)": [[8, "inquanto.computables.composite.ManyBodyGFComputable.print_tree"]], "print_tree() (metrictensorimag method)": [[8, "inquanto.computables.atomic.MetricTensorImag.print_tree"]], "print_tree() (metrictensorreal method)": [[8, "inquanto.computables.atomic.MetricTensorReal.print_tree"]], "print_tree() (nonorthogonalmatricescomputable method)": [[8, "inquanto.computables.composite.NonOrthogonalMatricesComputable.print_tree"]], "print_tree() (overlap method)": [[8, "inquanto.computables.atomic.Overlap.print_tree"]], "print_tree() (overlapimag method)": [[8, "inquanto.computables.atomic.OverlapImag.print_tree"]], "print_tree() (overlapmatrixcomputable method)": [[8, "inquanto.computables.composite.OverlapMatrixComputable.print_tree"]], "print_tree() (overlapreal method)": [[8, "inquanto.computables.atomic.OverlapReal.print_tree"]], "print_tree() (overlapsquared method)": [[8, "inquanto.computables.atomic.OverlapSquared.print_tree"]], "print_tree() (pdm1234realcomputable method)": [[8, "inquanto.computables.composite.PDM1234RealComputable.print_tree"]], "print_tree() (particlegfcomputable method)": [[8, "inquanto.computables.composite.ParticleGFComputable.print_tree"]], "print_tree() (qcm4computable method)": [[8, "inquanto.computables.composite.QCM4Computable.print_tree"]], "print_tree() (qsematricescomputable method)": [[8, "inquanto.computables.composite.QSEMatricesComputable.print_tree"]], "print_tree() (rdm1234realcomputable method)": [[8, "inquanto.computables.composite.RDM1234RealComputable.print_tree"]], "print_tree() (restrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMComputable.print_tree"]], "print_tree() (restrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMRealComputable.print_tree"]], "print_tree() (sceommatrixcomputable method)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.print_tree"]], "print_tree() (spinlessnbodypdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyPDMArrayRealComputable.print_tree"]], "print_tree() (spinlessnbodyrdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyRDMArrayRealComputable.print_tree"]], "print_tree() (unrestrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMComputable.print_tree"]], "print_tree() (unrestrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMRealComputable.print_tree"]], "prod() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.prod"]], "ptp (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.ptp"]], "put() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.put"]], "ravel() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.ravel"]], "real (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.real"]], "remove() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.remove"]], "repeat() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.repeat"]], "reshape() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.reshape"]], "resize() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.resize"]], "reverse() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.reverse"]], "round() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.round"]], "searchsorted() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.searchsorted"]], "setfield() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.setfield"]], "setflags() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.setflags"]], "shape (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.shape"]], "size (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.size"]], "sort() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.sort"]], "sort() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.sort"]], "squeeze() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.squeeze"]], "state (expectationvalue attribute)": [[8, "inquanto.computables.atomic.ExpectationValue.state"]], "state (expectationvaluebraderivative attribute)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative.state"]], "state (expectationvaluebraderivativeimag attribute)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag.state"]], "state (expectationvaluebraderivativereal attribute)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal.state"]], "state (expectationvaluederivative attribute)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative.state"]], "state (expectationvalueketderivative attribute)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative.state"]], "state (expectationvalueketderivativeimag attribute)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag.state"]], "state (expectationvalueketderivativereal attribute)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal.state"]], "state (expectationvaluenonhermitian attribute)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.state"]], "state (metrictensorimag attribute)": [[8, "inquanto.computables.atomic.MetricTensorImag.state"]], "state (metrictensorreal attribute)": [[8, "inquanto.computables.atomic.MetricTensorReal.state"]], "std() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.std"]], "strides (computablendarray attribute)": [[8, "inquanto.computables.primitive.ComputableNDArray.strides"]], "sum() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.sum"]], "swapaxes() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.swapaxes"]], "symbols (expectationvaluebraderivative attribute)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative.symbols"]], "symbols (expectationvaluebraderivativeimag attribute)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag.symbols"]], "symbols (expectationvaluebraderivativereal attribute)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal.symbols"]], "symbols (expectationvaluederivative attribute)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative.symbols"]], "symbols (expectationvalueketderivative attribute)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative.symbols"]], "symbols (expectationvalueketderivativeimag attribute)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag.symbols"]], "symbols (expectationvalueketderivativereal attribute)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal.symbols"]], "symbols (metrictensorimag attribute)": [[8, "inquanto.computables.atomic.MetricTensorImag.symbols"]], "symbols (metrictensorreal attribute)": [[8, "inquanto.computables.atomic.MetricTensorReal.symbols"]], "take() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.take"]], "to_device() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.to_device"]], "tobytes() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.tobytes"]], "tofile() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.tofile"]], "tolist() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.tolist"]], "tostring() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.tostring"]], "trace() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.trace"]], "transpose() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.transpose"]], "value (computableint attribute)": [[8, "inquanto.computables.primitive.ComputableInt.value"]], "var() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.var"]], "view() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.view"]], "walk() (commutatorcomputable method)": [[8, "inquanto.computables.composite.CommutatorComputable.walk"]], "walk() (computablefunction method)": [[8, "inquanto.computables.primitive.ComputableFunction.walk"]], "walk() (computableint method)": [[8, "inquanto.computables.primitive.ComputableInt.walk"]], "walk() (computablelist method)": [[8, "inquanto.computables.primitive.ComputableList.walk"]], "walk() (computablendarray method)": [[8, "inquanto.computables.primitive.ComputableNDArray.walk"]], "walk() (computablenode method)": [[8, "inquanto.computables.primitive.ComputableNode.walk"]], "walk() (computablesinglechild method)": [[8, "inquanto.computables.primitive.ComputableSingleChild.walk"]], "walk() (expectationvalue method)": [[8, "inquanto.computables.atomic.ExpectationValue.walk"]], "walk() (expectationvaluebraderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivative.walk"]], "walk() (expectationvaluebraderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeImag.walk"]], "walk() (expectationvaluebraderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueBraDerivativeReal.walk"]], "walk() (expectationvaluederivative method)": [[8, "inquanto.computables.atomic.ExpectationValueDerivative.walk"]], "walk() (expectationvalueketderivative method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivative.walk"]], "walk() (expectationvalueketderivativeimag method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeImag.walk"]], "walk() (expectationvalueketderivativereal method)": [[8, "inquanto.computables.atomic.ExpectationValueKetDerivativeReal.walk"]], "walk() (expectationvaluenonhermitian method)": [[8, "inquanto.computables.atomic.ExpectationValueNonHermitian.walk"]], "walk() (expectationvaluesumcomputable method)": [[8, "inquanto.computables.composite.ExpectationValueSumComputable.walk"]], "walk() (holegfcomputable method)": [[8, "inquanto.computables.composite.HoleGFComputable.walk"]], "walk() (krylovsubspacecomputable method)": [[8, "inquanto.computables.composite.KrylovSubspaceComputable.walk"]], "walk() (lanczoscoefficientscomputable method)": [[8, "inquanto.computables.composite.LanczosCoefficientsComputable.walk"]], "walk() (lanczosmatrixcomputable method)": [[8, "inquanto.computables.composite.LanczosMatrixComputable.walk"]], "walk() (manybodygfcomputable method)": [[8, "inquanto.computables.composite.ManyBodyGFComputable.walk"]], "walk() (metrictensorimag method)": [[8, "inquanto.computables.atomic.MetricTensorImag.walk"]], "walk() (metrictensorreal method)": [[8, "inquanto.computables.atomic.MetricTensorReal.walk"]], "walk() (nonorthogonalmatricescomputable method)": [[8, "inquanto.computables.composite.NonOrthogonalMatricesComputable.walk"]], "walk() (overlap method)": [[8, "inquanto.computables.atomic.Overlap.walk"]], "walk() (overlapimag method)": [[8, "inquanto.computables.atomic.OverlapImag.walk"]], "walk() (overlapmatrixcomputable method)": [[8, "inquanto.computables.composite.OverlapMatrixComputable.walk"]], "walk() (overlapreal method)": [[8, "inquanto.computables.atomic.OverlapReal.walk"]], "walk() (overlapsquared method)": [[8, "inquanto.computables.atomic.OverlapSquared.walk"]], "walk() (pdm1234realcomputable method)": [[8, "inquanto.computables.composite.PDM1234RealComputable.walk"]], "walk() (particlegfcomputable method)": [[8, "inquanto.computables.composite.ParticleGFComputable.walk"]], "walk() (qcm4computable method)": [[8, "inquanto.computables.composite.QCM4Computable.walk"]], "walk() (qsematricescomputable method)": [[8, "inquanto.computables.composite.QSEMatricesComputable.walk"]], "walk() (rdm1234realcomputable method)": [[8, "inquanto.computables.composite.RDM1234RealComputable.walk"]], "walk() (restrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMComputable.walk"]], "walk() (restrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.RestrictedOneBodyRDMRealComputable.walk"]], "walk() (sceommatrixcomputable method)": [[8, "inquanto.computables.composite.SCEOMMatrixComputable.walk"]], "walk() (spinlessnbodypdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyPDMArrayRealComputable.walk"]], "walk() (spinlessnbodyrdmarrayrealcomputable method)": [[8, "inquanto.computables.composite.SpinlessNBodyRDMArrayRealComputable.walk"]], "walk() (unrestrictedonebodyrdmcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMComputable.walk"]], "walk() (unrestrictedonebodyrdmrealcomputable method)": [[8, "inquanto.computables.composite.UnrestrictedOneBodyRDMRealComputable.walk"]], "cachedict (class in inquanto.core)": [[9, "inquanto.core.CacheDict"]], "inquantocontext (class in inquanto.core)": [[9, "inquanto.core.InQuantoContext"]], "symbolensemble (class in inquanto.core)": [[9, "id0"], [9, "inquanto.core.SymbolEnsemble"]], "timer (class in inquanto.core)": [[9, "inquanto.core.Timer"]], "timerwith (class in inquanto.core)": [[9, "inquanto.core.TimerWith"]], "as_list() (symbolensemble method)": [[9, "id1"], [9, "inquanto.core.SymbolEnsemble.as_list"]], "as_set() (symbolensemble method)": [[9, "id2"], [9, "inquanto.core.SymbolEnsemble.as_set"]], "attempt() (cachedict method)": [[9, "inquanto.core.CacheDict.attempt"]], "base (inquantocontext property)": [[9, "inquanto.core.InQuantoContext.base"]], "block_counter (timerwith attribute)": [[9, "inquanto.core.TimerWith.block_counter"]], "cached() (in module inquanto.core)": [[9, "inquanto.core.cached"]], "clear() (cachedict method)": [[9, "inquanto.core.CacheDict.clear"]], "construct_from_array() (symbolensemble method)": [[9, "id3"], [9, "inquanto.core.SymbolEnsemble.construct_from_array"]], "construct_from_dict() (symbolensemble method)": [[9, "id4"], [9, "inquanto.core.SymbolEnsemble.construct_from_dict"]], "construct_random() (symbolensemble method)": [[9, "id5"], [9, "inquanto.core.SymbolEnsemble.construct_random"]], "construct_zeros() (symbolensemble method)": [[9, "id6"], [9, "inquanto.core.SymbolEnsemble.construct_zeros"]], "convert_weaks_to_refs() (cachedict static method)": [[9, "inquanto.core.CacheDict.convert_weaks_to_refs"]], "copy() (symbolensemble method)": [[9, "id7"], [9, "inquanto.core.SymbolEnsemble.copy"]], "dict_to_matrix() (in module inquanto.core)": [[9, "inquanto.core.dict_to_matrix"]], "dict_to_vector() (in module inquanto.core)": [[9, "inquanto.core.dict_to_vector"]], "format_size() (cachedict static method)": [[9, "inquanto.core.CacheDict.format_size"]], "from_symbols() (symbolensemble static method)": [[9, "id8"], [9, "inquanto.core.SymbolEnsemble.from_symbols"]], "get() (cachedict method)": [[9, "inquanto.core.CacheDict.get"]], "get_size_in_bytes() (cachedict static method)": [[9, "inquanto.core.CacheDict.get_size_in_bytes"]], "hash_data() (in module inquanto.core)": [[9, "inquanto.core.hash_data"]], "inquanto.core": [[9, "module-inquanto.core"]], "issubset() (symbolensemble method)": [[9, "id9"], [9, "inquanto.core.SymbolEnsemble.issubset"]], "items() (cachedict method)": [[9, "inquanto.core.CacheDict.items"]], "keys() (cachedict method)": [[9, "inquanto.core.CacheDict.keys"]], "matrix_to_dict() (in module inquanto.core)": [[9, "inquanto.core.matrix_to_dict"]], "pd_safe_eigh() (in module inquanto.core)": [[9, "inquanto.core.pd_safe_eigh"]], "pop() (cachedict method)": [[9, "inquanto.core.CacheDict.pop"]], "popitem() (cachedict method)": [[9, "inquanto.core.CacheDict.popitem"]], "prefix (inquantocontext property)": [[9, "inquanto.core.InQuantoContext.prefix"]], "report() (cachedict method)": [[9, "inquanto.core.CacheDict.report"]], "setdefault() (cachedict method)": [[9, "inquanto.core.CacheDict.setdefault"]], "start() (timer method)": [[9, "inquanto.core.Timer.start"]], "stop() (timer method)": [[9, "inquanto.core.Timer.stop"]], "update() (cachedict method)": [[9, "inquanto.core.CacheDict.update"]], "update() (symbolensemble method)": [[9, "id10"], [9, "inquanto.core.SymbolEnsemble.update"]], "values() (cachedict method)": [[9, "inquanto.core.CacheDict.values"]], "vector_to_dict() (in module inquanto.core)": [[9, "inquanto.core.vector_to_dict"]], "dmetrhf (class in inquanto.embeddings.dmet)": [[10, "inquanto.embeddings.dmet.DMETRHF"]], "dmetrhffragment (class in inquanto.embeddings.dmet)": [[10, "inquanto.embeddings.dmet.DMETRHFFragment"]], "dmetrhffragmentactive (class in inquanto.embeddings.dmet)": [[10, "inquanto.embeddings.dmet.DMETRHFFragmentActive"]], "dmetrhffragmentdirect (class in inquanto.embeddings.dmet)": [[10, "inquanto.embeddings.dmet.DMETRHFFragmentDirect"]], "dmetrhffragmentuccsdvqe (class in inquanto.embeddings.dmet)": [[10, "inquanto.embeddings.dmet.DMETRHFFragmentUCCSDVQE"]], "impuritydmetrohf (class in inquanto.embeddings.dmet)": [[10, "inquanto.embeddings.dmet.ImpurityDMETROHF"]], "impuritydmetrohffragment (class in inquanto.embeddings.dmet)": [[10, "inquanto.embeddings.dmet.ImpurityDMETROHFFragment"]], "impuritydmetrohffragmentactive (class in inquanto.embeddings.dmet)": [[10, "inquanto.embeddings.dmet.ImpurityDMETROHFFragmentActive"]], "impuritydmetrohffragmented (class in inquanto.embeddings.dmet)": [[10, "inquanto.embeddings.dmet.ImpurityDMETROHFFragmentED"]], "impuritydmetrohffragmentwithoutrdm (class in inquanto.embeddings.dmet)": [[10, "inquanto.embeddings.dmet.ImpurityDMETROHFFragmentWithoutRDM"]], "compute_fragment_energy() (dmetrhffragment static method)": [[10, "inquanto.embeddings.dmet.DMETRHFFragment.compute_fragment_energy"]], "construct_fragment_energy_operator() (dmetrhffragmentactive static method)": [[10, "inquanto.embeddings.dmet.DMETRHFFragmentActive.construct_fragment_energy_operator"]], "construct_fragment_energy_operator() (dmetrhffragmentdirect static method)": [[10, "inquanto.embeddings.dmet.DMETRHFFragmentDirect.construct_fragment_energy_operator"]], "construct_fragment_energy_operator() (dmetrhffragmentuccsdvqe static method)": [[10, "inquanto.embeddings.dmet.DMETRHFFragmentUCCSDVQE.construct_fragment_energy_operator"]], "construct_random_parameters() (dmetrhf static method)": [[10, "inquanto.embeddings.dmet.DMETRHF.construct_random_parameters"]], "correlation_potential_pattern() (dmetrhf static method)": [[10, "inquanto.embeddings.dmet.DMETRHF.correlation_potential_pattern"]], "energy() (dmetrhf method)": [[10, "inquanto.embeddings.dmet.DMETRHF.energy"]], "inquanto.embeddings.dmet": [[10, "module-inquanto.embeddings.dmet"]], "pattern_from_locations() (dmetrhf static method)": [[10, "inquanto.embeddings.dmet.DMETRHF.pattern_from_locations"]], "run() (dmetrhf method)": [[10, "inquanto.embeddings.dmet.DMETRHF.run"]], "run() (impuritydmetrohf method)": [[10, "inquanto.embeddings.dmet.ImpurityDMETROHF.run"]], "run_one() (dmetrhf method)": [[10, "inquanto.embeddings.dmet.DMETRHF.run_one"]], "solve() (dmetrhffragment method)": [[10, "inquanto.embeddings.dmet.DMETRHFFragment.solve"]], "solve() (dmetrhffragmentactive method)": [[10, "inquanto.embeddings.dmet.DMETRHFFragmentActive.solve"]], "solve() (dmetrhffragmentdirect method)": [[10, "inquanto.embeddings.dmet.DMETRHFFragmentDirect.solve"]], "solve() (dmetrhffragmentuccsdvqe method)": [[10, "inquanto.embeddings.dmet.DMETRHFFragmentUCCSDVQE.solve"]], "solve() (impuritydmetrohffragment method)": [[10, "inquanto.embeddings.dmet.ImpurityDMETROHFFragment.solve"]], "solve() (impuritydmetrohffragmentactive method)": [[10, "inquanto.embeddings.dmet.ImpurityDMETROHFFragmentActive.solve"]], "solve() (impuritydmetrohffragmented method)": [[10, "inquanto.embeddings.dmet.ImpurityDMETROHFFragmentED.solve"]], "solve() (impuritydmetrohffragmentwithoutrdm method)": [[10, "inquanto.embeddings.dmet.ImpurityDMETROHFFragmentWithoutRDM.solve"]], "solve_active() (dmetrhffragmentactive method)": [[10, "inquanto.embeddings.dmet.DMETRHFFragmentActive.solve_active"]], "solve_active() (dmetrhffragmentuccsdvqe method)": [[10, "inquanto.embeddings.dmet.DMETRHFFragmentUCCSDVQE.solve_active"]], "solve_active() (impuritydmetrohffragmentactive method)": [[10, "inquanto.embeddings.dmet.ImpurityDMETROHFFragmentActive.solve_active"]], "drivergeneralizedhubbard (class in inquanto.express)": [[11, "inquanto.express.DriverGeneralizedHubbard"]], "driverhubbarddimer (class in inquanto.express)": [[11, "inquanto.express.DriverHubbardDimer"]], "driverising1d (class in inquanto.express)": [[11, "inquanto.express.DriverIsing1D"]], "driverising1dring (class in inquanto.express)": [[11, "inquanto.express.DriverIsing1DRing"]], "driverisingcustomconnectivity (class in inquanto.express)": [[11, "inquanto.express.DriverIsingCustomConnectivity"]], "generate_chain() (drivergeneralizedhubbard static method)": [[11, "inquanto.express.DriverGeneralizedHubbard.generate_chain"]], "generate_report() (drivergeneralizedhubbard method)": [[11, "inquanto.express.DriverGeneralizedHubbard.generate_report"]], "generate_report() (driverhubbarddimer method)": [[11, "inquanto.express.DriverHubbardDimer.generate_report"]], "generate_report() (driverising1d method)": [[11, "inquanto.express.DriverIsing1D.generate_report"]], "generate_report() (driverising1dring method)": [[11, "inquanto.express.DriverIsing1DRing.generate_report"]], "generate_report() (driverisingcustomconnectivity method)": [[11, "inquanto.express.DriverIsingCustomConnectivity.generate_report"]], "generate_ring() (drivergeneralizedhubbard static method)": [[11, "inquanto.express.DriverGeneralizedHubbard.generate_ring"]], "get_noisy_backend() (in module inquanto.express)": [[11, "inquanto.express.get_noisy_backend"]], "get_system() (drivergeneralizedhubbard method)": [[11, "inquanto.express.DriverGeneralizedHubbard.get_system"]], "get_system() (driverhubbarddimer method)": [[11, "inquanto.express.DriverHubbardDimer.get_system"]], "get_system() (driverising1d method)": [[11, "inquanto.express.DriverIsing1D.get_system"]], "get_system() (driverising1dring method)": [[11, "inquanto.express.DriverIsing1DRing.get_system"]], "get_system() (driverisingcustomconnectivity method)": [[11, "inquanto.express.DriverIsingCustomConnectivity.get_system"]], "get_system() (in module inquanto.express)": [[11, "inquanto.express.get_system"]], "inquanto.express": [[11, "module-inquanto.express"]], "list_h5() (in module inquanto.express)": [[11, "inquanto.express.list_h5"]], "load_h5() (in module inquanto.express)": [[11, "inquanto.express.load_h5"]], "n_electron (drivergeneralizedhubbard property)": [[11, "inquanto.express.DriverGeneralizedHubbard.n_electron"]], "n_electron (driverhubbarddimer property)": [[11, "inquanto.express.DriverHubbardDimer.n_electron"]], "n_orb (drivergeneralizedhubbard property)": [[11, "inquanto.express.DriverGeneralizedHubbard.n_orb"]], "n_orb (driverhubbarddimer property)": [[11, "inquanto.express.DriverHubbardDimer.n_orb"]], "print_json_report() (drivergeneralizedhubbard method)": [[11, "inquanto.express.DriverGeneralizedHubbard.print_json_report"]], "print_json_report() (driverhubbarddimer method)": [[11, "inquanto.express.DriverHubbardDimer.print_json_report"]], "print_json_report() (driverising1d method)": [[11, "inquanto.express.DriverIsing1D.print_json_report"]], "print_json_report() (driverising1dring method)": [[11, "inquanto.express.DriverIsing1DRing.print_json_report"]], "print_json_report() (driverisingcustomconnectivity method)": [[11, "inquanto.express.DriverIsingCustomConnectivity.print_json_report"]], "propagate() (in module inquanto.express)": [[11, "inquanto.express.propagate"]], "random_circuit_ansatz() (in module inquanto.express)": [[11, "inquanto.express.random_circuit_ansatz"]], "run_rhf() (in module inquanto.express)": [[11, "inquanto.express.run_rhf"]], "run_rohf() (in module inquanto.express)": [[11, "inquanto.express.run_rohf"]], "run_time_evolution() (in module inquanto.express)": [[11, "inquanto.express.run_time_evolution"]], "run_vqe() (in module inquanto.express)": [[11, "inquanto.express.run_vqe"]], "save_h5_system() (in module inquanto.express)": [[11, "inquanto.express.save_h5_system"]], "geometrymolecular (class in inquanto.geometries)": [[12, "inquanto.geometries.GeometryMolecular"]], "geometryperiodic (class in inquanto.geometries)": [[12, "inquanto.geometries.GeometryPeriodic"]], "add_atom() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.add_atom"]], "add_atom() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.add_atom"]], "align_bond_to_axis() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.align_bond_to_axis"]], "align_bond_to_axis() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.align_bond_to_axis"]], "align_bond_to_vector() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.align_bond_to_vector"]], "align_bond_to_vector() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.align_bond_to_vector"]], "align_to_plane() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.align_to_plane"]], "align_to_plane() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.align_to_plane"]], "align_to_xy_plane() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.align_to_xy_plane"]], "align_to_xy_plane() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.align_to_xy_plane"]], "align_to_xz_plane() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.align_to_xz_plane"]], "align_to_xz_plane() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.align_to_xz_plane"]], "align_to_yz_plane() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.align_to_yz_plane"]], "align_to_yz_plane() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.align_to_yz_plane"]], "atomic_coordinates (geometrymolecular property)": [[12, "inquanto.geometries.GeometryMolecular.atomic_coordinates"]], "atomic_coordinates (geometryperiodic property)": [[12, "inquanto.geometries.GeometryPeriodic.atomic_coordinates"]], "bond_angle() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.bond_angle"]], "bond_angle() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.bond_angle"]], "bond_length() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.bond_length"]], "bond_length() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.bond_length"]], "build_2atom_chain() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.build_2atom_chain"]], "build_2atom_chain() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.build_2atom_chain"]], "build_alternating_ring() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.build_alternating_ring"]], "build_alternating_ring() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.build_alternating_ring"]], "build_rectangle() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.build_rectangle"]], "build_rectangle() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.build_rectangle"]], "build_ring() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.build_ring"]], "build_ring() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.build_ring"]], "build_supercell() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.build_supercell"]], "compute_distance_matrix() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.compute_distance_matrix"]], "compute_distance_matrix() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.compute_distance_matrix"]], "dataframe (geometrymolecular property)": [[12, "inquanto.geometries.GeometryMolecular.dataframe"]], "dataframe (geometryperiodic property)": [[12, "inquanto.geometries.GeometryPeriodic.dataframe"]], "delete_atom() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.delete_atom"]], "delete_atom() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.delete_atom"]], "df_to_xyz() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.df_to_xyz"]], "df_to_xyz() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.df_to_xyz"]], "dihedral_angle() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.dihedral_angle"]], "dihedral_angle() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.dihedral_angle"]], "elements (geometrymolecular property)": [[12, "inquanto.geometries.GeometryMolecular.elements"]], "elements (geometryperiodic property)": [[12, "inquanto.geometries.GeometryPeriodic.elements"]], "from_xyz_string() (geometrymolecular static method)": [[12, "inquanto.geometries.GeometryMolecular.from_xyz_string"]], "from_xyz_string() (geometryperiodic static method)": [[12, "inquanto.geometries.GeometryPeriodic.from_xyz_string"]], "load_csv() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.load_csv"]], "load_csv() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.load_csv"]], "load_json() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.load_json"]], "load_json() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.load_json"]], "load_xyz() (geometrymolecular class method)": [[12, "inquanto.geometries.GeometryMolecular.load_xyz"]], "load_xyz() (geometryperiodic class method)": [[12, "inquanto.geometries.GeometryPeriodic.load_xyz"]], "load_zmatrix() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.load_zmatrix"]], "modify_bond_angle() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.modify_bond_angle"]], "modify_bond_angle() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.modify_bond_angle"]], "modify_bond_angle_by_group() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.modify_bond_angle_by_group"]], "modify_bond_angle_by_group() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.modify_bond_angle_by_group"]], "modify_bond_length() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.modify_bond_length"]], "modify_bond_length() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.modify_bond_length"]], "modify_bond_length_by_group() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.modify_bond_length_by_group"]], "modify_bond_length_by_group() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.modify_bond_length_by_group"]], "modify_dihedral_angle() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.modify_dihedral_angle"]], "modify_dihedral_angle() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.modify_dihedral_angle"]], "modify_dihedral_angle_by_group() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.modify_dihedral_angle_by_group"]], "modify_dihedral_angle_by_group() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.modify_dihedral_angle_by_group"]], "randomize_xyz() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.randomize_xyz"]], "randomize_xyz() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.randomize_xyz"]], "rescale_position_vectors() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.rescale_position_vectors"]], "rescale_position_vectors() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.rescale_position_vectors"]], "rotate_around_axis() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.rotate_around_axis"]], "rotate_around_axis() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.rotate_around_axis"]], "rotate_around_vector() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.rotate_around_vector"]], "rotate_around_vector() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.rotate_around_vector"]], "save_csv() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.save_csv"]], "save_csv() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.save_csv"]], "save_json() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.save_json"]], "save_json() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.save_json"]], "save_xyz() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.save_xyz"]], "save_xyz() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.save_xyz"]], "save_zmatrix() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.save_zmatrix"]], "scan_bond_angle() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.scan_bond_angle"]], "scan_bond_angle() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.scan_bond_angle"]], "scan_bond_angle_by_group() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.scan_bond_angle_by_group"]], "scan_bond_angle_by_group() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.scan_bond_angle_by_group"]], "scan_bond_length() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.scan_bond_length"]], "scan_bond_length() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.scan_bond_length"]], "scan_bond_length_by_group() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.scan_bond_length_by_group"]], "scan_bond_length_by_group() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.scan_bond_length_by_group"]], "scan_dihedral_angle() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.scan_dihedral_angle"]], "scan_dihedral_angle() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.scan_dihedral_angle"]], "scan_dihedral_angle_by_group() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.scan_dihedral_angle_by_group"]], "scan_dihedral_angle_by_group() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.scan_dihedral_angle_by_group"]], "set_groups() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.set_groups"]], "set_groups() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.set_groups"]], "set_subgroups() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.set_subgroups"]], "set_subgroups() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.set_subgroups"]], "to_angstrom() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.to_angstrom"]], "to_angstrom() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.to_angstrom"]], "to_bohr() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.to_bohr"]], "to_bohr() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.to_bohr"]], "to_zmatrix() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.to_zmatrix"]], "translate_by_vector() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.translate_by_vector"]], "translate_by_vector() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.translate_by_vector"]], "xyz (geometrymolecular property)": [[12, "inquanto.geometries.GeometryMolecular.xyz"]], "xyz (geometryperiodic property)": [[12, "inquanto.geometries.GeometryPeriodic.xyz"]], "xyz_to_df() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.xyz_to_df"]], "xyz_to_df() (geometryperiodic method)": [[12, "inquanto.geometries.GeometryPeriodic.xyz_to_df"]], "zmatrix (geometrymolecular property)": [[12, "inquanto.geometries.GeometryMolecular.zmatrix"]], "zmatrix_to_df() (geometrymolecular method)": [[12, "inquanto.geometries.GeometryMolecular.zmatrix_to_df"]], "operator_map_types (qubitmapping attribute)": [[13, "inquanto.mappings.QubitMapping.OPERATOR_MAP_TYPES"]], "operator_map_types (qubitmappingbravyikitaev attribute)": [[13, "inquanto.mappings.QubitMappingBravyiKitaev.OPERATOR_MAP_TYPES"]], "operator_map_types (qubitmappingjordanwigner attribute)": [[13, "inquanto.mappings.QubitMappingJordanWigner.OPERATOR_MAP_TYPES"]], "operator_map_types (qubitmappingparaparticular attribute)": [[13, "inquanto.mappings.QubitMappingParaparticular.OPERATOR_MAP_TYPES"]], "operator_map_types (qubitmappingparity attribute)": [[13, "inquanto.mappings.QubitMappingParity.OPERATOR_MAP_TYPES"]], "qubitmapping (class in inquanto.mappings)": [[13, "inquanto.mappings.QubitMapping"]], "qubitmappingbravyikitaev (class in inquanto.mappings)": [[13, "inquanto.mappings.QubitMappingBravyiKitaev"]], "qubitmappingjordanwigner (class in inquanto.mappings)": [[13, "inquanto.mappings.QubitMappingJordanWigner"]], "qubitmappingparaparticular (class in inquanto.mappings)": [[13, "inquanto.mappings.QubitMappingParaparticular"]], "qubitmappingparity (class in inquanto.mappings)": [[13, "inquanto.mappings.QubitMappingParity"]], "_mapping_flags (qubitmapping attribute)": [[13, "inquanto.mappings.QubitMapping._MAPPING_FLAGS"]], "_mapping_flags (qubitmappingbravyikitaev attribute)": [[13, "inquanto.mappings.QubitMappingBravyiKitaev._MAPPING_FLAGS"]], "_mapping_flags (qubitmappingjordanwigner attribute)": [[13, "inquanto.mappings.QubitMappingJordanWigner._MAPPING_FLAGS"]], "_mapping_flags (qubitmappingparaparticular attribute)": [[13, "inquanto.mappings.QubitMappingParaparticular._MAPPING_FLAGS"]], "_mapping_flags (qubitmappingparity attribute)": [[13, "inquanto.mappings.QubitMappingParity._MAPPING_FLAGS"]], "flip_set() (qubitmapping class method)": [[13, "inquanto.mappings.QubitMapping.flip_set"]], "flip_set() (qubitmappingbravyikitaev class method)": [[13, "inquanto.mappings.QubitMappingBravyiKitaev.flip_set"]], "flip_set() (qubitmappingjordanwigner class method)": [[13, "inquanto.mappings.QubitMappingJordanWigner.flip_set"]], "flip_set() (qubitmappingparaparticular class method)": [[13, "inquanto.mappings.QubitMappingParaparticular.flip_set"]], "flip_set() (qubitmappingparity class method)": [[13, "inquanto.mappings.QubitMappingParity.flip_set"]], "operator_map() (qubitmapping class method)": [[13, "inquanto.mappings.QubitMapping.operator_map"]], "operator_map() (qubitmappingbravyikitaev class method)": [[13, "inquanto.mappings.QubitMappingBravyiKitaev.operator_map"]], "operator_map() (qubitmappingjordanwigner class method)": [[13, "inquanto.mappings.QubitMappingJordanWigner.operator_map"]], "operator_map() (qubitmappingparaparticular class method)": [[13, "inquanto.mappings.QubitMappingParaparticular.operator_map"]], "operator_map() (qubitmappingparity class method)": [[13, "inquanto.mappings.QubitMappingParity.operator_map"]], "parity_set() (qubitmapping class method)": [[13, "inquanto.mappings.QubitMapping.parity_set"]], "parity_set() (qubitmappingbravyikitaev class method)": [[13, "inquanto.mappings.QubitMappingBravyiKitaev.parity_set"]], "parity_set() (qubitmappingjordanwigner class method)": [[13, "inquanto.mappings.QubitMappingJordanWigner.parity_set"]], "parity_set() (qubitmappingparaparticular class method)": [[13, "inquanto.mappings.QubitMappingParaparticular.parity_set"]], "parity_set() (qubitmappingparity class method)": [[13, "inquanto.mappings.QubitMappingParity.parity_set"]], "remainder_set() (qubitmappingbravyikitaev class method)": [[13, "inquanto.mappings.QubitMappingBravyiKitaev.remainder_set"]], "rho_set() (qubitmapping class method)": [[13, "inquanto.mappings.QubitMapping.rho_set"]], "rho_set() (qubitmappingbravyikitaev class method)": [[13, "inquanto.mappings.QubitMappingBravyiKitaev.rho_set"]], "rho_set() (qubitmappingjordanwigner class method)": [[13, "inquanto.mappings.QubitMappingJordanWigner.rho_set"]], "rho_set() (qubitmappingparaparticular class method)": [[13, "inquanto.mappings.QubitMappingParaparticular.rho_set"]], "rho_set() (qubitmappingparity class method)": [[13, "inquanto.mappings.QubitMappingParity.rho_set"]], "state_map() (qubitmapping class method)": [[13, "inquanto.mappings.QubitMapping.state_map"]], "state_map() (qubitmappingbravyikitaev class method)": [[13, "inquanto.mappings.QubitMappingBravyiKitaev.state_map"]], "state_map() (qubitmappingjordanwigner class method)": [[13, "inquanto.mappings.QubitMappingJordanWigner.state_map"]], "state_map() (qubitmappingparaparticular class method)": [[13, "inquanto.mappings.QubitMappingParaparticular.state_map"]], "state_map() (qubitmappingparity class method)": [[13, "inquanto.mappings.QubitMappingParity.state_map"]], "state_map_conventional() (qubitmapping class method)": [[13, "inquanto.mappings.QubitMapping.state_map_conventional"]], "state_map_conventional() (qubitmappingbravyikitaev class method)": [[13, "inquanto.mappings.QubitMappingBravyiKitaev.state_map_conventional"]], "state_map_conventional() (qubitmappingjordanwigner class method)": [[13, "inquanto.mappings.QubitMappingJordanWigner.state_map_conventional"]], "state_map_conventional() (qubitmappingparaparticular class method)": [[13, "inquanto.mappings.QubitMappingParaparticular.state_map_conventional"]], "state_map_conventional() (qubitmappingparity class method)": [[13, "inquanto.mappings.QubitMappingParity.state_map_conventional"]], "state_map_matrix() (qubitmapping class method)": [[13, "inquanto.mappings.QubitMapping.state_map_matrix"]], "state_map_matrix() (qubitmappingbravyikitaev class method)": [[13, "inquanto.mappings.QubitMappingBravyiKitaev.state_map_matrix"]], "state_map_matrix() (qubitmappingjordanwigner static method)": [[13, "inquanto.mappings.QubitMappingJordanWigner.state_map_matrix"]], "state_map_matrix() (qubitmappingparaparticular static method)": [[13, "inquanto.mappings.QubitMappingParaparticular.state_map_matrix"]], "state_map_matrix() (qubitmappingparity static method)": [[13, "inquanto.mappings.QubitMappingParity.state_map_matrix"]], "update_set() (qubitmapping class method)": [[13, "inquanto.mappings.QubitMapping.update_set"]], "update_set() (qubitmappingbravyikitaev class method)": [[13, "inquanto.mappings.QubitMappingBravyiKitaev.update_set"]], "update_set() (qubitmappingjordanwigner class method)": [[13, "inquanto.mappings.QubitMappingJordanWigner.update_set"]], "update_set() (qubitmappingparaparticular class method)": [[13, "inquanto.mappings.QubitMappingParaparticular.update_set"]], "update_set() (qubitmappingparity class method)": [[13, "inquanto.mappings.QubitMappingParity.update_set"]], "l_bfgs_b_coarse (optimizationmethod attribute)": [[14, "id0"], [14, "inquanto.minimizers.OptimizationMethod.L_BFGS_B_coarse"]], "l_bfgs_b_smooth (optimizationmethod attribute)": [[14, "id3"], [14, "inquanto.minimizers.OptimizationMethod.L_BFGS_B_smooth"]], "minimizerrotosolve (class in inquanto.minimizers)": [[14, "inquanto.minimizers.MinimizerRotosolve"]], "minimizersgd (class in inquanto.minimizers)": [[14, "inquanto.minimizers.MinimizerSGD"]], "minimizerspsa (class in inquanto.minimizers)": [[14, "inquanto.minimizers.MinimizerSPSA"]], "minimizerscipy (class in inquanto.minimizers)": [[14, "inquanto.minimizers.MinimizerScipy"]], "naiveeulerintegrator (class in inquanto.minimizers)": [[14, "inquanto.minimizers.NaiveEulerIntegrator"]], "optimizationmethod (class in inquanto.minimizers)": [[14, "inquanto.minimizers.OptimizationMethod"]], "scipyivpintegrator (class in inquanto.minimizers)": [[14, "inquanto.minimizers.ScipyIVPIntegrator"]], "scipyodeintegrator (class in inquanto.minimizers)": [[14, "inquanto.minimizers.ScipyODEIntegrator"]], "generate_report() (minimizerrotosolve method)": [[14, "inquanto.minimizers.MinimizerRotosolve.generate_report"]], "generate_report() (minimizersgd method)": [[14, "inquanto.minimizers.MinimizerSGD.generate_report"]], "generate_report() (minimizerspsa method)": [[14, "inquanto.minimizers.MinimizerSPSA.generate_report"]], "generate_report() (minimizerscipy method)": [[14, "inquanto.minimizers.MinimizerScipy.generate_report"]], "inquanto.minimizers": [[14, "module-inquanto.minimizers"]], "linear_solver_scipy_linalg() (naiveeulerintegrator static method)": [[14, "inquanto.minimizers.NaiveEulerIntegrator.linear_solver_scipy_linalg"]], "linear_solver_scipy_linalg() (scipyivpintegrator static method)": [[14, "inquanto.minimizers.ScipyIVPIntegrator.linear_solver_scipy_linalg"]], "linear_solver_scipy_linalg() (scipyodeintegrator static method)": [[14, "inquanto.minimizers.ScipyODEIntegrator.linear_solver_scipy_linalg"]], "linear_solver_scipy_pinvh() (naiveeulerintegrator static method)": [[14, "inquanto.minimizers.NaiveEulerIntegrator.linear_solver_scipy_pinvh"]], "linear_solver_scipy_pinvh() (scipyivpintegrator static method)": [[14, "inquanto.minimizers.ScipyIVPIntegrator.linear_solver_scipy_pinvh"]], "linear_solver_scipy_pinvh() (scipyodeintegrator static method)": [[14, "inquanto.minimizers.ScipyODEIntegrator.linear_solver_scipy_pinvh"]], "method (minimizerscipy property)": [[14, "inquanto.minimizers.MinimizerScipy.method"]], "minimize() (minimizerrotosolve method)": [[14, "inquanto.minimizers.MinimizerRotosolve.minimize"]], "minimize() (minimizersgd method)": [[14, "inquanto.minimizers.MinimizerSGD.minimize"]], "minimize() (minimizerspsa method)": [[14, "inquanto.minimizers.MinimizerSPSA.minimize"]], "minimize() (minimizerscipy method)": [[14, "inquanto.minimizers.MinimizerScipy.minimize"]], "options (minimizerscipy property)": [[14, "inquanto.minimizers.MinimizerScipy.options"]], "solve() (naiveeulerintegrator method)": [[14, "inquanto.minimizers.NaiveEulerIntegrator.solve"]], "solve() (scipyivpintegrator method)": [[14, "inquanto.minimizers.ScipyIVPIntegrator.solve"]], "solve() (scipyodeintegrator method)": [[14, "inquanto.minimizers.ScipyODEIntegrator.solve"]], "all (fermionoperatorlist.compressscalarsbehavior attribute)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.ALL"]], "all (qubitoperatorlist.compressscalarsbehavior attribute)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.ALL"]], "all (symmetryoperatorfermionicfactorized.compressscalarsbehavior attribute)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.ALL"]], "all (symmetryoperatorpaulifactorized.compressscalarsbehavior attribute)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.ALL"]], "bring_into_operator (qubitoperatorlist.expandexponentialproductcoefficientsbehavior attribute)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.BRING_INTO_OPERATOR"]], "bring_into_operator (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior attribute)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.BRING_INTO_OPERATOR"]], "cholesky (decompositionmethod attribute)": [[15, "inquanto.operators.DecompositionMethod.CHOLESKY"]], "chemistryrestrictedintegraloperator (class in inquanto.operators)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator"]], "chemistryrestrictedintegraloperatorcompact (class in inquanto.operators)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact"]], "chemistryunrestrictedintegraloperator (class in inquanto.operators)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator"]], "chemistryunrestrictedintegraloperatorcompact (class in inquanto.operators)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact"]], "compacttwobodyintegralss4 (class in inquanto.operators)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS4"]], "compacttwobodyintegralss8 (class in inquanto.operators)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS8"]], "decompositionmethod (class in inquanto.operators)": [[15, "inquanto.operators.DecompositionMethod"]], "diagonalizedonebodyintegrals (class in inquanto.operators)": [[15, "inquanto.operators.DiagonalizedOneBodyIntegrals"]], "doublefactorizedtwobodyintegrals (class in inquanto.operators)": [[15, "inquanto.operators.DoubleFactorizedTwoBodyIntegrals"]], "eig (decompositionmethod attribute)": [[15, "inquanto.operators.DecompositionMethod.EIG"]], "fcidumprestricted (class in inquanto.operators)": [[15, "inquanto.operators.FCIDumpRestricted"]], "fcidumpunrestricted (class in inquanto.operators)": [[15, "inquanto.operators.FCIDumpUnrestricted"]], "fermion_annihilation (fermionoperatorstring attribute)": [[15, "inquanto.operators.FermionOperatorString.FERMION_ANNIHILATION"]], "fermion_creation (fermionoperatorstring attribute)": [[15, "inquanto.operators.FermionOperatorString.FERMION_CREATION"]], "fermionoperator (class in inquanto.operators)": [[15, "inquanto.operators.FermionOperator"]], "fermionoperator.trotterizecoefficientslocation (class in inquanto.operators)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation"]], "fermionoperatorlist (class in inquanto.operators)": [[15, "inquanto.operators.FermionOperatorList"]], "fermionoperatorlist.compressscalarsbehavior (class in inquanto.operators)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior"]], "fermionoperatorlist.factorycoefficientslocation (class in inquanto.operators)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation"]], "fermionoperatorstring (class in inquanto.operators)": [[15, "inquanto.operators.FermionOperatorString"]], "ignore (qubitoperatorlist.expandexponentialproductcoefficientsbehavior attribute)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.IGNORE"]], "ignore (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior attribute)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.IGNORE"]], "inner (fermionoperator.trotterizecoefficientslocation attribute)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.INNER"]], "inner (fermionoperatorlist.factorycoefficientslocation attribute)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.INNER"]], "inner (qubitoperator.trotterizecoefficientslocation attribute)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.INNER"]], "inner (qubitoperatorlist.factorycoefficientslocation attribute)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.INNER"]], "inner (symmetryoperatorfermionic.trotterizecoefficientslocation attribute)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.INNER"]], "inner (symmetryoperatorfermionicfactorized.factorycoefficientslocation attribute)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.INNER"]], "inner (symmetryoperatorpauli.trotterizecoefficientslocation attribute)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.INNER"]], "inner (symmetryoperatorpaulifactorized.factorycoefficientslocation attribute)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.INNER"]], "in_exponent (qubitoperatorlist.expandexponentialproductcoefficientsbehavior attribute)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.IN_EXPONENT"]], "in_exponent (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior attribute)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.IN_EXPONENT"]], "integraltype (class in inquanto.operators)": [[15, "inquanto.operators.IntegralType"]], "mixed (fermionoperator.trotterizecoefficientslocation attribute)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.MIXED"]], "mixed (qubitoperator.trotterizecoefficientslocation attribute)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.MIXED"]], "mixed (symmetryoperatorfermionic.trotterizecoefficientslocation attribute)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.MIXED"]], "mixed (symmetryoperatorpauli.trotterizecoefficientslocation attribute)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.MIXED"]], "only_identities_and_zero (fermionoperatorlist.compressscalarsbehavior attribute)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.ONLY_IDENTITIES_AND_ZERO"]], "only_identities_and_zero (qubitoperatorlist.compressscalarsbehavior attribute)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.ONLY_IDENTITIES_AND_ZERO"]], "only_identities_and_zero (symmetryoperatorfermionicfactorized.compressscalarsbehavior attribute)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.ONLY_IDENTITIES_AND_ZERO"]], "only_identities_and_zero (symmetryoperatorpaulifactorized.compressscalarsbehavior attribute)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.ONLY_IDENTITIES_AND_ZERO"]], "outer (fermionoperator.trotterizecoefficientslocation attribute)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.OUTER"]], "outer (fermionoperatorlist.compressscalarsbehavior attribute)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.OUTER"]], "outer (fermionoperatorlist.factorycoefficientslocation attribute)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.OUTER"]], "outer (qubitoperator.trotterizecoefficientslocation attribute)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.OUTER"]], "outer (qubitoperatorlist.compressscalarsbehavior attribute)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.OUTER"]], "outer (qubitoperatorlist.factorycoefficientslocation attribute)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.OUTER"]], "outer (symmetryoperatorfermionic.trotterizecoefficientslocation attribute)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.OUTER"]], "outer (symmetryoperatorfermionicfactorized.compressscalarsbehavior attribute)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.OUTER"]], "outer (symmetryoperatorfermionicfactorized.factorycoefficientslocation attribute)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.OUTER"]], "outer (symmetryoperatorpauli.trotterizecoefficientslocation attribute)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.OUTER"]], "outer (symmetryoperatorpaulifactorized.compressscalarsbehavior attribute)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.OUTER"]], "outer (symmetryoperatorpaulifactorized.factorycoefficientslocation attribute)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.OUTER"]], "outside_exponent (qubitoperatorlist.expandexponentialproductcoefficientsbehavior attribute)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.OUTSIDE_EXPONENT"]], "outside_exponent (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior attribute)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.OUTSIDE_EXPONENT"]], "orbitaloptimizer (class in inquanto.operators)": [[15, "inquanto.operators.OrbitalOptimizer"]], "orbitaltransformer (class in inquanto.operators)": [[15, "inquanto.operators.OrbitalTransformer"]], "qubitoperator (class in inquanto.operators)": [[15, "inquanto.operators.QubitOperator"]], "qubitoperator.trotterizecoefficientslocation (class in inquanto.operators)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation"]], "qubitoperatorlist (class in inquanto.operators)": [[15, "inquanto.operators.QubitOperatorList"]], "qubitoperatorlist.compressscalarsbehavior (class in inquanto.operators)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior"]], "qubitoperatorlist.expandexponentialproductcoefficientsbehavior (class in inquanto.operators)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior"]], "qubitoperatorlist.factorycoefficientslocation (class in inquanto.operators)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation"]], "qubitoperatorstring (class in inquanto.operators)": [[15, "inquanto.operators.QubitOperatorString"]], "restricted (integraltype attribute)": [[15, "inquanto.operators.IntegralType.RESTRICTED"]], "restricteddoublefactorizedhamiltonian (class in inquanto.operators)": [[15, "inquanto.operators.RestrictedDoubleFactorizedHamiltonian"]], "restrictedonebodyrdm (class in inquanto.operators)": [[15, "inquanto.operators.RestrictedOneBodyRDM"]], "restrictedtwobodyrdm (class in inquanto.operators)": [[15, "inquanto.operators.RestrictedTwoBodyRDM"]], "symmetryoperatorfermionic (class in inquanto.operators)": [[15, "inquanto.operators.SymmetryOperatorFermionic"]], "symmetryoperatorfermionic.trotterizecoefficientslocation (class in inquanto.operators)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation"]], "symmetryoperatorfermionicfactorized (class in inquanto.operators)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized"]], "symmetryoperatorfermionicfactorized.compressscalarsbehavior (class in inquanto.operators)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior"]], "symmetryoperatorfermionicfactorized.factorycoefficientslocation (class in inquanto.operators)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation"]], "symmetryoperatorpauli (class in inquanto.operators)": [[15, "inquanto.operators.SymmetryOperatorPauli"]], "symmetryoperatorpauli.trotterizecoefficientslocation (class in inquanto.operators)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation"]], "symmetryoperatorpaulifactorized (class in inquanto.operators)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized"]], "symmetryoperatorpaulifactorized.compressscalarsbehavior (class in inquanto.operators)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior"]], "symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior (class in inquanto.operators)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior"]], "symmetryoperatorpaulifactorized.factorycoefficientslocation (class in inquanto.operators)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation"]], "tolerance (chemistryrestrictedintegraloperator attribute)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.TOLERANCE"]], "tolerance (chemistryrestrictedintegraloperatorcompact attribute)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.TOLERANCE"]], "tolerance (chemistryunrestrictedintegraloperator attribute)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.TOLERANCE"]], "tolerance (chemistryunrestrictedintegraloperatorcompact attribute)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.TOLERANCE"]], "unrestricted (integraltype attribute)": [[15, "inquanto.operators.IntegralType.UNRESTRICTED"]], "unrestricteddoublefactorizedhamiltonian (class in inquanto.operators)": [[15, "inquanto.operators.UnrestrictedDoubleFactorizedHamiltonian"]], "unrestrictedonebodyrdm (class in inquanto.operators)": [[15, "inquanto.operators.UnrestrictedOneBodyRDM"]], "unrestrictedtwobodyrdm (class in inquanto.operators)": [[15, "inquanto.operators.UnrestrictedTwoBodyRDM"]], "xdfcoretensor (class in inquanto.operators)": [[15, "inquanto.operators.XDFCoreTensor"]], "all_nontrivial_qubits (qubitoperator property)": [[15, "inquanto.operators.QubitOperator.all_nontrivial_qubits"]], "all_nontrivial_qubits (qubitoperatorlist property)": [[15, "inquanto.operators.QubitOperatorList.all_nontrivial_qubits"]], "all_nontrivial_qubits (qubitoperatorstring property)": [[15, "inquanto.operators.QubitOperatorString.all_nontrivial_qubits"]], "all_nontrivial_qubits (symmetryoperatorpauli property)": [[15, "inquanto.operators.SymmetryOperatorPauli.all_nontrivial_qubits"]], "all_nontrivial_qubits (symmetryoperatorpaulifactorized property)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.all_nontrivial_qubits"]], "all_qubits (qubitoperator property)": [[15, "inquanto.operators.QubitOperator.all_qubits"]], "all_qubits (qubitoperatorlist property)": [[15, "inquanto.operators.QubitOperatorList.all_qubits"]], "all_qubits (symmetryoperatorpauli property)": [[15, "inquanto.operators.SymmetryOperatorPauli.all_qubits"]], "all_qubits (symmetryoperatorpaulifactorized property)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.all_qubits"]], "anticommutator() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.anticommutator"]], "anticommutator() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.anticommutator"]], "anticommutator() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.anticommutator"]], "anticommutes_with() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.anticommutes_with"]], "anticommutes_with() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.anticommutes_with"]], "anticommutes_with() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.anticommutes_with"]], "antihermitian_part() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.antihermitian_part"]], "antihermitian_part() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.antihermitian_part"]], "apply_bra() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.apply_bra"]], "apply_bra() (fermionoperatorstring method)": [[15, "inquanto.operators.FermionOperatorString.apply_bra"]], "apply_bra() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.apply_bra"]], "apply_ket() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.apply_ket"]], "apply_ket() (fermionoperatorstring method)": [[15, "inquanto.operators.FermionOperatorString.apply_ket"]], "apply_ket() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.apply_ket"]], "apply_state() (fermionoperatorstring method)": [[15, "inquanto.operators.FermionOperatorString.apply_state"]], "approx_equal() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.approx_equal"]], "approx_equal() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.approx_equal"]], "approx_equal() (chemistryunrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.approx_equal"]], "approx_equal() (chemistryunrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.approx_equal"]], "approx_equal_to() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.approx_equal_to"]], "approx_equal_to() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.approx_equal_to"]], "approx_equal_to() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.approx_equal_to"]], "approx_equal_to() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.approx_equal_to"]], "approx_equal_to_by_random_subs() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.approx_equal_to_by_random_subs"]], "approx_equal_to_by_random_subs() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.approx_equal_to_by_random_subs"]], "approx_equal_to_by_random_subs() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.approx_equal_to_by_random_subs"]], "approx_equal_to_by_random_subs() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.approx_equal_to_by_random_subs"]], "as_scalar() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.as_scalar"]], "as_scalar() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.as_scalar"]], "as_scalar() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.as_scalar"]], "as_scalar() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.as_scalar"]], "astype() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.astype"]], "astype() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.astype"]], "astype() (compacttwobodyintegralss4 method)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS4.astype"]], "astype() (compacttwobodyintegralss8 method)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS8.astype"]], "build_subset() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.build_subset"]], "build_subset() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.build_subset"]], "ca() (fermionoperator class method)": [[15, "inquanto.operators.FermionOperator.ca"]], "ca() (symmetryoperatorfermionic class method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.ca"]], "caca() (fermionoperator class method)": [[15, "inquanto.operators.FermionOperator.caca"]], "caca() (symmetryoperatorfermionic class method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.caca"]], "capitalize() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.capitalize"]], "capitalize() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.capitalize"]], "capitalize() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.capitalize"]], "capitalize() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.capitalize"]], "capitalize() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.capitalize"]], "capitalize() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.capitalize"]], "capitalize() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.capitalize"]], "capitalize() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.capitalize"]], "capitalize() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.capitalize"]], "capitalize() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.capitalize"]], "capitalize() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.capitalize"]], "capitalize() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.capitalize"]], "capitalize() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.capitalize"]], "capitalize() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.capitalize"]], "casefold() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.casefold"]], "casefold() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.casefold"]], "casefold() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.casefold"]], "casefold() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.casefold"]], "casefold() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.casefold"]], "casefold() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.casefold"]], "casefold() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.casefold"]], "casefold() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.casefold"]], "casefold() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.casefold"]], "casefold() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.casefold"]], "casefold() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.casefold"]], "casefold() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.casefold"]], "casefold() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.casefold"]], "casefold() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.casefold"]], "ccaa() (fermionoperator class method)": [[15, "inquanto.operators.FermionOperator.ccaa"]], "ccaa() (symmetryoperatorfermionic class method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.ccaa"]], "center() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.center"]], "center() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.center"]], "center() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.center"]], "center() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.center"]], "center() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.center"]], "center() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.center"]], "center() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.center"]], "center() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.center"]], "center() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.center"]], "center() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.center"]], "center() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.center"]], "center() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.center"]], "center() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.center"]], "center() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.center"]], "check_s4_symmetry() (compacttwobodyintegralss4 static method)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS4.check_s4_symmetry"]], "check_s8_symmetry() (compacttwobodyintegralss8 static method)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS8.check_s8_symmetry"]], "clone() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.clone"]], "clone() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.clone"]], "clone() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.clone"]], "clone() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.clone"]], "clone() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.clone"]], "clone() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.clone"]], "clone() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.clone"]], "clone() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.clone"]], "coefficients (fermionoperator property)": [[15, "inquanto.operators.FermionOperator.coefficients"]], "coefficients (qubitoperator property)": [[15, "inquanto.operators.QubitOperator.coefficients"]], "coefficients (symmetryoperatorfermionic property)": [[15, "inquanto.operators.SymmetryOperatorFermionic.coefficients"]], "coefficients (symmetryoperatorpauli property)": [[15, "inquanto.operators.SymmetryOperatorPauli.coefficients"]], "collapse_as_linear_combination() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.collapse_as_linear_combination"]], "collapse_as_linear_combination() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.collapse_as_linear_combination"]], "collapse_as_linear_combination() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.collapse_as_linear_combination"]], "collapse_as_linear_combination() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.collapse_as_linear_combination"]], "collapse_as_product() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.collapse_as_product"]], "collapse_as_product() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.collapse_as_product"]], "collapse_as_product() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.collapse_as_product"]], "collapse_as_product() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.collapse_as_product"]], "commutator() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.commutator"]], "commutator() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.commutator"]], "commutator() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.commutator"]], "commutator() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.commutator"]], "commutator() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.commutator"]], "commutes_with() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.commutes_with"]], "commutes_with() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.commutes_with"]], "commutes_with() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.commutes_with"]], "commutes_with() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.commutes_with"]], "commutes_with() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.commutes_with"]], "compatibility_matrix() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.compatibility_matrix"]], "compatibility_matrix() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.compatibility_matrix"]], "compress() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.compress"]], "compress() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.compress"]], "compress() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.compress"]], "compress() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.compress"]], "compress() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.compress"]], "compress_scalars_as_product() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.compress_scalars_as_product"]], "compress_scalars_as_product() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.compress_scalars_as_product"]], "compress_scalars_as_product() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.compress_scalars_as_product"]], "compress_scalars_as_product() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.compress_scalars_as_product"]], "compute_jacobian() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.compute_jacobian"]], "compute_jacobian() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.compute_jacobian"]], "compute_unitary() (orbitaloptimizer static method)": [[15, "inquanto.operators.OrbitalOptimizer.compute_unitary"]], "compute_unitary() (orbitaltransformer static method)": [[15, "inquanto.operators.OrbitalTransformer.compute_unitary"]], "constant() (fermionoperator class method)": [[15, "inquanto.operators.FermionOperator.constant"]], "constant() (symmetryoperatorfermionic class method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.constant"]], "construct_random_variables() (orbitaloptimizer method)": [[15, "inquanto.operators.OrbitalOptimizer.construct_random_variables"]], "copy() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.copy"]], "copy() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.copy"]], "copy() (chemistryunrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.copy"]], "copy() (chemistryunrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.copy"]], "copy() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.copy"]], "copy() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.copy"]], "copy() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.copy"]], "copy() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.copy"]], "copy() (restrictedonebodyrdm method)": [[15, "inquanto.operators.RestrictedOneBodyRDM.copy"]], "copy() (restrictedtwobodyrdm method)": [[15, "inquanto.operators.RestrictedTwoBodyRDM.copy"]], "copy() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.copy"]], "copy() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.copy"]], "copy() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.copy"]], "copy() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.copy"]], "copy() (unrestrictedonebodyrdm method)": [[15, "inquanto.operators.UnrestrictedOneBodyRDM.copy"]], "copy() (unrestrictedtwobodyrdm method)": [[15, "inquanto.operators.UnrestrictedTwoBodyRDM.copy"]], "count() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.count"]], "count() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.count"]], "count() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.count"]], "count() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.count"]], "count() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.count"]], "count() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.count"]], "count() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.count"]], "count() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.count"]], "count() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.count"]], "count() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.count"]], "count() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.count"]], "count() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.count"]], "count() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.count"]], "count() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.count"]], "dagger() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.dagger"]], "dagger() (fermionoperatorstring method)": [[15, "inquanto.operators.FermionOperatorString.dagger"]], "dagger() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.dagger"]], "dagger() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.dagger"]], "dagger() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.dagger"]], "df() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.df"]], "df() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.df"]], "df() (chemistryunrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.df"]], "df() (chemistryunrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.df"]], "df() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.df"]], "df() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.df"]], "df() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.df"]], "df() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.df"]], "df() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.df"]], "df() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.df"]], "df() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.df"]], "df() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.df"]], "dot_state() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.dot_state"]], "dot_state() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.dot_state"]], "dot_state() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.dot_state"]], "dot_state_as_linear_combination() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.dot_state_as_linear_combination"]], "dot_state_as_linear_combination() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.dot_state_as_linear_combination"]], "dot_state_as_product() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.dot_state_as_product"]], "dot_state_as_product() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.dot_state_as_product"]], "dot_state_ndarray() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.dot_state_ndarray"]], "dot_state_ndarray() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.dot_state_ndarray"]], "double_factorize() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.double_factorize"]], "double_factorize() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.double_factorize"]], "double_factorize() (chemistryunrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.double_factorize"]], "double_factorize() (chemistryunrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.double_factorize"]], "dtype (chemistryrestrictedintegraloperator property)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.dtype"]], "dtype (chemistryrestrictedintegraloperatorcompact property)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.dtype"]], "dtype (compacttwobodyintegralss4 property)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS4.dtype"]], "dtype (compacttwobodyintegralss8 property)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS8.dtype"]], "effective_potential() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.effective_potential"]], "effective_potential() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.effective_potential"]], "effective_potential() (chemistryunrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.effective_potential"]], "effective_potential() (chemistryunrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.effective_potential"]], "effective_potential_spin() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.effective_potential_spin"]], "effective_potential_spin() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.effective_potential_spin"]], "eigenspectrum() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.eigenspectrum"]], "eigenspectrum() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.eigenspectrum"]], "empty() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.empty"]], "empty() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.empty"]], "empty() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.empty"]], "empty() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.empty"]], "empty() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.empty"]], "empty() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.empty"]], "empty() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.empty"]], "empty() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.empty"]], "encode() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.encode"]], "encode() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.encode"]], "encode() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.encode"]], "encode() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.encode"]], "encode() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.encode"]], "encode() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.encode"]], "encode() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.encode"]], "encode() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.encode"]], "encode() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.encode"]], "encode() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.encode"]], "encode() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.encode"]], "encode() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.encode"]], "encode() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.encode"]], "encode() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.encode"]], "endswith() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.endswith"]], "endswith() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.endswith"]], "endswith() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.endswith"]], "endswith() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.endswith"]], "endswith() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.endswith"]], "endswith() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.endswith"]], "endswith() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.endswith"]], "endswith() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.endswith"]], "endswith() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.endswith"]], "endswith() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.endswith"]], "endswith() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.endswith"]], "endswith() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.endswith"]], "endswith() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.endswith"]], "endswith() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.endswith"]], "energy() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.energy"]], "energy() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.energy"]], "energy() (chemistryunrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.energy"]], "energy() (chemistryunrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.energy"]], "energy_electron_mean_field() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.energy_electron_mean_field"]], "energy_electron_mean_field() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.energy_electron_mean_field"]], "energy_electron_mean_field() (chemistryunrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.energy_electron_mean_field"]], "energy_electron_mean_field() (chemistryunrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.energy_electron_mean_field"]], "ensure_hermitian() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.ensure_hermitian"]], "ensure_hermitian() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.ensure_hermitian"]], "equality_matrix() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.equality_matrix"]], "equality_matrix() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.equality_matrix"]], "evalf() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.evalf"]], "evalf() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.evalf"]], "evalf() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.evalf"]], "evalf() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.evalf"]], "evalf() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.evalf"]], "evalf() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.evalf"]], "evalf() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.evalf"]], "evalf() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.evalf"]], "expand_exponential_product_commuting_operators() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.expand_exponential_product_commuting_operators"]], "expand_exponential_product_commuting_operators() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.expand_exponential_product_commuting_operators"]], "expandtabs() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.expandtabs"]], "expandtabs() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.expandtabs"]], "expandtabs() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.expandtabs"]], "expandtabs() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.expandtabs"]], "expandtabs() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.expandtabs"]], "expandtabs() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.expandtabs"]], "expandtabs() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.expandtabs"]], "expandtabs() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.expandtabs"]], "expandtabs() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.expandtabs"]], "expandtabs() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.expandtabs"]], "expandtabs() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.expandtabs"]], "expandtabs() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.expandtabs"]], "expandtabs() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.expandtabs"]], "expandtabs() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.expandtabs"]], "exponentiate_commuting_operator() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.exponentiate_commuting_operator"]], "exponentiate_commuting_operator() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.exponentiate_commuting_operator"]], "exponentiate_single_term() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.exponentiate_single_term"]], "exponentiate_single_term() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.exponentiate_single_term"]], "fermion_operators() (restricteddoublefactorizedhamiltonian method)": [[15, "inquanto.operators.RestrictedDoubleFactorizedHamiltonian.fermion_operators"]], "fermion_operators() (unrestricteddoublefactorizedhamiltonian method)": [[15, "inquanto.operators.UnrestrictedDoubleFactorizedHamiltonian.fermion_operators"]], "find() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.find"]], "find() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.find"]], "find() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.find"]], "find() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.find"]], "find() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.find"]], "find() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.find"]], "find() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.find"]], "find() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.find"]], "find() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.find"]], "find() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.find"]], "find() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.find"]], "find() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.find"]], "find() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.find"]], "find() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.find"]], "format() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.format"]], "format() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.format"]], "format() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.format"]], "format() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.format"]], "format() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.format"]], "format() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.format"]], "format() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.format"]], "format() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.format"]], "format() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.format"]], "format() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.format"]], "format() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.format"]], "format() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.format"]], "format() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.format"]], "format() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.format"]], "format_map() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.format_map"]], "format_map() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.format_map"]], "format_map() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.format_map"]], "format_map() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.format_map"]], "format_map() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.format_map"]], "format_map() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.format_map"]], "format_map() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.format_map"]], "format_map() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.format_map"]], "format_map() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.format_map"]], "format_map() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.format_map"]], "format_map() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.format_map"]], "format_map() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.format_map"]], "format_map() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.format_map"]], "format_map() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.format_map"]], "free_symbols() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.free_symbols"]], "free_symbols() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.free_symbols"]], "free_symbols() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.free_symbols"]], "free_symbols() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.free_symbols"]], "free_symbols() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.free_symbols"]], "free_symbols() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.free_symbols"]], "free_symbols() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.free_symbols"]], "free_symbols() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.free_symbols"]], "free_symbols_ordered() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.free_symbols_ordered"]], "free_symbols_ordered() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.free_symbols_ordered"]], "free_symbols_ordered() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.free_symbols_ordered"]], "free_symbols_ordered() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.free_symbols_ordered"]], "free_symbols_ordered() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.free_symbols_ordered"]], "free_symbols_ordered() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.free_symbols_ordered"]], "free_symbols_ordered() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.free_symbols_ordered"]], "free_symbols_ordered() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.free_symbols_ordered"]], "freeze() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.freeze"]], "freeze() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.freeze"]], "from_fermionoperator() (chemistryrestrictedintegraloperator class method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.from_FermionOperator"]], "from_fermionoperator() (chemistryrestrictedintegraloperatorcompact class method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.from_FermionOperator"]], "from_fermionoperator() (chemistryunrestrictedintegraloperator class method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.from_FermionOperator"]], "from_fermionoperator() (chemistryunrestrictedintegraloperatorcompact class method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.from_FermionOperator"]], "from_operator() (fermionoperatorlist class method)": [[15, "inquanto.operators.FermionOperatorList.from_Operator"]], "from_operator() (qubitoperatorlist class method)": [[15, "inquanto.operators.QubitOperatorList.from_Operator"]], "from_operator() (symmetryoperatorfermionicfactorized class method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.from_Operator"]], "from_operator() (symmetryoperatorpaulifactorized class method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.from_Operator"]], "from_qubitpaulioperator() (qubitoperator class method)": [[15, "inquanto.operators.QubitOperator.from_QubitPauliOperator"]], "from_qubitpaulioperator() (symmetryoperatorpauli class method)": [[15, "inquanto.operators.SymmetryOperatorPauli.from_QubitPauliOperator"]], "from_qubitpaulistring() (qubitoperatorstring class method)": [[15, "inquanto.operators.QubitOperatorString.from_QubitPauliString"]], "from_fcidump() (chemistryrestrictedintegraloperator static method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.from_fcidump"]], "from_fcidump() (chemistryunrestrictedintegraloperator static method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.from_fcidump"]], "from_list() (fermionoperator class method)": [[15, "inquanto.operators.FermionOperator.from_list"]], "from_list() (qubitoperatorlist class method)": [[15, "inquanto.operators.QubitOperatorList.from_list"]], "from_list() (qubitoperatorstring class method)": [[15, "inquanto.operators.QubitOperatorString.from_list"]], "from_list() (symmetryoperatorfermionic class method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.from_list"]], "from_list() (symmetryoperatorpaulifactorized class method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.from_list"]], "from_serializable() (qubitoperator class method)": [[15, "inquanto.operators.QubitOperator.from_serializable"]], "from_serializable() (symmetryoperatorpauli class method)": [[15, "inquanto.operators.SymmetryOperatorPauli.from_serializable"]], "from_string() (fermionoperator class method)": [[15, "inquanto.operators.FermionOperator.from_string"]], "from_string() (fermionoperatorlist class method)": [[15, "inquanto.operators.FermionOperatorList.from_string"]], "from_string() (fermionoperatorstring class method)": [[15, "inquanto.operators.FermionOperatorString.from_string"]], "from_string() (qubitoperator class method)": [[15, "inquanto.operators.QubitOperator.from_string"]], "from_string() (qubitoperatorlist class method)": [[15, "inquanto.operators.QubitOperatorList.from_string"]], "from_string() (qubitoperatorstring class method)": [[15, "inquanto.operators.QubitOperatorString.from_string"]], "from_string() (symmetryoperatorfermionic class method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.from_string"]], "from_string() (symmetryoperatorfermionicfactorized class method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.from_string"]], "from_string() (symmetryoperatorpauli class method)": [[15, "inquanto.operators.SymmetryOperatorPauli.from_string"]], "from_string() (symmetryoperatorpaulifactorized class method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.from_string"]], "from_symplectic_row() (qubitoperatorstring class method)": [[15, "inquanto.operators.QubitOperatorString.from_symplectic_row"]], "from_tuple() (fermionoperator class method)": [[15, "inquanto.operators.FermionOperator.from_tuple"]], "from_tuple() (qubitoperatorstring class method)": [[15, "inquanto.operators.QubitOperatorString.from_tuple"]], "from_tuple() (symmetryoperatorfermionic class method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.from_tuple"]], "from_uncompacted_integrals() (compacttwobodyintegralss4 class method)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS4.from_uncompacted_integrals"]], "from_uncompacted_integrals() (compacttwobodyintegralss8 class method)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS8.from_uncompacted_integrals"]], "generate_report() (orbitaloptimizer method)": [[15, "inquanto.operators.OrbitalOptimizer.generate_report"]], "get() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.get"]], "get() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.get"]], "get_block() (restrictedonebodyrdm method)": [[15, "inquanto.operators.RestrictedOneBodyRDM.get_block"]], "get_block() (unrestrictedonebodyrdm method)": [[15, "inquanto.operators.UnrestrictedOneBodyRDM.get_block"]], "get_element() (diagonalizedonebodyintegrals method)": [[15, "inquanto.operators.DiagonalizedOneBodyIntegrals.get_element"]], "get_element() (doublefactorizedtwobodyintegrals method)": [[15, "inquanto.operators.DoubleFactorizedTwoBodyIntegrals.get_element"]], "get_element() (xdfcoretensor method)": [[15, "inquanto.operators.XDFCoreTensor.get_element"]], "get_full() (diagonalizedonebodyintegrals method)": [[15, "inquanto.operators.DiagonalizedOneBodyIntegrals.get_full"]], "get_full() (doublefactorizedtwobodyintegrals method)": [[15, "inquanto.operators.DoubleFactorizedTwoBodyIntegrals.get_full"]], "get_full() (xdfcoretensor method)": [[15, "inquanto.operators.XDFCoreTensor.get_full"]], "get_occupations() (restrictedonebodyrdm method)": [[15, "inquanto.operators.RestrictedOneBodyRDM.get_occupations"]], "get_system_specification() (fcidumprestricted method)": [[15, "inquanto.operators.FCIDumpRestricted.get_system_specification"]], "get_system_specification() (fcidumpunrestricted method)": [[15, "inquanto.operators.FCIDumpUnrestricted.get_system_specification"]], "gram_schmidt() (orbitaloptimizer static method)": [[15, "inquanto.operators.OrbitalOptimizer.gram_schmidt"]], "gram_schmidt() (orbitaltransformer static method)": [[15, "inquanto.operators.OrbitalTransformer.gram_schmidt"]], "hermitian_factorisation() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.hermitian_factorisation"]], "hermitian_factorisation() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.hermitian_factorisation"]], "hermitian_part() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.hermitian_part"]], "hermitian_part() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.hermitian_part"]], "identity() (fermionoperator class method)": [[15, "inquanto.operators.FermionOperator.identity"]], "identity() (qubitoperator class method)": [[15, "inquanto.operators.QubitOperator.identity"]], "identity() (symmetryoperatorfermionic class method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.identity"]], "identity() (symmetryoperatorpauli class method)": [[15, "inquanto.operators.SymmetryOperatorPauli.identity"]], "imag (chemistryrestrictedintegraloperator property)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.imag"]], "imag (chemistryrestrictedintegraloperatorcompact property)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.imag"]], "imag (compacttwobodyintegralss4 property)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS4.imag"]], "imag (compacttwobodyintegralss8 property)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS8.imag"]], "incompatibility_matrix() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.incompatibility_matrix"]], "incompatibility_matrix() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.incompatibility_matrix"]], "index() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.index"]], "index() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.index"]], "index() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.index"]], "index() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.index"]], "index() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.index"]], "index() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.index"]], "index() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.index"]], "index() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.index"]], "index() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.index"]], "index() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.index"]], "index() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.index"]], "index() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.index"]], "index() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.index"]], "index() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.index"]], "infer_num_spin_orbs() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.infer_num_spin_orbs"]], "infer_num_spin_orbs() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.infer_num_spin_orbs"]], "infer_num_spin_orbs() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.infer_num_spin_orbs"]], "infer_num_spin_orbs() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.infer_num_spin_orbs"]], "inquanto.operators": [[15, "module-inquanto.operators"]], "is_all_coeff_complex() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_all_coeff_complex"]], "is_all_coeff_complex() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_all_coeff_complex"]], "is_all_coeff_complex() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_all_coeff_complex"]], "is_all_coeff_complex() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_all_coeff_complex"]], "is_all_coeff_imag() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_all_coeff_imag"]], "is_all_coeff_imag() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_all_coeff_imag"]], "is_all_coeff_imag() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_all_coeff_imag"]], "is_all_coeff_imag() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_all_coeff_imag"]], "is_all_coeff_real() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_all_coeff_real"]], "is_all_coeff_real() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_all_coeff_real"]], "is_all_coeff_real() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_all_coeff_real"]], "is_all_coeff_real() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_all_coeff_real"]], "is_all_coeff_symbolic() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_all_coeff_symbolic"]], "is_all_coeff_symbolic() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_all_coeff_symbolic"]], "is_all_coeff_symbolic() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_all_coeff_symbolic"]], "is_all_coeff_symbolic() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_all_coeff_symbolic"]], "is_antihermitian() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_antihermitian"]], "is_antihermitian() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_antihermitian"]], "is_antihermitian() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_antihermitian"]], "is_antihermitian() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_antihermitian"]], "is_any_coeff_complex() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_any_coeff_complex"]], "is_any_coeff_complex() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_any_coeff_complex"]], "is_any_coeff_complex() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_any_coeff_complex"]], "is_any_coeff_complex() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_any_coeff_complex"]], "is_any_coeff_imag() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_any_coeff_imag"]], "is_any_coeff_imag() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_any_coeff_imag"]], "is_any_coeff_imag() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_any_coeff_imag"]], "is_any_coeff_imag() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_any_coeff_imag"]], "is_any_coeff_real() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_any_coeff_real"]], "is_any_coeff_real() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_any_coeff_real"]], "is_any_coeff_real() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_any_coeff_real"]], "is_any_coeff_real() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_any_coeff_real"]], "is_any_coeff_symbolic() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_any_coeff_symbolic"]], "is_any_coeff_symbolic() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_any_coeff_symbolic"]], "is_any_coeff_symbolic() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_any_coeff_symbolic"]], "is_any_coeff_symbolic() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_any_coeff_symbolic"]], "is_commuting_operator() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_commuting_operator"]], "is_commuting_operator() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_commuting_operator"]], "is_commuting_operator() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_commuting_operator"]], "is_commuting_operator() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_commuting_operator"]], "is_empty() (fermionoperatorstring method)": [[15, "inquanto.operators.FermionOperatorString.is_empty"]], "is_empty() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.is_empty"]], "is_empty() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.is_empty"]], "is_hermitian() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_hermitian"]], "is_hermitian() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_hermitian"]], "is_hermitian() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_hermitian"]], "is_hermitian() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_hermitian"]], "is_hermitian_coeff() (qubitoperator static method)": [[15, "inquanto.operators.QubitOperator.is_hermitian_coeff"]], "is_hermitian_coeff() (symmetryoperatorpauli static method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_hermitian_coeff"]], "is_normal_ordered() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_normal_ordered"]], "is_normal_ordered() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_normal_ordered"]], "is_normalized() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_normalized"]], "is_normalized() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_normalized"]], "is_normalized() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_normalized"]], "is_normalized() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_normalized"]], "is_parallel_with() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_parallel_with"]], "is_parallel_with() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_parallel_with"]], "is_parallel_with() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_parallel_with"]], "is_parallel_with() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_parallel_with"]], "is_particle_conserving() (fermionoperatorstring method)": [[15, "inquanto.operators.FermionOperatorString.is_particle_conserving"]], "is_self_inverse() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_self_inverse"]], "is_self_inverse() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_self_inverse"]], "is_self_inverse() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_self_inverse"]], "is_self_inverse() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_self_inverse"]], "is_symmetry_of() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_symmetry_of"]], "is_symmetry_of() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.is_symmetry_of"]], "is_symmetry_of() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_symmetry_of"]], "is_symmetry_of() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.is_symmetry_of"]], "is_two_body_number_conserving() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_two_body_number_conserving"]], "is_two_body_number_conserving() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_two_body_number_conserving"]], "is_unit_1norm() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_unit_1norm"]], "is_unit_1norm() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_unit_1norm"]], "is_unit_1norm() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_unit_1norm"]], "is_unit_1norm() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_unit_1norm"]], "is_unit_2norm() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_unit_2norm"]], "is_unit_2norm() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_unit_2norm"]], "is_unit_2norm() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_unit_2norm"]], "is_unit_2norm() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_unit_2norm"]], "is_unit_norm() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_unit_norm"]], "is_unit_norm() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_unit_norm"]], "is_unit_norm() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_unit_norm"]], "is_unit_norm() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_unit_norm"]], "is_unitary() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.is_unitary"]], "is_unitary() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.is_unitary"]], "is_unitary() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.is_unitary"]], "is_unitary() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.is_unitary"]], "isalnum() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.isalnum"]], "isalnum() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.isalnum"]], "isalnum() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.isalnum"]], "isalnum() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.isalnum"]], "isalnum() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.isalnum"]], "isalnum() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.isalnum"]], "isalnum() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.isalnum"]], "isalnum() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.isalnum"]], "isalnum() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.isalnum"]], "isalnum() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.isalnum"]], "isalnum() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.isalnum"]], "isalnum() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.isalnum"]], "isalnum() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.isalnum"]], "isalnum() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.isalnum"]], "isalpha() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.isalpha"]], "isalpha() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.isalpha"]], "isalpha() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.isalpha"]], "isalpha() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.isalpha"]], "isalpha() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.isalpha"]], "isalpha() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.isalpha"]], "isalpha() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.isalpha"]], "isalpha() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.isalpha"]], "isalpha() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.isalpha"]], "isalpha() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.isalpha"]], "isalpha() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.isalpha"]], "isalpha() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.isalpha"]], "isalpha() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.isalpha"]], "isalpha() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.isalpha"]], "isascii() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.isascii"]], "isascii() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.isascii"]], "isascii() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.isascii"]], "isascii() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.isascii"]], "isascii() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.isascii"]], "isascii() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.isascii"]], "isascii() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.isascii"]], "isascii() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.isascii"]], "isascii() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.isascii"]], "isascii() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.isascii"]], "isascii() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.isascii"]], "isascii() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.isascii"]], "isascii() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.isascii"]], "isascii() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.isascii"]], "isdecimal() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.isdecimal"]], "isdecimal() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.isdecimal"]], "isdecimal() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.isdecimal"]], "isdecimal() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.isdecimal"]], "isdecimal() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.isdecimal"]], "isdecimal() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.isdecimal"]], "isdecimal() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.isdecimal"]], "isdecimal() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.isdecimal"]], "isdecimal() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.isdecimal"]], "isdecimal() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.isdecimal"]], "isdecimal() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.isdecimal"]], "isdecimal() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.isdecimal"]], "isdecimal() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.isdecimal"]], "isdecimal() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.isdecimal"]], "isdigit() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.isdigit"]], "isdigit() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.isdigit"]], "isdigit() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.isdigit"]], "isdigit() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.isdigit"]], "isdigit() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.isdigit"]], "isdigit() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.isdigit"]], "isdigit() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.isdigit"]], "isdigit() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.isdigit"]], "isdigit() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.isdigit"]], "isdigit() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.isdigit"]], "isdigit() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.isdigit"]], "isdigit() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.isdigit"]], "isdigit() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.isdigit"]], "isdigit() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.isdigit"]], "isidentifier() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.isidentifier"]], "isidentifier() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.isidentifier"]], "isidentifier() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.isidentifier"]], "isidentifier() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.isidentifier"]], "isidentifier() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.isidentifier"]], "isidentifier() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.isidentifier"]], "isidentifier() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.isidentifier"]], "isidentifier() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.isidentifier"]], "isidentifier() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.isidentifier"]], "isidentifier() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.isidentifier"]], "isidentifier() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.isidentifier"]], "isidentifier() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.isidentifier"]], "isidentifier() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.isidentifier"]], "isidentifier() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.isidentifier"]], "islower() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.islower"]], "islower() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.islower"]], "islower() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.islower"]], "islower() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.islower"]], "islower() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.islower"]], "islower() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.islower"]], "islower() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.islower"]], "islower() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.islower"]], "islower() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.islower"]], "islower() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.islower"]], "islower() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.islower"]], "islower() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.islower"]], "islower() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.islower"]], "islower() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.islower"]], "isnumeric() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.isnumeric"]], "isnumeric() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.isnumeric"]], "isnumeric() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.isnumeric"]], "isnumeric() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.isnumeric"]], "isnumeric() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.isnumeric"]], "isnumeric() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.isnumeric"]], "isnumeric() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.isnumeric"]], "isnumeric() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.isnumeric"]], "isnumeric() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.isnumeric"]], "isnumeric() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.isnumeric"]], "isnumeric() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.isnumeric"]], "isnumeric() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.isnumeric"]], "isnumeric() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.isnumeric"]], "isnumeric() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.isnumeric"]], "isprintable() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.isprintable"]], "isprintable() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.isprintable"]], "isprintable() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.isprintable"]], "isprintable() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.isprintable"]], "isprintable() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.isprintable"]], "isprintable() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.isprintable"]], "isprintable() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.isprintable"]], "isprintable() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.isprintable"]], "isprintable() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.isprintable"]], "isprintable() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.isprintable"]], "isprintable() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.isprintable"]], "isprintable() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.isprintable"]], "isprintable() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.isprintable"]], "isprintable() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.isprintable"]], "isspace() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.isspace"]], "isspace() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.isspace"]], "isspace() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.isspace"]], "isspace() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.isspace"]], "isspace() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.isspace"]], "isspace() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.isspace"]], "isspace() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.isspace"]], "isspace() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.isspace"]], "isspace() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.isspace"]], "isspace() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.isspace"]], "isspace() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.isspace"]], "isspace() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.isspace"]], "isspace() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.isspace"]], "isspace() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.isspace"]], "istitle() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.istitle"]], "istitle() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.istitle"]], "istitle() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.istitle"]], "istitle() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.istitle"]], "istitle() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.istitle"]], "istitle() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.istitle"]], "istitle() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.istitle"]], "istitle() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.istitle"]], "istitle() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.istitle"]], "istitle() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.istitle"]], "istitle() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.istitle"]], "istitle() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.istitle"]], "istitle() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.istitle"]], "istitle() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.istitle"]], "isupper() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.isupper"]], "isupper() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.isupper"]], "isupper() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.isupper"]], "isupper() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.isupper"]], "isupper() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.isupper"]], "isupper() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.isupper"]], "isupper() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.isupper"]], "isupper() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.isupper"]], "isupper() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.isupper"]], "isupper() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.isupper"]], "isupper() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.isupper"]], "isupper() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.isupper"]], "isupper() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.isupper"]], "isupper() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.isupper"]], "items() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.items"]], "items() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.items"]], "items() (chemistryunrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.items"]], "items() (chemistryunrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.items"]], "items() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.items"]], "items() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.items"]], "items() (fermionoperatorstring method)": [[15, "inquanto.operators.FermionOperatorString.items"]], "items() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.items"]], "items() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.items"]], "items() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.items"]], "items() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.items"]], "items() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.items"]], "items() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.items"]], "join() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.join"]], "join() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.join"]], "join() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.join"]], "join() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.join"]], "join() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.join"]], "join() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.join"]], "join() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.join"]], "join() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.join"]], "join() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.join"]], "join() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.join"]], "join() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.join"]], "join() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.join"]], "join() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.join"]], "join() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.join"]], "key_from_str() (fermionoperator static method)": [[15, "inquanto.operators.FermionOperator.key_from_str"]], "key_from_str() (qubitoperator static method)": [[15, "inquanto.operators.QubitOperator.key_from_str"]], "key_from_str() (symmetryoperatorfermionic static method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.key_from_str"]], "key_from_str() (symmetryoperatorpauli static method)": [[15, "inquanto.operators.SymmetryOperatorPauli.key_from_str"]], "list_class (fermionoperator attribute)": [[15, "inquanto.operators.FermionOperator.list_class"]], "list_class (qubitoperator attribute)": [[15, "inquanto.operators.QubitOperator.list_class"]], "list_class (symmetryoperatorfermionic attribute)": [[15, "inquanto.operators.SymmetryOperatorFermionic.list_class"]], "list_class (symmetryoperatorpauli attribute)": [[15, "inquanto.operators.SymmetryOperatorPauli.list_class"]], "ljust() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.ljust"]], "ljust() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.ljust"]], "ljust() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.ljust"]], "ljust() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.ljust"]], "ljust() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.ljust"]], "ljust() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.ljust"]], "ljust() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.ljust"]], "ljust() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.ljust"]], "ljust() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.ljust"]], "ljust() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.ljust"]], "ljust() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.ljust"]], "ljust() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.ljust"]], "ljust() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.ljust"]], "ljust() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.ljust"]], "load() (fcidumprestricted method)": [[15, "inquanto.operators.FCIDumpRestricted.load"]], "load() (fcidumpunrestricted method)": [[15, "inquanto.operators.FCIDumpUnrestricted.load"]], "load_h5() (chemistryrestrictedintegraloperator class method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.load_h5"]], "load_h5() (chemistryrestrictedintegraloperatorcompact class method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.load_h5"]], "load_h5() (chemistryunrestrictedintegraloperator class method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.load_h5"]], "load_h5() (chemistryunrestrictedintegraloperatorcompact class method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.load_h5"]], "load_h5() (restrictedonebodyrdm class method)": [[15, "inquanto.operators.RestrictedOneBodyRDM.load_h5"]], "load_h5() (restrictedtwobodyrdm class method)": [[15, "inquanto.operators.RestrictedTwoBodyRDM.load_h5"]], "load_h5() (unrestrictedonebodyrdm class method)": [[15, "inquanto.operators.UnrestrictedOneBodyRDM.load_h5"]], "load_h5() (unrestrictedtwobodyrdm class method)": [[15, "inquanto.operators.UnrestrictedTwoBodyRDM.load_h5"]], "lower() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.lower"]], "lower() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.lower"]], "lower() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.lower"]], "lower() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.lower"]], "lower() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.lower"]], "lower() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.lower"]], "lower() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.lower"]], "lower() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.lower"]], "lower() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.lower"]], "lower() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.lower"]], "lower() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.lower"]], "lower() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.lower"]], "lower() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.lower"]], "lower() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.lower"]], "lstrip() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.lstrip"]], "lstrip() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.lstrip"]], "lstrip() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.lstrip"]], "lstrip() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.lstrip"]], "lstrip() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.lstrip"]], "lstrip() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.lstrip"]], "lstrip() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.lstrip"]], "lstrip() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.lstrip"]], "lstrip() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.lstrip"]], "lstrip() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.lstrip"]], "lstrip() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.lstrip"]], "lstrip() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.lstrip"]], "lstrip() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.lstrip"]], "lstrip() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.lstrip"]], "make_hashable() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.make_hashable"]], "make_hashable() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.make_hashable"]], "make_hashable() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.make_hashable"]], "make_hashable() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.make_hashable"]], "make_hashable() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.make_hashable"]], "make_hashable() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.make_hashable"]], "make_hashable() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.make_hashable"]], "make_hashable() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.make_hashable"]], "maketrans() (fermionoperator.trotterizecoefficientslocation static method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.maketrans"]], "maketrans() (fermionoperatorlist.compressscalarsbehavior static method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.maketrans"]], "maketrans() (fermionoperatorlist.factorycoefficientslocation static method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.maketrans"]], "maketrans() (qubitoperator.trotterizecoefficientslocation static method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.maketrans"]], "maketrans() (qubitoperatorlist.compressscalarsbehavior static method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.maketrans"]], "maketrans() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior static method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.maketrans"]], "maketrans() (qubitoperatorlist.factorycoefficientslocation static method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.maketrans"]], "maketrans() (symmetryoperatorfermionic.trotterizecoefficientslocation static method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.maketrans"]], "maketrans() (symmetryoperatorfermionicfactorized.compressscalarsbehavior static method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.maketrans"]], "maketrans() (symmetryoperatorfermionicfactorized.factorycoefficientslocation static method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.maketrans"]], "maketrans() (symmetryoperatorpauli.trotterizecoefficientslocation static method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.maketrans"]], "maketrans() (symmetryoperatorpaulifactorized.compressscalarsbehavior static method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.maketrans"]], "maketrans() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior static method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.maketrans"]], "maketrans() (symmetryoperatorpaulifactorized.factorycoefficientslocation static method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.maketrans"]], "map (qubitoperatorstring property)": [[15, "inquanto.operators.QubitOperatorString.map"]], "map() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.map"]], "map() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.map"]], "map() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.map"]], "map() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.map"]], "map() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.map"]], "map() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.map"]], "map() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.map"]], "map() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.map"]], "map_variables_to_rotation_matrix() (orbitaloptimizer method)": [[15, "inquanto.operators.OrbitalOptimizer.map_variables_to_rotation_matrix"]], "map_variables_to_skew_matrix() (orbitaloptimizer method)": [[15, "inquanto.operators.OrbitalOptimizer.map_variables_to_skew_matrix"]], "mean_field_rdm2() (restrictedonebodyrdm method)": [[15, "inquanto.operators.RestrictedOneBodyRDM.mean_field_rdm2"]], "mean_field_rdm2() (unrestrictedonebodyrdm method)": [[15, "inquanto.operators.UnrestrictedOneBodyRDM.mean_field_rdm2"]], "n() (fermionoperator class method)": [[15, "inquanto.operators.FermionOperator.n"]], "n() (symmetryoperatorfermionic class method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.n"]], "n_orb (diagonalizedonebodyintegrals property)": [[15, "inquanto.operators.DiagonalizedOneBodyIntegrals.n_orb"]], "n_orb() (restrictedonebodyrdm method)": [[15, "inquanto.operators.RestrictedOneBodyRDM.n_orb"]], "n_orb() (restrictedtwobodyrdm method)": [[15, "inquanto.operators.RestrictedTwoBodyRDM.n_orb"]], "n_orb() (unrestrictedonebodyrdm method)": [[15, "inquanto.operators.UnrestrictedOneBodyRDM.n_orb"]], "n_orb() (unrestrictedtwobodyrdm method)": [[15, "inquanto.operators.UnrestrictedTwoBodyRDM.n_orb"]], "n_spin_orb() (restrictedonebodyrdm method)": [[15, "inquanto.operators.RestrictedOneBodyRDM.n_spin_orb"]], "n_spin_orb() (restrictedtwobodyrdm method)": [[15, "inquanto.operators.RestrictedTwoBodyRDM.n_spin_orb"]], "n_spin_orb() (unrestrictedonebodyrdm method)": [[15, "inquanto.operators.UnrestrictedOneBodyRDM.n_spin_orb"]], "n_spin_orb() (unrestrictedtwobodyrdm method)": [[15, "inquanto.operators.UnrestrictedTwoBodyRDM.n_spin_orb"]], "n_symbols (fermionoperator property)": [[15, "inquanto.operators.FermionOperator.n_symbols"]], "n_symbols (fermionoperatorlist property)": [[15, "inquanto.operators.FermionOperatorList.n_symbols"]], "n_symbols (qubitoperator property)": [[15, "inquanto.operators.QubitOperator.n_symbols"]], "n_symbols (qubitoperatorlist property)": [[15, "inquanto.operators.QubitOperatorList.n_symbols"]], "n_symbols (symmetryoperatorfermionic property)": [[15, "inquanto.operators.SymmetryOperatorFermionic.n_symbols"]], "n_symbols (symmetryoperatorfermionicfactorized property)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.n_symbols"]], "n_symbols (symmetryoperatorpauli property)": [[15, "inquanto.operators.SymmetryOperatorPauli.n_symbols"]], "n_symbols (symmetryoperatorpaulifactorized property)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.n_symbols"]], "norm() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.norm"]], "norm() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.norm"]], "norm_coefficients() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.norm_coefficients"]], "norm_coefficients() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.norm_coefficients"]], "norm_coefficients() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.norm_coefficients"]], "norm_coefficients() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.norm_coefficients"]], "normal_ordered() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.normal_ordered"]], "normal_ordered() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.normal_ordered"]], "normalized() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.normalized"]], "normalized() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.normalized"]], "normalized() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.normalized"]], "normalized() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.normalized"]], "num_spin_orbs (fermionoperator property)": [[15, "inquanto.operators.FermionOperator.num_spin_orbs"]], "num_spin_orbs (fermionoperatorlist property)": [[15, "inquanto.operators.FermionOperatorList.num_spin_orbs"]], "num_spin_orbs (symmetryoperatorfermionic property)": [[15, "inquanto.operators.SymmetryOperatorFermionic.num_spin_orbs"]], "num_spin_orbs (symmetryoperatorfermionicfactorized property)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.num_spin_orbs"]], "one_body_to_array() (fcidumprestricted method)": [[15, "inquanto.operators.FCIDumpRestricted.one_body_to_array"]], "one_body_to_array() (fcidumpunrestricted method)": [[15, "inquanto.operators.FCIDumpUnrestricted.one_body_to_array"]], "operator_class (fermionoperatorlist attribute)": [[15, "inquanto.operators.FermionOperatorList.operator_class"]], "operator_class (qubitoperatorlist attribute)": [[15, "inquanto.operators.QubitOperatorList.operator_class"]], "operator_class (symmetryoperatorfermionicfactorized attribute)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.operator_class"]], "operator_class (symmetryoperatorpaulifactorized attribute)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.operator_class"]], "optimize() (orbitaloptimizer method)": [[15, "inquanto.operators.OrbitalOptimizer.optimize"]], "orthonormalize() (orbitaloptimizer static method)": [[15, "inquanto.operators.OrbitalOptimizer.orthonormalize"]], "orthonormalize() (orbitaltransformer static method)": [[15, "inquanto.operators.OrbitalTransformer.orthonormalize"]], "pad() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.pad"]], "pad() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.pad"]], "padded() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.padded"]], "padded() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.padded"]], "padded() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.padded"]], "pairs() (compacttwobodyintegralss4 static method)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS4.pairs"]], "pairs() (compacttwobodyintegralss8 static method)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS8.pairs"]], "parallelity_matrix() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.parallelity_matrix"]], "parallelity_matrix() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.parallelity_matrix"]], "partition() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.partition"]], "partition() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.partition"]], "partition() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.partition"]], "partition() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.partition"]], "partition() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.partition"]], "partition() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.partition"]], "partition() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.partition"]], "partition() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.partition"]], "partition() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.partition"]], "partition() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.partition"]], "partition() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.partition"]], "partition() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.partition"]], "partition() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.partition"]], "partition() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.partition"]], "pauli_list (qubitoperatorstring property)": [[15, "inquanto.operators.QubitOperatorString.pauli_list"]], "pauli_strings (qubitoperator property)": [[15, "inquanto.operators.QubitOperator.pauli_strings"]], "pauli_strings (symmetryoperatorpauli property)": [[15, "inquanto.operators.SymmetryOperatorPauli.pauli_strings"]], "permuted_operator() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.permuted_operator"]], "permuted_operator() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.permuted_operator"]], "print_table() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.print_table"]], "print_table() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.print_table"]], "print_table() (chemistryunrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.print_table"]], "print_table() (chemistryunrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.print_table"]], "print_table() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.print_table"]], "print_table() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.print_table"]], "print_table() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.print_table"]], "print_table() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.print_table"]], "print_table() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.print_table"]], "print_table() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.print_table"]], "print_table() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.print_table"]], "print_table() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.print_table"]], "qubit_encode() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.qubit_encode"]], "qubit_encode() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.qubit_encode"]], "qubit_encode() (chemistryunrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.qubit_encode"]], "qubit_encode() (chemistryunrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.qubit_encode"]], "qubit_encode() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.qubit_encode"]], "qubit_encode() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.qubit_encode"]], "qubit_encode() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.qubit_encode"]], "qubit_encode() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.qubit_encode"]], "qubit_id_list (qubitoperatorstring property)": [[15, "inquanto.operators.QubitOperatorString.qubit_id_list"]], "qubit_list (qubitoperatorstring property)": [[15, "inquanto.operators.QubitOperatorString.qubit_list"]], "qubitwise_anticommutes_with() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.qubitwise_anticommutes_with"]], "qubitwise_anticommutes_with() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.qubitwise_anticommutes_with"]], "qubitwise_anticommutes_with() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.qubitwise_anticommutes_with"]], "qubitwise_commutes_with() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.qubitwise_commutes_with"]], "qubitwise_commutes_with() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.qubitwise_commutes_with"]], "qubitwise_commutes_with() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.qubitwise_commutes_with"]], "qubitwise_compatibility_matrix() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.qubitwise_compatibility_matrix"]], "qubitwise_compatibility_matrix() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.qubitwise_compatibility_matrix"]], "qubitwise_incompatibility_matrix() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.qubitwise_incompatibility_matrix"]], "qubitwise_incompatibility_matrix() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.qubitwise_incompatibility_matrix"]], "real (chemistryrestrictedintegraloperator property)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.real"]], "real (chemistryrestrictedintegraloperatorcompact property)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.real"]], "real (compacttwobodyintegralss4 property)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS4.real"]], "real (compacttwobodyintegralss8 property)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS8.real"]], "reduce_exponents_by_commutation() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.reduce_exponents_by_commutation"]], "reduce_exponents_by_commutation() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.reduce_exponents_by_commutation"]], "register_size() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.register_size"]], "remove_global_phase() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.remove_global_phase"]], "remove_global_phase() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.remove_global_phase"]], "remove_global_phase() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.remove_global_phase"]], "remove_global_phase() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.remove_global_phase"]], "removeprefix() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.removeprefix"]], "removeprefix() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.removeprefix"]], "removeprefix() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.removeprefix"]], "removeprefix() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.removeprefix"]], "removeprefix() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.removeprefix"]], "removeprefix() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.removeprefix"]], "removeprefix() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.removeprefix"]], "removeprefix() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.removeprefix"]], "removeprefix() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.removeprefix"]], "removeprefix() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.removeprefix"]], "removeprefix() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.removeprefix"]], "removeprefix() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.removeprefix"]], "removeprefix() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.removeprefix"]], "removeprefix() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.removeprefix"]], "removesuffix() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.removesuffix"]], "removesuffix() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.removesuffix"]], "removesuffix() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.removesuffix"]], "removesuffix() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.removesuffix"]], "removesuffix() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.removesuffix"]], "removesuffix() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.removesuffix"]], "removesuffix() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.removesuffix"]], "removesuffix() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.removesuffix"]], "removesuffix() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.removesuffix"]], "removesuffix() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.removesuffix"]], "removesuffix() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.removesuffix"]], "removesuffix() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.removesuffix"]], "removesuffix() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.removesuffix"]], "removesuffix() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.removesuffix"]], "replace() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.replace"]], "replace() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.replace"]], "replace() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.replace"]], "replace() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.replace"]], "replace() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.replace"]], "replace() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.replace"]], "replace() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.replace"]], "replace() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.replace"]], "replace() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.replace"]], "replace() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.replace"]], "replace() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.replace"]], "replace() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.replace"]], "replace() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.replace"]], "replace() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.replace"]], "retrotterize() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.retrotterize"]], "retrotterize() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.retrotterize"]], "retrotterize() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.retrotterize"]], "retrotterize() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.retrotterize"]], "reversed_order() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.reversed_order"]], "reversed_order() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.reversed_order"]], "reversed_order() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.reversed_order"]], "reversed_order() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.reversed_order"]], "reversed_order() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.reversed_order"]], "reversed_order() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.reversed_order"]], "reversed_order() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.reversed_order"]], "reversed_order() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.reversed_order"]], "rfind() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.rfind"]], "rfind() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.rfind"]], "rfind() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.rfind"]], "rfind() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.rfind"]], "rfind() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.rfind"]], "rfind() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.rfind"]], "rfind() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.rfind"]], "rfind() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.rfind"]], "rfind() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.rfind"]], "rfind() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.rfind"]], "rfind() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.rfind"]], "rfind() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.rfind"]], "rfind() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.rfind"]], "rfind() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.rfind"]], "rindex() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.rindex"]], "rindex() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.rindex"]], "rindex() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.rindex"]], "rindex() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.rindex"]], "rindex() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.rindex"]], "rindex() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.rindex"]], "rindex() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.rindex"]], "rindex() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.rindex"]], "rindex() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.rindex"]], "rindex() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.rindex"]], "rindex() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.rindex"]], "rindex() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.rindex"]], "rindex() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.rindex"]], "rindex() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.rindex"]], "rjust() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.rjust"]], "rjust() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.rjust"]], "rjust() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.rjust"]], "rjust() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.rjust"]], "rjust() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.rjust"]], "rjust() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.rjust"]], "rjust() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.rjust"]], "rjust() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.rjust"]], "rjust() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.rjust"]], "rjust() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.rjust"]], "rjust() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.rjust"]], "rjust() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.rjust"]], "rjust() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.rjust"]], "rjust() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.rjust"]], "rotate() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.rotate"]], "rotate() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.rotate"]], "rotate() (chemistryunrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.rotate"]], "rotate() (chemistryunrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.rotate"]], "rotate() (compacttwobodyintegralss4 method)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS4.rotate"]], "rotate() (compacttwobodyintegralss8 method)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS8.rotate"]], "rotate() (restrictedonebodyrdm method)": [[15, "inquanto.operators.RestrictedOneBodyRDM.rotate"]], "rotate() (restrictedtwobodyrdm method)": [[15, "inquanto.operators.RestrictedTwoBodyRDM.rotate"]], "rotate() (unrestrictedonebodyrdm method)": [[15, "inquanto.operators.UnrestrictedOneBodyRDM.rotate"]], "rotate() (unrestrictedtwobodyrdm method)": [[15, "inquanto.operators.UnrestrictedTwoBodyRDM.rotate"]], "rotation_matrices() (restricteddoublefactorizedhamiltonian method)": [[15, "inquanto.operators.RestrictedDoubleFactorizedHamiltonian.rotation_matrices"]], "rotation_matrices() (unrestricteddoublefactorizedhamiltonian method)": [[15, "inquanto.operators.UnrestrictedDoubleFactorizedHamiltonian.rotation_matrices"]], "rpartition() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.rpartition"]], "rpartition() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.rpartition"]], "rpartition() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.rpartition"]], "rpartition() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.rpartition"]], "rpartition() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.rpartition"]], "rpartition() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.rpartition"]], "rpartition() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.rpartition"]], "rpartition() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.rpartition"]], "rpartition() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.rpartition"]], "rpartition() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.rpartition"]], "rpartition() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.rpartition"]], "rpartition() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.rpartition"]], "rpartition() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.rpartition"]], "rpartition() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.rpartition"]], "rsplit() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.rsplit"]], "rsplit() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.rsplit"]], "rsplit() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.rsplit"]], "rsplit() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.rsplit"]], "rsplit() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.rsplit"]], "rsplit() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.rsplit"]], "rsplit() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.rsplit"]], "rsplit() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.rsplit"]], "rsplit() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.rsplit"]], "rsplit() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.rsplit"]], "rsplit() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.rsplit"]], "rsplit() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.rsplit"]], "rsplit() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.rsplit"]], "rsplit() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.rsplit"]], "rstrip() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.rstrip"]], "rstrip() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.rstrip"]], "rstrip() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.rstrip"]], "rstrip() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.rstrip"]], "rstrip() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.rstrip"]], "rstrip() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.rstrip"]], "rstrip() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.rstrip"]], "rstrip() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.rstrip"]], "rstrip() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.rstrip"]], "rstrip() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.rstrip"]], "rstrip() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.rstrip"]], "rstrip() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.rstrip"]], "rstrip() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.rstrip"]], "rstrip() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.rstrip"]], "save_h5() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.save_h5"]], "save_h5() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.save_h5"]], "save_h5() (chemistryunrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.save_h5"]], "save_h5() (chemistryunrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.save_h5"]], "save_h5() (restrictedonebodyrdm method)": [[15, "inquanto.operators.RestrictedOneBodyRDM.save_h5"]], "save_h5() (restrictedtwobodyrdm method)": [[15, "inquanto.operators.RestrictedTwoBodyRDM.save_h5"]], "save_h5() (unrestrictedonebodyrdm method)": [[15, "inquanto.operators.UnrestrictedOneBodyRDM.save_h5"]], "save_h5() (unrestrictedtwobodyrdm method)": [[15, "inquanto.operators.UnrestrictedTwoBodyRDM.save_h5"]], "set_block() (restrictedonebodyrdm method)": [[15, "inquanto.operators.RestrictedOneBodyRDM.set_block"]], "set_block() (unrestrictedonebodyrdm method)": [[15, "inquanto.operators.UnrestrictedOneBodyRDM.set_block"]], "set_global_phase() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.set_global_phase"]], "set_global_phase() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.set_global_phase"]], "set_global_phase() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.set_global_phase"]], "set_global_phase() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.set_global_phase"]], "shape (compacttwobodyintegralss4 property)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS4.shape"]], "shape (compacttwobodyintegralss8 property)": [[15, "inquanto.operators.CompactTwoBodyIntegralsS8.shape"]], "simplify() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.simplify"]], "simplify() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.simplify"]], "simplify() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.simplify"]], "simplify() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.simplify"]], "simplify() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.simplify"]], "simplify() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.simplify"]], "simplify() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.simplify"]], "simplify() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.simplify"]], "split() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.split"]], "split() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.split"]], "split() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.split"]], "split() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.split"]], "split() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.split"]], "split() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.split"]], "split() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.split"]], "split() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.split"]], "split() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.split"]], "split() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.split"]], "split() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.split"]], "split() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.split"]], "split() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.split"]], "split() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.split"]], "split() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.split"]], "split() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.split"]], "split() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.split"]], "split() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.split"]], "split() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.split"]], "split() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.split"]], "split() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.split"]], "split() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.split"]], "split_totally_commuting_set() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.split_totally_commuting_set"]], "split_totally_commuting_set() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.split_totally_commuting_set"]], "splitlines() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.splitlines"]], "splitlines() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.splitlines"]], "splitlines() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.splitlines"]], "splitlines() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.splitlines"]], "splitlines() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.splitlines"]], "splitlines() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.splitlines"]], "splitlines() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.splitlines"]], "splitlines() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.splitlines"]], "splitlines() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.splitlines"]], "splitlines() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.splitlines"]], "splitlines() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.splitlines"]], "splitlines() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.splitlines"]], "splitlines() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.splitlines"]], "splitlines() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.splitlines"]], "startswith() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.startswith"]], "startswith() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.startswith"]], "startswith() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.startswith"]], "startswith() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.startswith"]], "startswith() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.startswith"]], "startswith() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.startswith"]], "startswith() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.startswith"]], "startswith() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.startswith"]], "startswith() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.startswith"]], "startswith() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.startswith"]], "startswith() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.startswith"]], "startswith() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.startswith"]], "startswith() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.startswith"]], "startswith() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.startswith"]], "state_expectation() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.state_expectation"]], "state_expectation() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.state_expectation"]], "state_expectation() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.state_expectation"]], "state_expectation_ndarray() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.state_expectation_ndarray"]], "state_expectation_ndarray() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.state_expectation_ndarray"]], "strip() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.strip"]], "strip() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.strip"]], "strip() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.strip"]], "strip() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.strip"]], "strip() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.strip"]], "strip() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.strip"]], "strip() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.strip"]], "strip() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.strip"]], "strip() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.strip"]], "strip() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.strip"]], "strip() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.strip"]], "strip() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.strip"]], "strip() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.strip"]], "strip() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.strip"]], "sublist() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.sublist"]], "sublist() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.sublist"]], "sublist() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.sublist"]], "sublist() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.sublist"]], "subs() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.subs"]], "subs() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.subs"]], "subs() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.subs"]], "subs() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.subs"]], "subs() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.subs"]], "subs() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.subs"]], "subs() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.subs"]], "subs() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.subs"]], "swapcase() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.swapcase"]], "swapcase() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.swapcase"]], "swapcase() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.swapcase"]], "swapcase() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.swapcase"]], "swapcase() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.swapcase"]], "swapcase() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.swapcase"]], "swapcase() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.swapcase"]], "swapcase() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.swapcase"]], "swapcase() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.swapcase"]], "swapcase() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.swapcase"]], "swapcase() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.swapcase"]], "swapcase() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.swapcase"]], "swapcase() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.swapcase"]], "swapcase() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.swapcase"]], "symbol_substitution() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.symbol_substitution"]], "symbol_substitution() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.symbol_substitution"]], "symbol_substitution() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.symbol_substitution"]], "symbol_substitution() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.symbol_substitution"]], "symbol_substitution() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.symbol_substitution"]], "symbol_substitution() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.symbol_substitution"]], "symbol_substitution() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.symbol_substitution"]], "symbol_substitution() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.symbol_substitution"]], "symmetry_sector() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.symmetry_sector"]], "symmetry_sector() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.symmetry_sector"]], "symmetry_sector() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.symmetry_sector"]], "symmetry_sector() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.symmetry_sector"]], "sympify() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.sympify"]], "sympify() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.sympify"]], "sympify() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.sympify"]], "sympify() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.sympify"]], "sympify() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.sympify"]], "sympify() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.sympify"]], "sympify() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.sympify"]], "sympify() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.sympify"]], "symplectic_representation() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.symplectic_representation"]], "symplectic_representation() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.symplectic_representation"]], "terms (fermionoperator property)": [[15, "inquanto.operators.FermionOperator.terms"]], "terms (qubitoperator property)": [[15, "inquanto.operators.QubitOperator.terms"]], "terms (symmetryoperatorfermionic property)": [[15, "inquanto.operators.SymmetryOperatorFermionic.terms"]], "terms (symmetryoperatorpauli property)": [[15, "inquanto.operators.SymmetryOperatorPauli.terms"]], "title() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.title"]], "title() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.title"]], "title() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.title"]], "title() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.title"]], "title() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.title"]], "title() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.title"]], "title() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.title"]], "title() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.title"]], "title() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.title"]], "title() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.title"]], "title() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.title"]], "title() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.title"]], "title() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.title"]], "title() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.title"]], "to_chemistryrestrictedintegraloperator() (fcidumprestricted method)": [[15, "inquanto.operators.FCIDumpRestricted.to_ChemistryRestrictedIntegralOperator"]], "to_chemistryrestrictedintegraloperator() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.to_ChemistryRestrictedIntegralOperator"]], "to_chemistryrestrictedintegraloperator() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.to_ChemistryRestrictedIntegralOperator"]], "to_chemistryunrestrictedintegraloperator() (fcidumpunrestricted method)": [[15, "inquanto.operators.FCIDumpUnrestricted.to_ChemistryUnrestrictedIntegralOperator"]], "to_chemistryunrestrictedintegraloperator() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.to_ChemistryUnrestrictedIntegralOperator"]], "to_chemistryunrestrictedintegraloperator() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.to_ChemistryUnrestrictedIntegralOperator"]], "to_fermionoperator() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.to_FermionOperator"]], "to_fermionoperator() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.to_FermionOperator"]], "to_fermionoperator() (chemistryunrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.to_FermionOperator"]], "to_fermionoperator() (chemistryunrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.to_FermionOperator"]], "to_qubitpaulioperator() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.to_QubitPauliOperator"]], "to_qubitpaulioperator() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.to_QubitPauliOperator"]], "to_qubitpaulistring() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.to_QubitPauliString"]], "to_arrays() (fcidumprestricted method)": [[15, "inquanto.operators.FCIDumpRestricted.to_arrays"]], "to_arrays() (fcidumpunrestricted method)": [[15, "inquanto.operators.FCIDumpUnrestricted.to_arrays"]], "to_circuit() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.to_circuit"]], "to_compact_integral_operator() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.to_compact_integral_operator"]], "to_compact_integral_operator() (chemistryunrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperator.to_compact_integral_operator"]], "to_dict() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.to_dict"]], "to_latex() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.to_latex"]], "to_latex() (fermionoperatorstring method)": [[15, "inquanto.operators.FermionOperatorString.to_latex"]], "to_latex() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.to_latex"]], "to_latex() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.to_latex"]], "to_latex() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.to_latex"]], "to_latex() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.to_latex"]], "to_list() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.to_list"]], "to_serializable() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.to_serializable"]], "to_serializable() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.to_serializable"]], "to_sparse_matrices() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.to_sparse_matrices"]], "to_sparse_matrices() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.to_sparse_matrices"]], "to_sparse_matrix() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.to_sparse_matrix"]], "to_sparse_matrix() (qubitoperatorstring method)": [[15, "inquanto.operators.QubitOperatorString.to_sparse_matrix"]], "to_sparse_matrix() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.to_sparse_matrix"]], "to_symmetry_operator_fermionic() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.to_symmetry_operator_fermionic"]], "to_symmetry_operator_pauli() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.to_symmetry_operator_pauli"]], "to_uncompacted_integral_operator() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.to_uncompacted_integral_operator"]], "to_uncompacted_integral_operator() (chemistryunrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryUnrestrictedIntegralOperatorCompact.to_uncompacted_integral_operator"]], "toeplitz_decomposition() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.toeplitz_decomposition"]], "toeplitz_decomposition() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.toeplitz_decomposition"]], "totally_commuting_decomposition() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.totally_commuting_decomposition"]], "totally_commuting_decomposition() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.totally_commuting_decomposition"]], "trace() (restrictedonebodyrdm method)": [[15, "inquanto.operators.RestrictedOneBodyRDM.trace"]], "trace() (unrestrictedonebodyrdm method)": [[15, "inquanto.operators.UnrestrictedOneBodyRDM.trace"]], "transform() (orbitaloptimizer method)": [[15, "inquanto.operators.OrbitalOptimizer.transform"]], "transform() (orbitaltransformer method)": [[15, "inquanto.operators.OrbitalTransformer.transform"]], "translate() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.translate"]], "translate() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.translate"]], "translate() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.translate"]], "translate() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.translate"]], "translate() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.translate"]], "translate() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.translate"]], "translate() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.translate"]], "translate() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.translate"]], "translate() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.translate"]], "translate() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.translate"]], "translate() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.translate"]], "translate() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.translate"]], "translate() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.translate"]], "translate() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.translate"]], "trotterize() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.trotterize"]], "trotterize() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.trotterize"]], "trotterize() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.trotterize"]], "trotterize() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.trotterize"]], "trotterize_as_linear_combination() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.trotterize_as_linear_combination"]], "trotterize_as_linear_combination() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.trotterize_as_linear_combination"]], "trotterize_as_linear_combination() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.trotterize_as_linear_combination"]], "trotterize_as_linear_combination() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.trotterize_as_linear_combination"]], "truncated() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.truncated"]], "truncated() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.truncated"]], "two_body_iijj() (chemistryrestrictedintegraloperator method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperator.two_body_iijj"]], "two_body_iijj() (chemistryrestrictedintegraloperatorcompact method)": [[15, "inquanto.operators.ChemistryRestrictedIntegralOperatorCompact.two_body_iijj"]], "two_body_to_tensor() (fcidumprestricted method)": [[15, "inquanto.operators.FCIDumpRestricted.two_body_to_tensor"]], "two_body_to_tensor() (fcidumpunrestricted method)": [[15, "inquanto.operators.FCIDumpUnrestricted.two_body_to_tensor"]], "unsympify() (fermionoperator method)": [[15, "inquanto.operators.FermionOperator.unsympify"]], "unsympify() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.unsympify"]], "unsympify() (qubitoperator method)": [[15, "inquanto.operators.QubitOperator.unsympify"]], "unsympify() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.unsympify"]], "unsympify() (symmetryoperatorfermionic method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.unsympify"]], "unsympify() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.unsympify"]], "unsympify() (symmetryoperatorpauli method)": [[15, "inquanto.operators.SymmetryOperatorPauli.unsympify"]], "unsympify() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.unsympify"]], "untrotterize() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.untrotterize"]], "untrotterize() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.untrotterize"]], "untrotterize() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.untrotterize"]], "untrotterize() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.untrotterize"]], "untrotterize_partitioned() (fermionoperatorlist method)": [[15, "inquanto.operators.FermionOperatorList.untrotterize_partitioned"]], "untrotterize_partitioned() (qubitoperatorlist method)": [[15, "inquanto.operators.QubitOperatorList.untrotterize_partitioned"]], "untrotterize_partitioned() (symmetryoperatorfermionicfactorized method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.untrotterize_partitioned"]], "untrotterize_partitioned() (symmetryoperatorpaulifactorized method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.untrotterize_partitioned"]], "upper() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.upper"]], "upper() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.upper"]], "upper() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.upper"]], "upper() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.upper"]], "upper() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.upper"]], "upper() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.upper"]], "upper() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.upper"]], "upper() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.upper"]], "upper() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.upper"]], "upper() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.upper"]], "upper() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.upper"]], "upper() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.upper"]], "upper() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.upper"]], "upper() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.upper"]], "valid_formats (fcidumpunrestricted attribute)": [[15, "inquanto.operators.FCIDumpUnrestricted.valid_formats"]], "write() (fcidumprestricted method)": [[15, "inquanto.operators.FCIDumpRestricted.write"]], "zero() (fermionoperator class method)": [[15, "inquanto.operators.FermionOperator.zero"]], "zero() (qubitoperator class method)": [[15, "inquanto.operators.QubitOperator.zero"]], "zero() (symmetryoperatorfermionic class method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.zero"]], "zero() (symmetryoperatorpauli class method)": [[15, "inquanto.operators.SymmetryOperatorPauli.zero"]], "zfill() (fermionoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.FermionOperator.TrotterizeCoefficientsLocation.zfill"]], "zfill() (fermionoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.FermionOperatorList.CompressScalarsBehavior.zfill"]], "zfill() (fermionoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.FermionOperatorList.FactoryCoefficientsLocation.zfill"]], "zfill() (qubitoperator.trotterizecoefficientslocation method)": [[15, "inquanto.operators.QubitOperator.TrotterizeCoefficientsLocation.zfill"]], "zfill() (qubitoperatorlist.compressscalarsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.CompressScalarsBehavior.zfill"]], "zfill() (qubitoperatorlist.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.QubitOperatorList.ExpandExponentialProductCoefficientsBehavior.zfill"]], "zfill() (qubitoperatorlist.factorycoefficientslocation method)": [[15, "inquanto.operators.QubitOperatorList.FactoryCoefficientsLocation.zfill"]], "zfill() (symmetryoperatorfermionic.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionic.TrotterizeCoefficientsLocation.zfill"]], "zfill() (symmetryoperatorfermionicfactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.CompressScalarsBehavior.zfill"]], "zfill() (symmetryoperatorfermionicfactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorFermionicFactorized.FactoryCoefficientsLocation.zfill"]], "zfill() (symmetryoperatorpauli.trotterizecoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauli.TrotterizeCoefficientsLocation.zfill"]], "zfill() (symmetryoperatorpaulifactorized.compressscalarsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.CompressScalarsBehavior.zfill"]], "zfill() (symmetryoperatorpaulifactorized.expandexponentialproductcoefficientsbehavior method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.ExpandExponentialProductCoefficientsBehavior.zfill"]], "zfill() (symmetryoperatorpaulifactorized.factorycoefficientslocation method)": [[15, "inquanto.operators.SymmetryOperatorPauliFactorized.FactoryCoefficientsLocation.zfill"]], "backendresultbootstrap (class in inquanto.protocols)": [[16, "inquanto.protocols.BackendResultBootstrap"]], "backendresultsplit (class in inquanto.protocols)": [[16, "inquanto.protocols.BackendResultSplit"]], "backendstatevectorprotocol (class in inquanto.protocols)": [[16, "inquanto.protocols.BackendStatevectorProtocol"]], "compiled (compilationlevel attribute)": [[16, "id4"], [16, "inquanto.protocols.CompilationLevel.COMPILED"]], "canonicalphaseestimation (class in inquanto.protocols)": [[16, "inquanto.protocols.CanonicalPhaseEstimation"]], "circuitencoderquantinuum (class in inquanto.protocols)": [[16, "inquanto.protocols.CircuitEncoderQuantinuum"]], "combinedmitigation (class in inquanto.protocols)": [[16, "inquanto.protocols.CombinedMitigation"]], "compilationlevel (class in inquanto.protocols)": [[16, "inquanto.protocols.CompilationLevel"]], "computeuncompute (class in inquanto.protocols)": [[16, "inquanto.protocols.ComputeUncompute"]], "computeuncomputefactorizedoverlap (class in inquanto.protocols)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap"]], "ctrlustrat (class in inquanto.protocols)": [[16, "inquanto.protocols.CtrluStrat"]], "destructiveswaptest (class in inquanto.protocols)": [[16, "inquanto.protocols.DestructiveSwapTest"]], "factorizedoverlap (class in inquanto.protocols)": [[16, "inquanto.protocols.FactorizedOverlap"]], "hadamardtest (class in inquanto.protocols)": [[16, "inquanto.protocols.HadamardTest"]], "hadamardtestderivative (class in inquanto.protocols)": [[16, "inquanto.protocols.HadamardTestDerivative"]], "hadamardtestderivativeoverlap (class in inquanto.protocols)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap"]], "hadamardtestoverlap (class in inquanto.protocols)": [[16, "inquanto.protocols.HadamardTestOverlap"]], "iceberg (circuitencoderquantinuum attribute)": [[16, "id0"], [16, "inquanto.protocols.CircuitEncoderQuantinuum.ICEBERG"]], "icebergoptions (class in inquanto.protocols)": [[16, "inquanto.protocols.IcebergOptions"]], "iterativephaseestimation (class in inquanto.protocols)": [[16, "inquanto.protocols.IterativePhaseEstimation"]], "iterativephaseestimationquantinuum (class in inquanto.protocols)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum"]], "iterativephaseestimationsinglecircuit (class in inquanto.protocols)": [[16, "inquanto.protocols.IterativePhaseEstimationSingleCircuit"]], "iterativephaseestimationstatevector (class in inquanto.protocols)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector"]], "logical (compilationlevel attribute)": [[16, "id5"], [16, "inquanto.protocols.CompilationLevel.LOGICAL"]], "linearinterpolatorphaseestimator (class in inquanto.protocols)": [[16, "inquanto.protocols.LinearInterpolatorPhaseEstimator"]], "measurementpluralityphaseestimator (class in inquanto.protocols)": [[16, "inquanto.protocols.MeasurementPluralityPhaseEstimator"]], "pauli_exp_box (ctrlustrat attribute)": [[16, "id10"], [16, "inquanto.protocols.CtrluStrat.PAULI_EXP_BOX"]], "pauli_gadget_rzz (ctrlustrat attribute)": [[16, "inquanto.protocols.CtrluStrat.PAULI_GADGET_RZZ"], [16, "inquanto.protocols.CtrluStrat.Pauli_GADGET_RZZ"]], "plain (circuitencoderquantinuum attribute)": [[16, "id3"], [16, "inquanto.protocols.CircuitEncoderQuantinuum.PLAIN"]], "pmsv (class in inquanto.protocols)": [[16, "inquanto.protocols.PMSV"]], "pauliaveraging (class in inquanto.protocols)": [[16, "inquanto.protocols.PauliAveraging"]], "plainoptions (class in inquanto.protocols)": [[16, "inquanto.protocols.PlainOptions"]], "projectivemeasurements (class in inquanto.protocols)": [[16, "inquanto.protocols.ProjectiveMeasurements"]], "protocollist (class in inquanto.protocols)": [[16, "inquanto.protocols.ProtocolList"]], "spam (class in inquanto.protocols)": [[16, "inquanto.protocols.SPAM"]], "sparsestatevectorprotocol (class in inquanto.protocols)": [[16, "inquanto.protocols.SparseStatevectorProtocol"]], "swapfactorizedoverlap (class in inquanto.protocols)": [[16, "inquanto.protocols.SwapFactorizedOverlap"]], "swaptest (class in inquanto.protocols)": [[16, "inquanto.protocols.SwapTest"]], "symbolicprotocol (class in inquanto.protocols)": [[16, "inquanto.protocols.SymbolicProtocol"]], "tolerance (hadamardtestderivativeoverlap attribute)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.TOLERANCE"]], "append() (protocollist method)": [[16, "inquanto.protocols.ProtocolList.append"]], "as_integer_ratio() (compilationlevel method)": [[16, "inquanto.protocols.CompilationLevel.as_integer_ratio"]], "as_integer_ratio() (ctrlustrat method)": [[16, "inquanto.protocols.CtrluStrat.as_integer_ratio"]], "backend (iterativephaseestimation property)": [[16, "inquanto.protocols.IterativePhaseEstimation.backend"]], "backend (iterativephaseestimationquantinuum property)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.backend"]], "backend (projectivemeasurements attribute)": [[16, "inquanto.protocols.ProjectiveMeasurements.backend"]], "beta_iqpe (iterativephaseestimation property)": [[16, "inquanto.protocols.IterativePhaseEstimation.beta_iqpe"]], "beta_iqpe (iterativephaseestimationquantinuum property)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.beta_iqpe"]], "bit_count() (compilationlevel method)": [[16, "inquanto.protocols.CompilationLevel.bit_count"]], "bit_count() (ctrlustrat method)": [[16, "inquanto.protocols.CtrluStrat.bit_count"]], "bit_length() (compilationlevel method)": [[16, "inquanto.protocols.CompilationLevel.bit_length"]], "bit_length() (ctrlustrat method)": [[16, "inquanto.protocols.CtrluStrat.bit_length"]], "build() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.build"]], "build() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.build"]], "build() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.build"]], "build() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.build"]], "build() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.build"]], "build() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.build"]], "build() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.build"]], "build() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.build"]], "build() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.build"]], "build() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.build"]], "build() (iterativephaseestimationstatevector method)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.build"]], "build() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.build"]], "build() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.build"]], "build() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.build"]], "build() (swaptest method)": [[16, "inquanto.protocols.SwapTest.build"]], "build_from() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.build_from"]], "build_from() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.build_from"]], "build_from() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.build_from"]], "build_from() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.build_from"]], "build_from() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.build_from"]], "build_from() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.build_from"]], "build_from() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.build_from"]], "build_from() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.build_from"]], "build_from() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.build_from"]], "build_from() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.build_from"]], "build_from() (swaptest method)": [[16, "inquanto.protocols.SwapTest.build_from"]], "build_from_circuit() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.build_from_circuit"]], "build_from_circuit() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.build_from_circuit"]], "build_from_circuit() (iterativephaseestimationstatevector method)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.build_from_circuit"]], "build_protocols_from() (computeuncompute class method)": [[16, "inquanto.protocols.ComputeUncompute.build_protocols_from"]], "build_protocols_from() (computeuncomputefactorizedoverlap class method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.build_protocols_from"]], "build_protocols_from() (destructiveswaptest class method)": [[16, "inquanto.protocols.DestructiveSwapTest.build_protocols_from"]], "build_protocols_from() (factorizedoverlap class method)": [[16, "inquanto.protocols.FactorizedOverlap.build_protocols_from"]], "build_protocols_from() (hadamardtest class method)": [[16, "inquanto.protocols.HadamardTest.build_protocols_from"]], "build_protocols_from() (hadamardtestderivative class method)": [[16, "inquanto.protocols.HadamardTestDerivative.build_protocols_from"]], "build_protocols_from() (hadamardtestderivativeoverlap class method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.build_protocols_from"]], "build_protocols_from() (hadamardtestoverlap class method)": [[16, "inquanto.protocols.HadamardTestOverlap.build_protocols_from"]], "build_protocols_from() (pauliaveraging class method)": [[16, "inquanto.protocols.PauliAveraging.build_protocols_from"]], "build_protocols_from() (swapfactorizedoverlap class method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.build_protocols_from"]], "build_protocols_from() (swaptest class method)": [[16, "inquanto.protocols.SwapTest.build_protocols_from"]], "cache_dict (sparsestatevectorprotocol property)": [[16, "inquanto.protocols.SparseStatevectorProtocol.cache_dict"]], "cache_hit_report() (sparsestatevectorprotocol method)": [[16, "inquanto.protocols.SparseStatevectorProtocol.cache_hit_report"]], "calculate_mean_with_uncertainty() (backendresultbootstrap static method)": [[16, "inquanto.protocols.BackendResultBootstrap.calculate_mean_with_uncertainty"]], "calculate_mean_with_uncertainty() (backendresultsplit static method)": [[16, "inquanto.protocols.BackendResultSplit.calculate_mean_with_uncertainty"]], "calibrate() (spam method)": [[16, "inquanto.protocols.SPAM.calibrate"]], "calibrate_process() (spam method)": [[16, "inquanto.protocols.SPAM.calibrate_process"]], "calibrate_retrieve() (spam method)": [[16, "inquanto.protocols.SPAM.calibrate_retrieve"]], "clear() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.clear"]], "clear() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.clear"]], "clear() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.clear"]], "clear() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.clear"]], "clear() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.clear"]], "clear() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.clear"]], "clear() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.clear"]], "clear() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.clear"]], "clear() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.clear"]], "clear() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.clear"]], "clear() (iterativephaseestimationstatevector method)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.clear"]], "clear() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.clear"]], "clear() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.clear"]], "clear() (sparsestatevectorprotocol method)": [[16, "inquanto.protocols.SparseStatevectorProtocol.clear"]], "clear() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.clear"]], "clear() (swaptest method)": [[16, "inquanto.protocols.SwapTest.clear"]], "clear() (symbolicprotocol method)": [[16, "inquanto.protocols.SymbolicProtocol.clear"]], "clear_cache() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.clear_cache"]], "clear_cache() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.clear_cache"]], "compilation_level (iterativephaseestimation property)": [[16, "inquanto.protocols.IterativePhaseEstimation.compilation_level"]], "compilation_level (iterativephaseestimationquantinuum property)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.compilation_level"]], "compile_circuits() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.compile_circuits"]], "compile_circuits() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.compile_circuits"]], "compile_circuits() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.compile_circuits"]], "compile_circuits() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.compile_circuits"]], "compile_circuits() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.compile_circuits"]], "compile_circuits() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.compile_circuits"]], "compile_circuits() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.compile_circuits"]], "compile_circuits() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.compile_circuits"]], "compile_circuits() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.compile_circuits"]], "compile_circuits() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.compile_circuits"]], "compile_circuits() (protocollist method)": [[16, "inquanto.protocols.ProtocolList.compile_circuits"]], "compile_circuits() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.compile_circuits"]], "compile_circuits() (swaptest method)": [[16, "inquanto.protocols.SwapTest.compile_circuits"]], "compile_circuits_native() (protocollist method)": [[16, "inquanto.protocols.ProtocolList.compile_circuits_native"]], "conditional_exit (icebergoptions attribute)": [[16, "inquanto.protocols.IcebergOptions.conditional_exit"]], "conjugate() (compilationlevel method)": [[16, "inquanto.protocols.CompilationLevel.conjugate"]], "conjugate() (ctrlustrat method)": [[16, "inquanto.protocols.CtrluStrat.conjugate"]], "copy() (backendstatevectorprotocol method)": [[16, "inquanto.protocols.BackendStatevectorProtocol.copy"]], "copy() (canonicalphaseestimation method)": [[16, "inquanto.protocols.CanonicalPhaseEstimation.copy"]], "copy() (iterativephaseestimationsinglecircuit method)": [[16, "inquanto.protocols.IterativePhaseEstimationSingleCircuit.copy"]], "copy() (sparsestatevectorprotocol method)": [[16, "inquanto.protocols.SparseStatevectorProtocol.copy"]], "cost() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.cost"]], "cost() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.cost"]], "cost() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.cost"]], "cost() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.cost"]], "cost() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.cost"]], "cost() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.cost"]], "cost() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.cost"]], "cost() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.cost"]], "cost() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.cost"]], "cost() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.cost"]], "cost() (protocollist method)": [[16, "inquanto.protocols.ProtocolList.cost"]], "cost() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.cost"]], "cost() (swaptest method)": [[16, "inquanto.protocols.SwapTest.cost"]], "counts (projectivemeasurements attribute)": [[16, "inquanto.protocols.ProjectiveMeasurements.counts"]], "credits() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.credits"]], "credits() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.credits"]], "credits() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.credits"]], "credits() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.credits"]], "credits() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.credits"]], "credits() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.credits"]], "credits() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.credits"]], "credits() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.credits"]], "credits() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.credits"]], "credits() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.credits"]], "credits() (protocollist method)": [[16, "inquanto.protocols.ProtocolList.credits"]], "credits() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.credits"]], "credits() (swaptest method)": [[16, "inquanto.protocols.SwapTest.credits"]], "dataframe_circuit_shot() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.dataframe_circuit_shot"]], "dataframe_circuit_shot() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.dataframe_circuit_shot"]], "dataframe_circuit_shot() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.dataframe_circuit_shot"]], "dataframe_circuit_shot() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.dataframe_circuit_shot"]], "dataframe_circuit_shot() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.dataframe_circuit_shot"]], "dataframe_circuit_shot() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.dataframe_circuit_shot"]], "dataframe_circuit_shot() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.dataframe_circuit_shot"]], "dataframe_circuit_shot() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.dataframe_circuit_shot"]], "dataframe_circuit_shot() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.dataframe_circuit_shot"]], "dataframe_circuit_shot() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.dataframe_circuit_shot"]], "dataframe_circuit_shot() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.dataframe_circuit_shot"]], "dataframe_circuit_shot() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.dataframe_circuit_shot"]], "dataframe_circuit_shot() (protocollist method)": [[16, "inquanto.protocols.ProtocolList.dataframe_circuit_shot"]], "dataframe_circuit_shot() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.dataframe_circuit_shot"]], "dataframe_circuit_shot() (swaptest method)": [[16, "inquanto.protocols.SwapTest.dataframe_circuit_shot"]], "dataframe_measurements() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.dataframe_measurements"]], "dataframe_measurements() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.dataframe_measurements"]], "dataframe_partitioning() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.dataframe_partitioning"]], "dataframe_protocol_circuit() (protocollist method)": [[16, "inquanto.protocols.ProtocolList.dataframe_protocol_circuit"]], "denominator (compilationlevel attribute)": [[16, "inquanto.protocols.CompilationLevel.denominator"]], "denominator (ctrlustrat attribute)": [[16, "inquanto.protocols.CtrluStrat.denominator"]], "distributions (hadamardtestderivativeoverlap attribute)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.distributions"]], "dump() (backendstatevectorprotocol method)": [[16, "inquanto.protocols.BackendStatevectorProtocol.dump"]], "dump() (canonicalphaseestimation method)": [[16, "inquanto.protocols.CanonicalPhaseEstimation.dump"]], "dump() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.dump"]], "dump() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.dump"]], "dump() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.dump"]], "dump() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.dump"]], "dump() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.dump"]], "dump() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.dump"]], "dump() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.dump"]], "dump() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.dump"]], "dump() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.dump"]], "dump() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.dump"]], "dump() (iterativephaseestimationsinglecircuit method)": [[16, "inquanto.protocols.IterativePhaseEstimationSingleCircuit.dump"]], "dump() (iterativephaseestimationstatevector method)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.dump"]], "dump() (linearinterpolatorphaseestimator method)": [[16, "inquanto.protocols.LinearInterpolatorPhaseEstimator.dump"]], "dump() (measurementpluralityphaseestimator method)": [[16, "inquanto.protocols.MeasurementPluralityPhaseEstimator.dump"]], "dump() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.dump"]], "dump() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.dump"]], "dump() (sparsestatevectorprotocol method)": [[16, "inquanto.protocols.SparseStatevectorProtocol.dump"]], "dump() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.dump"]], "dump() (swaptest method)": [[16, "inquanto.protocols.SwapTest.dump"]], "dump() (symbolicprotocol method)": [[16, "inquanto.protocols.SymbolicProtocol.dump"]], "dumps() (backendstatevectorprotocol method)": [[16, "inquanto.protocols.BackendStatevectorProtocol.dumps"]], "dumps() (canonicalphaseestimation method)": [[16, "inquanto.protocols.CanonicalPhaseEstimation.dumps"]], "dumps() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.dumps"]], "dumps() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.dumps"]], "dumps() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.dumps"]], "dumps() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.dumps"]], "dumps() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.dumps"]], "dumps() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.dumps"]], "dumps() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.dumps"]], "dumps() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.dumps"]], "dumps() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.dumps"]], "dumps() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.dumps"]], "dumps() (iterativephaseestimationsinglecircuit method)": [[16, "inquanto.protocols.IterativePhaseEstimationSingleCircuit.dumps"]], "dumps() (iterativephaseestimationstatevector method)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.dumps"]], "dumps() (linearinterpolatorphaseestimator method)": [[16, "inquanto.protocols.LinearInterpolatorPhaseEstimator.dumps"]], "dumps() (measurementpluralityphaseestimator method)": [[16, "inquanto.protocols.MeasurementPluralityPhaseEstimator.dumps"]], "dumps() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.dumps"]], "dumps() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.dumps"]], "dumps() (sparsestatevectorprotocol method)": [[16, "inquanto.protocols.SparseStatevectorProtocol.dumps"]], "dumps() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.dumps"]], "dumps() (swaptest method)": [[16, "inquanto.protocols.SwapTest.dumps"]], "dumps() (symbolicprotocol method)": [[16, "inquanto.protocols.SymbolicProtocol.dumps"]], "eigenvalues (iterativephaseestimationstatevector property)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.eigenvalues"]], "evaluate_dbra() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.evaluate_dbra"]], "evaluate_derivative_overlap() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.evaluate_derivative_overlap"]], "evaluate_dket() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.evaluate_dket"]], "evaluate_dket_complex() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.evaluate_dket_complex"]], "evaluate_expectation_uvalue() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.evaluate_expectation_uvalue"]], "evaluate_expectation_value() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.evaluate_expectation_value"]], "evaluate_expectation_value() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.evaluate_expectation_value"]], "evaluate_gradient() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.evaluate_gradient"]], "evaluate_overlap() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.evaluate_overlap"]], "evaluate_overlap() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.evaluate_overlap"]], "evaluate_overlap() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.evaluate_overlap"]], "evaluate_overlap() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.evaluate_overlap"]], "evaluate_overlap_imag() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.evaluate_overlap_imag"]], "evaluate_overlap_imag() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.evaluate_overlap_imag"]], "evaluate_overlap_imag() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.evaluate_overlap_imag"]], "evaluate_overlap_imag() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.evaluate_overlap_imag"]], "evaluate_overlap_real() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.evaluate_overlap_real"]], "evaluate_overlap_real() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.evaluate_overlap_real"]], "evaluate_overlap_real() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.evaluate_overlap_real"]], "evaluate_overlap_real() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.evaluate_overlap_real"]], "evaluate_overlap_squared() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.evaluate_overlap_squared"]], "evaluate_overlap_squared() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.evaluate_overlap_squared"]], "evaluate_overlap_squared() (swaptest method)": [[16, "inquanto.protocols.SwapTest.evaluate_overlap_squared"]], "from_bytes() (compilationlevel method)": [[16, "inquanto.protocols.CompilationLevel.from_bytes"]], "from_bytes() (ctrlustrat method)": [[16, "inquanto.protocols.CtrluStrat.from_bytes"]], "get_circuits() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.get_circuits"]], "get_circuits() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.get_circuits"]], "get_circuits() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.get_circuits"]], "get_circuits() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.get_circuits"]], "get_circuits() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.get_circuits"]], "get_circuits() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.get_circuits"]], "get_circuits() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.get_circuits"]], "get_circuits() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.get_circuits"]], "get_circuits() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.get_circuits"]], "get_circuits() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.get_circuits"]], "get_circuits() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.get_circuits"]], "get_circuits() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.get_circuits"]], "get_circuits() (protocollist method)": [[16, "inquanto.protocols.ProtocolList.get_circuits"]], "get_circuits() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.get_circuits"]], "get_circuits() (swaptest method)": [[16, "inquanto.protocols.SwapTest.get_circuits"]], "get_circuitshots() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.get_circuitshots"]], "get_circuitshots() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.get_circuitshots"]], "get_circuitshots() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.get_circuitshots"]], "get_circuitshots() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.get_circuitshots"]], "get_circuitshots() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.get_circuitshots"]], "get_circuitshots() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.get_circuitshots"]], "get_circuitshots() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.get_circuitshots"]], "get_circuitshots() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.get_circuitshots"]], "get_circuitshots() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.get_circuitshots"]], "get_circuitshots() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.get_circuitshots"]], "get_circuitshots() (protocollist method)": [[16, "inquanto.protocols.ProtocolList.get_circuitshots"]], "get_circuitshots() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.get_circuitshots"]], "get_circuitshots() (swaptest method)": [[16, "inquanto.protocols.SwapTest.get_circuitshots"]], "get_dataframe_basis_states() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.get_dataframe_basis_states"]], "get_dataframe_derivative_overlap() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.get_dataframe_derivative_overlap"]], "get_distribuiton() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.get_distribuiton"]], "get_distribuiton() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.get_distribuiton"]], "get_distribuiton() (iterativephaseestimationstatevector method)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.get_distribuiton"]], "get_distribution() (iterativephaseestimationstatevector method)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.get_distribution"]], "get_distribution() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.get_distribution"]], "get_dominant_basis_states() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.get_dominant_basis_states"]], "get_evaluator() (backendstatevectorprotocol method)": [[16, "inquanto.protocols.BackendStatevectorProtocol.get_evaluator"]], "get_evaluator() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.get_evaluator"]], "get_evaluator() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.get_evaluator"]], "get_evaluator() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.get_evaluator"]], "get_evaluator() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.get_evaluator"]], "get_evaluator() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.get_evaluator"]], "get_evaluator() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.get_evaluator"]], "get_evaluator() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.get_evaluator"]], "get_evaluator() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.get_evaluator"]], "get_evaluator() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.get_evaluator"]], "get_evaluator() (protocollist method)": [[16, "inquanto.protocols.ProtocolList.get_evaluator"]], "get_evaluator() (sparsestatevectorprotocol method)": [[16, "inquanto.protocols.SparseStatevectorProtocol.get_evaluator"]], "get_evaluator() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.get_evaluator"]], "get_evaluator() (swaptest method)": [[16, "inquanto.protocols.SwapTest.get_evaluator"]], "get_evaluator() (symbolicprotocol method)": [[16, "inquanto.protocols.SymbolicProtocol.get_evaluator"]], "get_evaluator_for_result() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.get_evaluator_for_result"]], "get_evaluators_for_results() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.get_evaluators_for_results"]], "get_iqpe_circuit (iterativephaseestimation property)": [[16, "inquanto.protocols.IterativePhaseEstimation.get_iqpe_circuit"]], "get_iqpe_circuit (iterativephaseestimationquantinuum property)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.get_iqpe_circuit"]], "get_measurement_outcome() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.get_measurement_outcome"]], "get_measurement_outcome() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.get_measurement_outcome"]], "get_measurement_outcome() (iterativephaseestimationstatevector method)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.get_measurement_outcome"]], "get_phaseless_qubit_state() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.get_phaseless_qubit_state"]], "get_runner() (backendstatevectorprotocol method)": [[16, "inquanto.protocols.BackendStatevectorProtocol.get_runner"]], "get_runner() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.get_runner"]], "get_runner() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.get_runner"]], "get_runner() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.get_runner"]], "get_runner() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.get_runner"]], "get_runner() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.get_runner"]], "get_runner() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.get_runner"]], "get_runner() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.get_runner"]], "get_runner() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.get_runner"]], "get_runner() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.get_runner"]], "get_runner() (sparsestatevectorprotocol method)": [[16, "inquanto.protocols.SparseStatevectorProtocol.get_runner"]], "get_runner() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.get_runner"]], "get_runner() (swaptest method)": [[16, "inquanto.protocols.SwapTest.get_runner"]], "get_runner() (symbolicprotocol method)": [[16, "inquanto.protocols.SymbolicProtocol.get_runner"]], "get_sampled_result() (backendresultbootstrap method)": [[16, "inquanto.protocols.BackendResultBootstrap.get_sampled_result"]], "get_sampled_result() (backendresultsplit method)": [[16, "inquanto.protocols.BackendResultSplit.get_sampled_result"]], "get_sampled_results() (backendresultbootstrap method)": [[16, "inquanto.protocols.BackendResultBootstrap.get_sampled_results"]], "get_sampled_results() (backendresultsplit method)": [[16, "inquanto.protocols.BackendResultSplit.get_sampled_results"]], "get_shots() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.get_shots"]], "get_shots() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.get_shots"]], "get_shots() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.get_shots"]], "get_shots() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.get_shots"]], "get_shots() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.get_shots"]], "get_shots() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.get_shots"]], "get_shots() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.get_shots"]], "get_shots() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.get_shots"]], "get_shots() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.get_shots"]], "get_shots() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.get_shots"]], "get_shots() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.get_shots"]], "get_shots() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.get_shots"]], "get_shots() (protocollist method)": [[16, "inquanto.protocols.ProtocolList.get_shots"]], "get_shots() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.get_shots"]], "get_shots() (swaptest method)": [[16, "inquanto.protocols.SwapTest.get_shots"]], "get_zero_state_probability() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.get_zero_state_probability"]], "get_zero_state_uncertainty() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.get_zero_state_uncertainty"]], "imag (compilationlevel attribute)": [[16, "inquanto.protocols.CompilationLevel.imag"]], "imag (ctrlustrat attribute)": [[16, "inquanto.protocols.CtrluStrat.imag"]], "is_built (computeuncompute property)": [[16, "inquanto.protocols.ComputeUncompute.is_built"]], "is_built (computeuncomputefactorizedoverlap property)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.is_built"]], "is_built (destructiveswaptest property)": [[16, "inquanto.protocols.DestructiveSwapTest.is_built"]], "is_built (factorizedoverlap property)": [[16, "inquanto.protocols.FactorizedOverlap.is_built"]], "is_built (hadamardtest property)": [[16, "inquanto.protocols.HadamardTest.is_built"]], "is_built (hadamardtestderivative property)": [[16, "inquanto.protocols.HadamardTestDerivative.is_built"]], "is_built (hadamardtestderivativeoverlap property)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.is_built"]], "is_built (hadamardtestoverlap property)": [[16, "inquanto.protocols.HadamardTestOverlap.is_built"]], "is_built (iterativephaseestimation property)": [[16, "inquanto.protocols.IterativePhaseEstimation.is_built"]], "is_built (iterativephaseestimationquantinuum property)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.is_built"]], "is_built (iterativephaseestimationstatevector property)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.is_built"]], "is_built (pauliaveraging property)": [[16, "inquanto.protocols.PauliAveraging.is_built"]], "is_built (projectivemeasurements property)": [[16, "inquanto.protocols.ProjectiveMeasurements.is_built"]], "is_built (swapfactorizedoverlap property)": [[16, "inquanto.protocols.SwapFactorizedOverlap.is_built"]], "is_built (swaptest property)": [[16, "inquanto.protocols.SwapTest.is_built"]], "is_compiled (computeuncompute property)": [[16, "inquanto.protocols.ComputeUncompute.is_compiled"]], "is_compiled (computeuncomputefactorizedoverlap property)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.is_compiled"]], "is_compiled (destructiveswaptest property)": [[16, "inquanto.protocols.DestructiveSwapTest.is_compiled"]], "is_compiled (factorizedoverlap property)": [[16, "inquanto.protocols.FactorizedOverlap.is_compiled"]], "is_compiled (hadamardtest property)": [[16, "inquanto.protocols.HadamardTest.is_compiled"]], "is_compiled (hadamardtestderivative property)": [[16, "inquanto.protocols.HadamardTestDerivative.is_compiled"]], "is_compiled (hadamardtestderivativeoverlap property)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.is_compiled"]], "is_compiled (hadamardtestoverlap property)": [[16, "inquanto.protocols.HadamardTestOverlap.is_compiled"]], "is_compiled (pauliaveraging property)": [[16, "inquanto.protocols.PauliAveraging.is_compiled"]], "is_compiled (projectivemeasurements property)": [[16, "inquanto.protocols.ProjectiveMeasurements.is_compiled"]], "is_compiled (protocollist property)": [[16, "inquanto.protocols.ProtocolList.is_compiled"]], "is_compiled (swapfactorizedoverlap property)": [[16, "inquanto.protocols.SwapFactorizedOverlap.is_compiled"]], "is_compiled (swaptest property)": [[16, "inquanto.protocols.SwapTest.is_compiled"]], "is_numeric (computeuncompute property)": [[16, "inquanto.protocols.ComputeUncompute.is_numeric"]], "is_numeric (computeuncomputefactorizedoverlap property)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.is_numeric"]], "is_numeric (destructiveswaptest property)": [[16, "inquanto.protocols.DestructiveSwapTest.is_numeric"]], "is_numeric (factorizedoverlap property)": [[16, "inquanto.protocols.FactorizedOverlap.is_numeric"]], "is_numeric (hadamardtest property)": [[16, "inquanto.protocols.HadamardTest.is_numeric"]], "is_numeric (hadamardtestderivative property)": [[16, "inquanto.protocols.HadamardTestDerivative.is_numeric"]], "is_numeric (hadamardtestderivativeoverlap property)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.is_numeric"]], "is_numeric (hadamardtestoverlap property)": [[16, "inquanto.protocols.HadamardTestOverlap.is_numeric"]], "is_numeric (iterativephaseestimation property)": [[16, "inquanto.protocols.IterativePhaseEstimation.is_numeric"]], "is_numeric (iterativephaseestimationquantinuum property)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.is_numeric"]], "is_numeric (pauliaveraging property)": [[16, "inquanto.protocols.PauliAveraging.is_numeric"]], "is_numeric (projectivemeasurements property)": [[16, "inquanto.protocols.ProjectiveMeasurements.is_numeric"]], "is_numeric (swapfactorizedoverlap property)": [[16, "inquanto.protocols.SwapFactorizedOverlap.is_numeric"]], "is_numeric (swaptest property)": [[16, "inquanto.protocols.SwapTest.is_numeric"]], "is_run (computeuncompute property)": [[16, "inquanto.protocols.ComputeUncompute.is_run"]], "is_run (computeuncomputefactorizedoverlap property)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.is_run"]], "is_run (destructiveswaptest property)": [[16, "inquanto.protocols.DestructiveSwapTest.is_run"]], "is_run (factorizedoverlap property)": [[16, "inquanto.protocols.FactorizedOverlap.is_run"]], "is_run (hadamardtest property)": [[16, "inquanto.protocols.HadamardTest.is_run"]], "is_run (hadamardtestderivative property)": [[16, "inquanto.protocols.HadamardTestDerivative.is_run"]], "is_run (hadamardtestderivativeoverlap property)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.is_run"]], "is_run (hadamardtestoverlap property)": [[16, "inquanto.protocols.HadamardTestOverlap.is_run"]], "is_run (iterativephaseestimation property)": [[16, "inquanto.protocols.IterativePhaseEstimation.is_run"]], "is_run (iterativephaseestimationquantinuum property)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.is_run"]], "is_run (iterativephaseestimationstatevector property)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.is_run"]], "is_run (pauliaveraging property)": [[16, "inquanto.protocols.PauliAveraging.is_run"]], "is_run (projectivemeasurements property)": [[16, "inquanto.protocols.ProjectiveMeasurements.is_run"]], "is_run (protocollist property)": [[16, "inquanto.protocols.ProtocolList.is_run"]], "is_run (swapfactorizedoverlap property)": [[16, "inquanto.protocols.SwapFactorizedOverlap.is_run"]], "is_run (swaptest property)": [[16, "inquanto.protocols.SwapTest.is_run"]], "is_symbolic (computeuncompute property)": [[16, "inquanto.protocols.ComputeUncompute.is_symbolic"]], "is_symbolic (computeuncomputefactorizedoverlap property)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.is_symbolic"]], "is_symbolic (destructiveswaptest property)": [[16, "inquanto.protocols.DestructiveSwapTest.is_symbolic"]], "is_symbolic (factorizedoverlap property)": [[16, "inquanto.protocols.FactorizedOverlap.is_symbolic"]], "is_symbolic (hadamardtest property)": [[16, "inquanto.protocols.HadamardTest.is_symbolic"]], "is_symbolic (hadamardtestderivative property)": [[16, "inquanto.protocols.HadamardTestDerivative.is_symbolic"]], "is_symbolic (hadamardtestderivativeoverlap property)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.is_symbolic"]], "is_symbolic (hadamardtestoverlap property)": [[16, "inquanto.protocols.HadamardTestOverlap.is_symbolic"]], "is_symbolic (iterativephaseestimation property)": [[16, "inquanto.protocols.IterativePhaseEstimation.is_symbolic"]], "is_symbolic (iterativephaseestimationquantinuum property)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.is_symbolic"]], "is_symbolic (pauliaveraging property)": [[16, "inquanto.protocols.PauliAveraging.is_symbolic"]], "is_symbolic (projectivemeasurements property)": [[16, "inquanto.protocols.ProjectiveMeasurements.is_symbolic"]], "is_symbolic (swapfactorizedoverlap property)": [[16, "inquanto.protocols.SwapFactorizedOverlap.is_symbolic"]], "is_symbolic (swaptest property)": [[16, "inquanto.protocols.SwapTest.is_symbolic"]], "k_iqpe (iterativephaseestimation property)": [[16, "inquanto.protocols.IterativePhaseEstimation.k_iqpe"]], "k_iqpe (iterativephaseestimationquantinuum property)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.k_iqpe"]], "launch() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.launch"]], "launch() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.launch"]], "launch() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.launch"]], "launch() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.launch"]], "launch() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.launch"]], "launch() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.launch"]], "launch() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.launch"]], "launch() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.launch"]], "launch() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.launch"]], "launch() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.launch"]], "launch() (iterativephaseestimationstatevector method)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.launch"]], "launch() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.launch"]], "launch() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.launch"]], "launch() (protocollist method)": [[16, "inquanto.protocols.ProtocolList.launch"]], "launch() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.launch"]], "launch() (swaptest method)": [[16, "inquanto.protocols.SwapTest.launch"]], "load() (backendstatevectorprotocol class method)": [[16, "inquanto.protocols.BackendStatevectorProtocol.load"]], "load() (canonicalphaseestimation class method)": [[16, "inquanto.protocols.CanonicalPhaseEstimation.load"]], "load() (computeuncompute class method)": [[16, "inquanto.protocols.ComputeUncompute.load"]], "load() (computeuncomputefactorizedoverlap class method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.load"]], "load() (destructiveswaptest class method)": [[16, "inquanto.protocols.DestructiveSwapTest.load"]], "load() (factorizedoverlap class method)": [[16, "inquanto.protocols.FactorizedOverlap.load"]], "load() (hadamardtest class method)": [[16, "inquanto.protocols.HadamardTest.load"]], "load() (hadamardtestderivative class method)": [[16, "inquanto.protocols.HadamardTestDerivative.load"]], "load() (hadamardtestderivativeoverlap class method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.load"]], "load() (hadamardtestoverlap class method)": [[16, "inquanto.protocols.HadamardTestOverlap.load"]], "load() (iterativephaseestimation class method)": [[16, "inquanto.protocols.IterativePhaseEstimation.load"]], "load() (iterativephaseestimationquantinuum class method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.load"]], "load() (iterativephaseestimationsinglecircuit class method)": [[16, "inquanto.protocols.IterativePhaseEstimationSingleCircuit.load"]], "load() (iterativephaseestimationstatevector class method)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.load"]], "load() (linearinterpolatorphaseestimator class method)": [[16, "inquanto.protocols.LinearInterpolatorPhaseEstimator.load"]], "load() (measurementpluralityphaseestimator class method)": [[16, "inquanto.protocols.MeasurementPluralityPhaseEstimator.load"]], "load() (pauliaveraging class method)": [[16, "inquanto.protocols.PauliAveraging.load"]], "load() (projectivemeasurements class method)": [[16, "inquanto.protocols.ProjectiveMeasurements.load"]], "load() (sparsestatevectorprotocol class method)": [[16, "inquanto.protocols.SparseStatevectorProtocol.load"]], "load() (swapfactorizedoverlap class method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.load"]], "load() (swaptest class method)": [[16, "inquanto.protocols.SwapTest.load"]], "load() (symbolicprotocol class method)": [[16, "inquanto.protocols.SymbolicProtocol.load"]], "loads() (backendstatevectorprotocol class method)": [[16, "inquanto.protocols.BackendStatevectorProtocol.loads"]], "loads() (canonicalphaseestimation class method)": [[16, "inquanto.protocols.CanonicalPhaseEstimation.loads"]], "loads() (computeuncompute class method)": [[16, "inquanto.protocols.ComputeUncompute.loads"]], "loads() (computeuncomputefactorizedoverlap class method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.loads"]], "loads() (destructiveswaptest class method)": [[16, "inquanto.protocols.DestructiveSwapTest.loads"]], "loads() (factorizedoverlap class method)": [[16, "inquanto.protocols.FactorizedOverlap.loads"]], "loads() (hadamardtest class method)": [[16, "inquanto.protocols.HadamardTest.loads"]], "loads() (hadamardtestderivative class method)": [[16, "inquanto.protocols.HadamardTestDerivative.loads"]], "loads() (hadamardtestderivativeoverlap class method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.loads"]], "loads() (hadamardtestoverlap class method)": [[16, "inquanto.protocols.HadamardTestOverlap.loads"]], "loads() (iterativephaseestimation class method)": [[16, "inquanto.protocols.IterativePhaseEstimation.loads"]], "loads() (iterativephaseestimationquantinuum class method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.loads"]], "loads() (iterativephaseestimationsinglecircuit class method)": [[16, "inquanto.protocols.IterativePhaseEstimationSingleCircuit.loads"]], "loads() (iterativephaseestimationstatevector class method)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.loads"]], "loads() (linearinterpolatorphaseestimator class method)": [[16, "inquanto.protocols.LinearInterpolatorPhaseEstimator.loads"]], "loads() (measurementpluralityphaseestimator class method)": [[16, "inquanto.protocols.MeasurementPluralityPhaseEstimator.loads"]], "loads() (pauliaveraging class method)": [[16, "inquanto.protocols.PauliAveraging.loads"]], "loads() (projectivemeasurements class method)": [[16, "inquanto.protocols.ProjectiveMeasurements.loads"]], "loads() (sparsestatevectorprotocol class method)": [[16, "inquanto.protocols.SparseStatevectorProtocol.loads"]], "loads() (swapfactorizedoverlap class method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.loads"]], "loads() (swaptest class method)": [[16, "inquanto.protocols.SwapTest.loads"]], "loads() (symbolicprotocol class method)": [[16, "inquanto.protocols.SymbolicProtocol.loads"]], "n_circuit (computeuncompute property)": [[16, "inquanto.protocols.ComputeUncompute.n_circuit"]], "n_circuit (computeuncomputefactorizedoverlap property)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.n_circuit"]], "n_circuit (destructiveswaptest property)": [[16, "inquanto.protocols.DestructiveSwapTest.n_circuit"]], "n_circuit (factorizedoverlap property)": [[16, "inquanto.protocols.FactorizedOverlap.n_circuit"]], "n_circuit (hadamardtest property)": [[16, "inquanto.protocols.HadamardTest.n_circuit"]], "n_circuit (hadamardtestderivative property)": [[16, "inquanto.protocols.HadamardTestDerivative.n_circuit"]], "n_circuit (hadamardtestderivativeoverlap property)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.n_circuit"]], "n_circuit (hadamardtestoverlap property)": [[16, "inquanto.protocols.HadamardTestOverlap.n_circuit"]], "n_circuit (pauliaveraging property)": [[16, "inquanto.protocols.PauliAveraging.n_circuit"]], "n_circuit (projectivemeasurements property)": [[16, "inquanto.protocols.ProjectiveMeasurements.n_circuit"]], "n_circuit (protocollist property)": [[16, "inquanto.protocols.ProtocolList.n_circuit"]], "n_circuit (swapfactorizedoverlap property)": [[16, "inquanto.protocols.SwapFactorizedOverlap.n_circuit"]], "n_circuit (swaptest property)": [[16, "inquanto.protocols.SwapTest.n_circuit"]], "n_plus_states (icebergoptions attribute)": [[16, "inquanto.protocols.IcebergOptions.n_plus_states"]], "n_plus_states (plainoptions attribute)": [[16, "inquanto.protocols.PlainOptions.n_plus_states"]], "n_shots (iterativephaseestimation property)": [[16, "inquanto.protocols.IterativePhaseEstimation.n_shots"]], "n_shots (iterativephaseestimationquantinuum property)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.n_shots"]], "numerator (compilationlevel attribute)": [[16, "inquanto.protocols.CompilationLevel.numerator"]], "numerator (ctrlustrat attribute)": [[16, "inquanto.protocols.CtrluStrat.numerator"]], "optimisation_level (iterativephaseestimation property)": [[16, "inquanto.protocols.IterativePhaseEstimation.optimisation_level"]], "optimisation_level (iterativephaseestimationquantinuum property)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.optimisation_level"]], "parameters (hadamardtestderivativeoverlap attribute)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.parameters"]], "populations (iterativephaseestimationstatevector property)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.populations"]], "post() (combinedmitigation method)": [[16, "inquanto.protocols.CombinedMitigation.post"]], "post() (pmsv method)": [[16, "inquanto.protocols.PMSV.post"]], "post() (spam method)": [[16, "inquanto.protocols.SPAM.post"]], "pre() (combinedmitigation method)": [[16, "inquanto.protocols.CombinedMitigation.pre"]], "pre() (pmsv method)": [[16, "inquanto.protocols.PMSV.pre"]], "pre() (spam method)": [[16, "inquanto.protocols.SPAM.pre"]], "real (compilationlevel attribute)": [[16, "inquanto.protocols.CompilationLevel.real"]], "real (ctrlustrat attribute)": [[16, "inquanto.protocols.CtrluStrat.real"]], "rebuild() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.rebuild"]], "rebuild() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.rebuild"]], "rebuild() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.rebuild"]], "rebuild() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.rebuild"]], "rebuild() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.rebuild"]], "rebuild() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.rebuild"]], "rebuild() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.rebuild"]], "rebuild() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.rebuild"]], "rebuild() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.rebuild"]], "rebuild() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.rebuild"]], "rebuild() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.rebuild"]], "rebuild() (swaptest method)": [[16, "inquanto.protocols.SwapTest.rebuild"]], "results (projectivemeasurements attribute)": [[16, "inquanto.protocols.ProjectiveMeasurements.results"]], "retrieve() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.retrieve"]], "retrieve() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.retrieve"]], "retrieve() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.retrieve"]], "retrieve() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.retrieve"]], "retrieve() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.retrieve"]], "retrieve() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.retrieve"]], "retrieve() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.retrieve"]], "retrieve() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.retrieve"]], "retrieve() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.retrieve"]], "retrieve() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.retrieve"]], "retrieve() (iterativephaseestimationstatevector method)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.retrieve"]], "retrieve() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.retrieve"]], "retrieve() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.retrieve"]], "retrieve() (protocollist method)": [[16, "inquanto.protocols.ProtocolList.retrieve"]], "retrieve() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.retrieve"]], "retrieve() (swaptest method)": [[16, "inquanto.protocols.SwapTest.retrieve"]], "run() (computeuncompute method)": [[16, "inquanto.protocols.ComputeUncompute.run"]], "run() (computeuncomputefactorizedoverlap method)": [[16, "inquanto.protocols.ComputeUncomputeFactorizedOverlap.run"]], "run() (destructiveswaptest method)": [[16, "inquanto.protocols.DestructiveSwapTest.run"]], "run() (factorizedoverlap method)": [[16, "inquanto.protocols.FactorizedOverlap.run"]], "run() (hadamardtest method)": [[16, "inquanto.protocols.HadamardTest.run"]], "run() (hadamardtestderivative method)": [[16, "inquanto.protocols.HadamardTestDerivative.run"]], "run() (hadamardtestderivativeoverlap method)": [[16, "inquanto.protocols.HadamardTestDerivativeOverlap.run"]], "run() (hadamardtestoverlap method)": [[16, "inquanto.protocols.HadamardTestOverlap.run"]], "run() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.run"]], "run() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.run"]], "run() (iterativephaseestimationstatevector method)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.run"]], "run() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.run"]], "run() (projectivemeasurements method)": [[16, "inquanto.protocols.ProjectiveMeasurements.run"]], "run() (protocollist method)": [[16, "inquanto.protocols.ProtocolList.run"]], "run() (swapfactorizedoverlap method)": [[16, "inquanto.protocols.SwapFactorizedOverlap.run"]], "run() (swaptest method)": [[16, "inquanto.protocols.SwapTest.run"]], "run_mitex() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.run_mitex"]], "run_mitres() (pauliaveraging method)": [[16, "inquanto.protocols.PauliAveraging.run_mitres"]], "sx_insertion (icebergoptions attribute)": [[16, "inquanto.protocols.IcebergOptions.sx_insertion"]], "syndrome_interval (icebergoptions attribute)": [[16, "inquanto.protocols.IcebergOptions.syndrome_interval"]], "to_array() (sparsestatevectorprotocol method)": [[16, "inquanto.protocols.SparseStatevectorProtocol.to_array"]], "to_bytes() (compilationlevel method)": [[16, "inquanto.protocols.CompilationLevel.to_bytes"]], "to_bytes() (ctrlustrat method)": [[16, "inquanto.protocols.CtrluStrat.to_bytes"]], "update_k_and_beta() (iterativephaseestimation method)": [[16, "inquanto.protocols.IterativePhaseEstimation.update_k_and_beta"]], "update_k_and_beta() (iterativephaseestimationquantinuum method)": [[16, "inquanto.protocols.IterativePhaseEstimationQuantinuum.update_k_and_beta"]], "update_k_and_beta() (iterativephaseestimationstatevector method)": [[16, "inquanto.protocols.IterativePhaseEstimationStatevector.update_k_and_beta"]], "column_kp (fermionspacebrillouin attribute)": [[17, "inquanto.spaces.FermionSpaceBrillouin.COLUMN_KP"]], "column_orb (fermionspace attribute)": [[17, "inquanto.spaces.FermionSpace.COLUMN_ORB"]], "column_orb (fermionspacebrillouin attribute)": [[17, "inquanto.spaces.FermionSpaceBrillouin.COLUMN_ORB"]], "column_orb (fermionspacesupercell attribute)": [[17, "inquanto.spaces.FermionSpaceSupercell.COLUMN_ORB"]], "column_rp (fermionspacesupercell attribute)": [[17, "inquanto.spaces.FermionSpaceSupercell.COLUMN_RP"]], "column_spin (fermionspace attribute)": [[17, "inquanto.spaces.FermionSpace.COLUMN_SPIN"]], "column_spin (fermionspacebrillouin attribute)": [[17, "inquanto.spaces.FermionSpaceBrillouin.COLUMN_SPIN"]], "column_spin (fermionspacesupercell attribute)": [[17, "inquanto.spaces.FermionSpaceSupercell.COLUMN_SPIN"]], "fermionspace (class in inquanto.spaces)": [[17, "inquanto.spaces.FermionSpace"]], "fermionspacebrillouin (class in inquanto.spaces)": [[17, "inquanto.spaces.FermionSpaceBrillouin"]], "fermionspacesupercell (class in inquanto.spaces)": [[17, "inquanto.spaces.FermionSpaceSupercell"]], "parafermionspace (class in inquanto.spaces)": [[17, "inquanto.spaces.ParaFermionSpace"]], "qubitspace (class in inquanto.spaces)": [[17, "inquanto.spaces.QubitSpace"]], "spin_alpha (fermionspace attribute)": [[17, "inquanto.spaces.FermionSpace.SPIN_ALPHA"]], "spin_alpha (fermionspacebrillouin attribute)": [[17, "inquanto.spaces.FermionSpaceBrillouin.SPIN_ALPHA"]], "spin_alpha (fermionspacesupercell attribute)": [[17, "inquanto.spaces.FermionSpaceSupercell.SPIN_ALPHA"]], "spin_beta (fermionspace attribute)": [[17, "inquanto.spaces.FermionSpace.SPIN_BETA"]], "spin_beta (fermionspacebrillouin attribute)": [[17, "inquanto.spaces.FermionSpaceBrillouin.SPIN_BETA"]], "spin_beta (fermionspacesupercell attribute)": [[17, "inquanto.spaces.FermionSpaceSupercell.SPIN_BETA"]], "spin_down (fermionspace attribute)": [[17, "inquanto.spaces.FermionSpace.SPIN_DOWN"]], "spin_down (fermionspacebrillouin attribute)": [[17, "inquanto.spaces.FermionSpaceBrillouin.SPIN_DOWN"]], "spin_down (fermionspacesupercell attribute)": [[17, "inquanto.spaces.FermionSpaceSupercell.SPIN_DOWN"]], "spin_up (fermionspace attribute)": [[17, "inquanto.spaces.FermionSpace.SPIN_UP"]], "spin_up (fermionspacebrillouin attribute)": [[17, "inquanto.spaces.FermionSpaceBrillouin.SPIN_UP"]], "spin_up (fermionspacesupercell attribute)": [[17, "inquanto.spaces.FermionSpaceSupercell.SPIN_UP"]], "chain_filters() (in module inquanto.spaces)": [[17, "inquanto.spaces.chain_filters"]], "check_translation_invariance() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.check_translation_invariance"]], "construct_contraction_mask_from_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_contraction_mask_from_operators"]], "construct_contraction_mask_from_operators() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.construct_contraction_mask_from_operators"]], "construct_contraction_mask_from_operators() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.construct_contraction_mask_from_operators"]], "construct_double_excitation_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_double_excitation_operators"]], "construct_double_qubit_excitation_operators() (parafermionspace method)": [[17, "inquanto.spaces.ParaFermionSpace.construct_double_qubit_excitation_operators"]], "construct_double_ucc_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_double_ucc_operators"]], "construct_generalized_double_excitation_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_generalized_double_excitation_operators"]], "construct_generalized_double_ucc_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_generalized_double_ucc_operators"]], "construct_generalized_pair_double_excitation_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_generalized_pair_double_excitation_operators"]], "construct_generalized_pair_double_ucc_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_generalized_pair_double_ucc_operators"]], "construct_generalized_single_excitation_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_generalized_single_excitation_operators"]], "construct_generalized_single_ucc_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_generalized_single_ucc_operators"]], "construct_imag_pauli_exponent_operators() (parafermionspace method)": [[17, "inquanto.spaces.ParaFermionSpace.construct_imag_pauli_exponent_operators"]], "construct_imag_pauli_exponent_operators() (qubitspace method)": [[17, "inquanto.spaces.QubitSpace.construct_imag_pauli_exponent_operators"]], "construct_n_body_spinless_pdm_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_n_body_spinless_pdm_operators"]], "construct_n_body_spinless_rdm_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_n_body_spinless_rdm_operators"]], "construct_number_alpha_operator() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_number_alpha_operator"]], "construct_number_beta_operator() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_number_beta_operator"]], "construct_number_operator() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_number_operator"]], "construct_number_operator() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.construct_number_operator"]], "construct_number_operator() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.construct_number_operator"]], "construct_one_body_operator_from_big_integral() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.construct_one_body_operator_from_big_integral"]], "construct_one_body_operator_from_integral() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_one_body_operator_from_integral"]], "construct_one_body_operator_from_integral() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.construct_one_body_operator_from_integral"]], "construct_one_body_spatial_rdm_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_one_body_spatial_rdm_operators"]], "construct_operator_from_string() (fermionspace static method)": [[17, "inquanto.spaces.FermionSpace.construct_operator_from_string"]], "construct_operator_from_string() (parafermionspace static method)": [[17, "inquanto.spaces.ParaFermionSpace.construct_operator_from_string"]], "construct_operator_from_string() (qubitspace static method)": [[17, "inquanto.spaces.QubitSpace.construct_operator_from_string"]], "construct_orbital_number_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_orbital_number_operators"]], "construct_permutation_operator() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.construct_permutation_operator"]], "construct_real_pauli_exponent_operators() (parafermionspace method)": [[17, "inquanto.spaces.ParaFermionSpace.construct_real_pauli_exponent_operators"]], "construct_real_pauli_exponent_operators() (qubitspace method)": [[17, "inquanto.spaces.QubitSpace.construct_real_pauli_exponent_operators"]], "construct_reverse_rp_permutation_operator() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.construct_reverse_rp_permutation_operator"]], "construct_scalar_operator() (fermionspace static method)": [[17, "inquanto.spaces.FermionSpace.construct_scalar_operator"]], "construct_scalar_operator() (fermionspacebrillouin static method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.construct_scalar_operator"]], "construct_scalar_operator() (fermionspacesupercell static method)": [[17, "inquanto.spaces.FermionSpaceSupercell.construct_scalar_operator"]], "construct_scalar_operator() (parafermionspace static method)": [[17, "inquanto.spaces.ParaFermionSpace.construct_scalar_operator"]], "construct_shift_rp_permutation_operator() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.construct_shift_rp_permutation_operator"]], "construct_single_excitation_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_single_excitation_operators"]], "construct_single_qubit_excitation_operators() (parafermionspace method)": [[17, "inquanto.spaces.ParaFermionSpace.construct_single_qubit_excitation_operators"]], "construct_single_ucc_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_single_ucc_operators"]], "construct_singlet_double_excitation_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_singlet_double_excitation_operators"]], "construct_singlet_double_ucc_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_singlet_double_ucc_operators"]], "construct_singlet_generalized_double_excitation_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_singlet_generalized_double_excitation_operators"]], "construct_singlet_generalized_single_excitation_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_singlet_generalized_single_excitation_operators"]], "construct_singlet_generalized_single_ucc_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_singlet_generalized_single_ucc_operators"]], "construct_singlet_single_excitation_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_singlet_single_excitation_operators"]], "construct_singlet_single_ucc_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_singlet_single_ucc_operators"]], "construct_spin_operator() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_spin_operator"]], "construct_swap_rp_permutation_operator() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.construct_swap_rp_permutation_operator"]], "construct_sz_operator() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_sz_operator"]], "construct_triplet_generalized_single_excitation_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_triplet_generalized_single_excitation_operators"]], "construct_triplet_generalized_single_ucc_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_triplet_generalized_single_ucc_operators"]], "construct_two_body_operator_from_big_integral() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.construct_two_body_operator_from_big_integral"]], "construct_two_body_operator_from_integral() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_two_body_operator_from_integral"]], "construct_two_body_operator_from_integral() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.construct_two_body_operator_from_integral"]], "construct_two_body_operator_from_tensor() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_two_body_operator_from_tensor"]], "construct_two_body_spatial_rdm_operators() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.construct_two_body_spatial_rdm_operators"]], "contract_occupation_space() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.contract_occupation_space"]], "contract_occupation_space() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.contract_occupation_space"]], "contract_occupation_state() (fermionspace static method)": [[17, "inquanto.spaces.FermionSpace.contract_occupation_state"]], "contract_occupation_state() (fermionspacebrillouin static method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.contract_occupation_state"]], "contract_occupation_state() (fermionspacesupercell static method)": [[17, "inquanto.spaces.FermionSpaceSupercell.contract_occupation_state"]], "contract_operator() (fermionspace static method)": [[17, "inquanto.spaces.FermionSpace.contract_operator"]], "contract_operator() (fermionspacebrillouin static method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.contract_operator"]], "contract_operator() (fermionspacesupercell static method)": [[17, "inquanto.spaces.FermionSpaceSupercell.contract_operator"]], "contract_state_mask() (fermionspace static method)": [[17, "inquanto.spaces.FermionSpace.contract_state_mask"]], "contract_state_mask() (fermionspacebrillouin static method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.contract_state_mask"]], "contract_state_mask() (fermionspacesupercell static method)": [[17, "inquanto.spaces.FermionSpaceSupercell.contract_state_mask"]], "contracted_system() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.contracted_system"]], "convert_mask_to_index_map() (fermionspace static method)": [[17, "inquanto.spaces.FermionSpace.convert_mask_to_index_map"]], "convert_mask_to_index_map() (fermionspacebrillouin static method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.convert_mask_to_index_map"]], "convert_mask_to_index_map() (fermionspacesupercell static method)": [[17, "inquanto.spaces.FermionSpaceSupercell.convert_mask_to_index_map"]], "count() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.count"]], "count() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.count"]], "count() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.count"]], "count_spin() (parafermionspace static method)": [[17, "inquanto.spaces.ParaFermionSpace.count_spin"]], "from_state() (fermionspace static method)": [[17, "inquanto.spaces.FermionSpace.from_state"]], "generate_cyclic_masks() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.generate_cyclic_masks"]], "generate_cyclic_masks() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.generate_cyclic_masks"]], "generate_cyclic_window_mask() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.generate_cyclic_window_mask"]], "generate_cyclic_window_mask() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.generate_cyclic_window_mask"]], "generate_fock_state_from_list() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.generate_fock_state_from_list"]], "generate_fock_state_from_spatial_big_occupation() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.generate_fock_state_from_spatial_big_occupation"]], "generate_fock_state_from_spatial_occupation() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.generate_fock_state_from_spatial_occupation"]], "generate_occupation_state() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.generate_occupation_state"]], "generate_occupation_state() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.generate_occupation_state"]], "generate_occupation_state() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.generate_occupation_state"]], "generate_occupation_state_from_list() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.generate_occupation_state_from_list"]], "generate_occupation_state_from_list() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.generate_occupation_state_from_list"]], "generate_occupation_state_from_spatial_occupation() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.generate_occupation_state_from_spatial_occupation"]], "generate_occupation_state_from_spatial_occupation() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.generate_occupation_state_from_spatial_occupation"]], "generate_subspace_singles() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.generate_subspace_singles"]], "generate_subspace_singlet_singles() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.generate_subspace_singlet_singles"]], "generate_subspace_triplet_singles() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.generate_subspace_triplet_singles"]], "get_orb_irreps_dataframe() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.get_orb_irreps_dataframe"]], "index() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.index"]], "index() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.index"]], "index() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.index"]], "index() (parafermionspace method)": [[17, "inquanto.spaces.ParaFermionSpace.index"]], "inquanto.spaces": [[17, "module-inquanto.spaces"]], "is_operator_permutation_invariant() (fermionspacesupercell static method)": [[17, "inquanto.spaces.FermionSpaceSupercell.is_operator_permutation_invariant"]], "load_h5() (fermionspace class method)": [[17, "inquanto.spaces.FermionSpace.load_h5"]], "load_h5() (fermionspacebrillouin class method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.load_h5"]], "load_h5() (fermionspacesupercell class method)": [[17, "inquanto.spaces.FermionSpaceSupercell.load_h5"]], "load_h5() (parafermionspace class method)": [[17, "inquanto.spaces.ParaFermionSpace.load_h5"]], "load_h5() (qubitspace class method)": [[17, "inquanto.spaces.QubitSpace.load_h5"]], "n_kp (fermionspacebrillouin property)": [[17, "inquanto.spaces.FermionSpaceBrillouin.n_kp"]], "n_ones() (parafermionspace method)": [[17, "inquanto.spaces.ParaFermionSpace.n_ones"]], "n_orb (fermionspace property)": [[17, "inquanto.spaces.FermionSpace.n_orb"]], "n_orb (parafermionspace property)": [[17, "inquanto.spaces.ParaFermionSpace.n_orb"]], "n_rp (fermionspacesupercell property)": [[17, "inquanto.spaces.FermionSpaceSupercell.n_rp"]], "n_spin_orb (fermionspace property)": [[17, "inquanto.spaces.FermionSpace.n_spin_orb"]], "n_spin_orb (fermionspacebrillouin property)": [[17, "inquanto.spaces.FermionSpaceBrillouin.n_spin_orb"]], "n_spin_orb (fermionspacesupercell property)": [[17, "inquanto.spaces.FermionSpaceSupercell.n_spin_orb"]], "n_spin_orb (parafermionspace property)": [[17, "inquanto.spaces.ParaFermionSpace.n_spin_orb"]], "operator_to_latex() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.operator_to_latex"]], "operator_to_latex() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.operator_to_latex"]], "operator_to_latex() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.operator_to_latex"]], "orb_irreps() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.orb_irreps"]], "paulis (parafermionspace property)": [[17, "inquanto.spaces.ParaFermionSpace.paulis"]], "paulis (qubitspace property)": [[17, "inquanto.spaces.QubitSpace.paulis"]], "permutation() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.permutation"]], "permutation_matrix() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.permutation_matrix"]], "point_group() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.point_group"]], "print_state() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.print_state"]], "print_state() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.print_state"]], "print_state() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.print_state"]], "quantum_label() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.quantum_label"]], "quantum_label() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.quantum_label"]], "quantum_label() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.quantum_label"]], "quantum_label() (parafermionspace method)": [[17, "inquanto.spaces.ParaFermionSpace.quantum_label"]], "quantum_number() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.quantum_number"]], "quantum_number() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.quantum_number"]], "quantum_number() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.quantum_number"]], "quantum_number() (parafermionspace method)": [[17, "inquanto.spaces.ParaFermionSpace.quantum_number"]], "quantum_number_kp() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.quantum_number_kp"]], "quantum_number_orb() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.quantum_number_orb"]], "quantum_number_orb() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.quantum_number_orb"]], "quantum_number_orb() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.quantum_number_orb"]], "quantum_number_orb() (parafermionspace method)": [[17, "inquanto.spaces.ParaFermionSpace.quantum_number_orb"]], "quantum_number_rp() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.quantum_number_rp"]], "quantum_number_spin() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.quantum_number_spin"]], "quantum_number_spin() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.quantum_number_spin"]], "quantum_number_spin() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.quantum_number_spin"]], "quantum_number_spin() (parafermionspace method)": [[17, "inquanto.spaces.ParaFermionSpace.quantum_number_spin"]], "reverse_rp_permutation() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.reverse_rp_permutation"]], "save_h5() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.save_h5"]], "save_h5() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.save_h5"]], "save_h5() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.save_h5"]], "save_h5() (parafermionspace method)": [[17, "inquanto.spaces.ParaFermionSpace.save_h5"]], "save_h5() (qubitspace method)": [[17, "inquanto.spaces.QubitSpace.save_h5"]], "select() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.select"]], "select() (fermionspacebrillouin method)": [[17, "inquanto.spaces.FermionSpaceBrillouin.select"]], "select() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.select"]], "shift_rp_permutation() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.shift_rp_permutation"]], "swap_rp_permutation() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.swap_rp_permutation"]], "symmetry_operators_z2() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.symmetry_operators_z2"]], "symmetry_operators_z2() (parafermionspace static method)": [[17, "inquanto.spaces.ParaFermionSpace.symmetry_operators_z2"]], "symmetry_operators_z2() (qubitspace static method)": [[17, "inquanto.spaces.QubitSpace.symmetry_operators_z2"]], "symmetry_operators_z2_in_sector() (fermionspace method)": [[17, "inquanto.spaces.FermionSpace.symmetry_operators_z2_in_sector"]], "symmetry_operators_z2_in_sector() (parafermionspace static method)": [[17, "inquanto.spaces.ParaFermionSpace.symmetry_operators_z2_in_sector"]], "symmetry_operators_z2_in_sector() (qubitspace static method)": [[17, "inquanto.spaces.QubitSpace.symmetry_operators_z2_in_sector"]], "translate_operator() (fermionspacesupercell method)": [[17, "inquanto.spaces.FermionSpaceSupercell.translate_operator"]], "fermionstate (class in inquanto.states)": [[18, "inquanto.states.FermionState"]], "fermionstatestring (class in inquanto.states)": [[18, "inquanto.states.FermionStateString"]], "qubitstate (class in inquanto.states)": [[18, "inquanto.states.QubitState"]], "qubitstatestring (class in inquanto.states)": [[18, "inquanto.states.QubitStateString"]], "state (class in inquanto.states)": [[18, "inquanto.states.State"]], "statestring (class in inquanto.states)": [[18, "inquanto.states.StateString"]], "all_modes (fermionstatestring property)": [[18, "inquanto.states.FermionStateString.all_modes"]], "all_modes (qubitstatestring property)": [[18, "inquanto.states.QubitStateString.all_modes"]], "all_modes (statestring property)": [[18, "inquanto.states.StateString.all_modes"]], "approx_equal_to() (fermionstate method)": [[18, "inquanto.states.FermionState.approx_equal_to"]], "approx_equal_to() (qubitstate method)": [[18, "inquanto.states.QubitState.approx_equal_to"]], "approx_equal_to() (state method)": [[18, "inquanto.states.State.approx_equal_to"]], "approx_equal_to_by_random_subs() (fermionstate method)": [[18, "inquanto.states.FermionState.approx_equal_to_by_random_subs"]], "approx_equal_to_by_random_subs() (qubitstate method)": [[18, "inquanto.states.QubitState.approx_equal_to_by_random_subs"]], "approx_equal_to_by_random_subs() (state method)": [[18, "inquanto.states.State.approx_equal_to_by_random_subs"]], "basis_states (fermionstate property)": [[18, "inquanto.states.FermionState.basis_states"]], "basis_states (qubitstate property)": [[18, "inquanto.states.QubitState.basis_states"]], "basis_states (state property)": [[18, "inquanto.states.State.basis_states"]], "clone() (fermionstate method)": [[18, "inquanto.states.FermionState.clone"]], "clone() (qubitstate method)": [[18, "inquanto.states.QubitState.clone"]], "clone() (state method)": [[18, "inquanto.states.State.clone"]], "coefficients (fermionstate property)": [[18, "inquanto.states.FermionState.coefficients"]], "coefficients (qubitstate property)": [[18, "inquanto.states.QubitState.coefficients"]], "coefficients (state property)": [[18, "inquanto.states.State.coefficients"]], "compress() (fermionstate method)": [[18, "inquanto.states.FermionState.compress"]], "compress() (qubitstate method)": [[18, "inquanto.states.QubitState.compress"]], "compress() (state method)": [[18, "inquanto.states.State.compress"]], "copy() (fermionstate method)": [[18, "inquanto.states.FermionState.copy"]], "copy() (qubitstate method)": [[18, "inquanto.states.QubitState.copy"]], "copy() (state method)": [[18, "inquanto.states.State.copy"]], "df() (fermionstate method)": [[18, "inquanto.states.FermionState.df"]], "df() (qubitstate method)": [[18, "inquanto.states.QubitState.df"]], "df() (state method)": [[18, "inquanto.states.State.df"]], "empty() (fermionstate method)": [[18, "inquanto.states.FermionState.empty"]], "empty() (qubitstate method)": [[18, "inquanto.states.QubitState.empty"]], "empty() (state method)": [[18, "inquanto.states.State.empty"]], "evalf() (fermionstate method)": [[18, "inquanto.states.FermionState.evalf"]], "evalf() (qubitstate method)": [[18, "inquanto.states.QubitState.evalf"]], "evalf() (state method)": [[18, "inquanto.states.State.evalf"]], "free_symbols() (fermionstate method)": [[18, "inquanto.states.FermionState.free_symbols"]], "free_symbols() (qubitstate method)": [[18, "inquanto.states.QubitState.free_symbols"]], "free_symbols() (state method)": [[18, "inquanto.states.State.free_symbols"]], "free_symbols_ordered() (fermionstate method)": [[18, "inquanto.states.FermionState.free_symbols_ordered"]], "free_symbols_ordered() (qubitstate method)": [[18, "inquanto.states.QubitState.free_symbols_ordered"]], "free_symbols_ordered() (state method)": [[18, "inquanto.states.State.free_symbols_ordered"]], "from_index() (fermionstatestring class method)": [[18, "inquanto.states.FermionStateString.from_index"]], "from_index() (qubitstatestring class method)": [[18, "inquanto.states.QubitStateString.from_index"]], "from_index() (statestring class method)": [[18, "inquanto.states.StateString.from_index"]], "from_list_int() (fermionstatestring class method)": [[18, "inquanto.states.FermionStateString.from_list_int"]], "from_list_int() (qubitstatestring class method)": [[18, "inquanto.states.QubitStateString.from_list_int"]], "from_list_int() (statestring class method)": [[18, "inquanto.states.StateString.from_list_int"]], "from_ndarray() (fermionstate class method)": [[18, "inquanto.states.FermionState.from_ndarray"]], "from_ndarray() (qubitstate class method)": [[18, "inquanto.states.QubitState.from_ndarray"]], "from_ndarray() (state class method)": [[18, "inquanto.states.State.from_ndarray"]], "from_sparray() (fermionstate class method)": [[18, "inquanto.states.FermionState.from_sparray"]], "from_sparray() (qubitstate class method)": [[18, "inquanto.states.QubitState.from_sparray"]], "from_sparray() (state class method)": [[18, "inquanto.states.State.from_sparray"]], "from_string() (fermionstate class method)": [[18, "inquanto.states.FermionState.from_string"]], "from_string() (fermionstatestring class method)": [[18, "inquanto.states.FermionStateString.from_string"]], "from_string() (qubitstate class method)": [[18, "inquanto.states.QubitState.from_string"]], "from_string() (qubitstatestring class method)": [[18, "inquanto.states.QubitStateString.from_string"]], "from_string() (state class method)": [[18, "inquanto.states.State.from_string"]], "from_string() (statestring class method)": [[18, "inquanto.states.StateString.from_string"]], "get_numeric_representation() (fermionstate method)": [[18, "inquanto.states.FermionState.get_numeric_representation"]], "get_numeric_representation() (qubitstate method)": [[18, "inquanto.states.QubitState.get_numeric_representation"]], "get_numeric_representation() (state method)": [[18, "inquanto.states.State.get_numeric_representation"]], "get_symbolic_representation() (fermionstate method)": [[18, "inquanto.states.FermionState.get_symbolic_representation"]], "get_symbolic_representation() (qubitstate method)": [[18, "inquanto.states.QubitState.get_symbolic_representation"]], "get_symbolic_representation() (state method)": [[18, "inquanto.states.State.get_symbolic_representation"]], "hamming_weight (fermionstatestring property)": [[18, "inquanto.states.FermionStateString.hamming_weight"]], "hamming_weight (qubitstatestring property)": [[18, "inquanto.states.QubitStateString.hamming_weight"]], "hamming_weight (statestring property)": [[18, "inquanto.states.StateString.hamming_weight"]], "inquanto.states": [[18, "module-inquanto.states"]], "is_all_coeff_complex() (fermionstate method)": [[18, "inquanto.states.FermionState.is_all_coeff_complex"]], "is_all_coeff_complex() (qubitstate method)": [[18, "inquanto.states.QubitState.is_all_coeff_complex"]], "is_all_coeff_complex() (state method)": [[18, "inquanto.states.State.is_all_coeff_complex"]], "is_all_coeff_imag() (fermionstate method)": [[18, "inquanto.states.FermionState.is_all_coeff_imag"]], "is_all_coeff_imag() (qubitstate method)": [[18, "inquanto.states.QubitState.is_all_coeff_imag"]], "is_all_coeff_imag() (state method)": [[18, "inquanto.states.State.is_all_coeff_imag"]], "is_all_coeff_real() (fermionstate method)": [[18, "inquanto.states.FermionState.is_all_coeff_real"]], "is_all_coeff_real() (qubitstate method)": [[18, "inquanto.states.QubitState.is_all_coeff_real"]], "is_all_coeff_real() (state method)": [[18, "inquanto.states.State.is_all_coeff_real"]], "is_all_coeff_symbolic() (fermionstate method)": [[18, "inquanto.states.FermionState.is_all_coeff_symbolic"]], "is_all_coeff_symbolic() (qubitstate method)": [[18, "inquanto.states.QubitState.is_all_coeff_symbolic"]], "is_all_coeff_symbolic() (state method)": [[18, "inquanto.states.State.is_all_coeff_symbolic"]], "is_any_coeff_complex() (fermionstate method)": [[18, "inquanto.states.FermionState.is_any_coeff_complex"]], "is_any_coeff_complex() (qubitstate method)": [[18, "inquanto.states.QubitState.is_any_coeff_complex"]], "is_any_coeff_complex() (state method)": [[18, "inquanto.states.State.is_any_coeff_complex"]], "is_any_coeff_imag() (fermionstate method)": [[18, "inquanto.states.FermionState.is_any_coeff_imag"]], "is_any_coeff_imag() (qubitstate method)": [[18, "inquanto.states.QubitState.is_any_coeff_imag"]], "is_any_coeff_imag() (state method)": [[18, "inquanto.states.State.is_any_coeff_imag"]], "is_any_coeff_real() (fermionstate method)": [[18, "inquanto.states.FermionState.is_any_coeff_real"]], "is_any_coeff_real() (qubitstate method)": [[18, "inquanto.states.QubitState.is_any_coeff_real"]], "is_any_coeff_real() (state method)": [[18, "inquanto.states.State.is_any_coeff_real"]], "is_any_coeff_symbolic() (fermionstate method)": [[18, "inquanto.states.FermionState.is_any_coeff_symbolic"]], "is_any_coeff_symbolic() (qubitstate method)": [[18, "inquanto.states.QubitState.is_any_coeff_symbolic"]], "is_any_coeff_symbolic() (state method)": [[18, "inquanto.states.State.is_any_coeff_symbolic"]], "is_basis_state() (fermionstate method)": [[18, "inquanto.states.FermionState.is_basis_state"]], "is_basis_state() (qubitstate method)": [[18, "inquanto.states.QubitState.is_basis_state"]], "is_basis_state() (state method)": [[18, "inquanto.states.State.is_basis_state"]], "is_normalized() (fermionstate method)": [[18, "inquanto.states.FermionState.is_normalized"]], "is_normalized() (qubitstate method)": [[18, "inquanto.states.QubitState.is_normalized"]], "is_normalized() (state method)": [[18, "inquanto.states.State.is_normalized"]], "is_parallel_with() (fermionstate method)": [[18, "inquanto.states.FermionState.is_parallel_with"]], "is_parallel_with() (qubitstate method)": [[18, "inquanto.states.QubitState.is_parallel_with"]], "is_parallel_with() (state method)": [[18, "inquanto.states.State.is_parallel_with"]], "is_unit_1norm() (fermionstate method)": [[18, "inquanto.states.FermionState.is_unit_1norm"]], "is_unit_1norm() (qubitstate method)": [[18, "inquanto.states.QubitState.is_unit_1norm"]], "is_unit_1norm() (state method)": [[18, "inquanto.states.State.is_unit_1norm"]], "is_unit_2norm() (fermionstate method)": [[18, "inquanto.states.FermionState.is_unit_2norm"]], "is_unit_2norm() (qubitstate method)": [[18, "inquanto.states.QubitState.is_unit_2norm"]], "is_unit_2norm() (state method)": [[18, "inquanto.states.State.is_unit_2norm"]], "is_unit_norm() (fermionstate method)": [[18, "inquanto.states.FermionState.is_unit_norm"]], "is_unit_norm() (qubitstate method)": [[18, "inquanto.states.QubitState.is_unit_norm"]], "is_unit_norm() (state method)": [[18, "inquanto.states.State.is_unit_norm"]], "items() (fermionstate method)": [[18, "inquanto.states.FermionState.items"]], "items() (qubitstate method)": [[18, "inquanto.states.QubitState.items"]], "items() (state method)": [[18, "inquanto.states.State.items"]], "key_from_str() (fermionstate class method)": [[18, "inquanto.states.FermionState.key_from_str"]], "key_from_str() (qubitstate class method)": [[18, "inquanto.states.QubitState.key_from_str"]], "key_from_str() (state class method)": [[18, "inquanto.states.State.key_from_str"]], "load_h5() (fermionstate class method)": [[18, "inquanto.states.FermionState.load_h5"]], "load_h5() (fermionstatestring class method)": [[18, "inquanto.states.FermionStateString.load_h5"]], "load_h5() (qubitstate class method)": [[18, "inquanto.states.QubitState.load_h5"]], "load_h5() (qubitstatestring class method)": [[18, "inquanto.states.QubitStateString.load_h5"]], "load_h5() (state class method)": [[18, "inquanto.states.State.load_h5"]], "load_h5() (statestring class method)": [[18, "inquanto.states.StateString.load_h5"]], "make_hashable() (fermionstate method)": [[18, "inquanto.states.FermionState.make_hashable"]], "make_hashable() (qubitstate method)": [[18, "inquanto.states.QubitState.make_hashable"]], "make_hashable() (state method)": [[18, "inquanto.states.State.make_hashable"]], "map() (fermionstate method)": [[18, "inquanto.states.FermionState.map"]], "map() (qubitstate method)": [[18, "inquanto.states.QubitState.map"]], "map() (state method)": [[18, "inquanto.states.State.map"]], "mode_class (fermionstatestring attribute)": [[18, "inquanto.states.FermionStateString.mode_class"]], "mode_class (qubitstatestring attribute)": [[18, "inquanto.states.QubitStateString.mode_class"]], "mode_class (statestring attribute)": [[18, "inquanto.states.StateString.mode_class"]], "n_qubits (qubitstate property)": [[18, "inquanto.states.QubitState.n_qubits"]], "n_symbols (fermionstate property)": [[18, "inquanto.states.FermionState.n_symbols"]], "n_symbols (qubitstate property)": [[18, "inquanto.states.QubitState.n_symbols"]], "n_symbols (state property)": [[18, "inquanto.states.State.n_symbols"]], "norm_coefficients() (fermionstate method)": [[18, "inquanto.states.FermionState.norm_coefficients"]], "norm_coefficients() (qubitstate method)": [[18, "inquanto.states.QubitState.norm_coefficients"]], "norm_coefficients() (state method)": [[18, "inquanto.states.State.norm_coefficients"]], "normalized() (fermionstate method)": [[18, "inquanto.states.FermionState.normalized"]], "normalized() (qubitstate method)": [[18, "inquanto.states.QubitState.normalized"]], "normalized() (state method)": [[18, "inquanto.states.State.normalized"]], "num_modes (fermionstate property)": [[18, "inquanto.states.FermionState.num_modes"]], "num_modes (fermionstatestring property)": [[18, "inquanto.states.FermionStateString.num_modes"]], "num_modes (qubitstate property)": [[18, "inquanto.states.QubitState.num_modes"]], "num_modes (qubitstatestring property)": [[18, "inquanto.states.QubitStateString.num_modes"]], "num_modes (state property)": [[18, "inquanto.states.State.num_modes"]], "num_modes (statestring property)": [[18, "inquanto.states.StateString.num_modes"]], "num_qubits (qubitstate property)": [[18, "inquanto.states.QubitState.num_qubits"]], "occupations_ordered() (fermionstatestring method)": [[18, "inquanto.states.FermionStateString.occupations_ordered"]], "occupations_ordered() (qubitstatestring method)": [[18, "inquanto.states.QubitStateString.occupations_ordered"]], "occupations_ordered() (statestring method)": [[18, "inquanto.states.StateString.occupations_ordered"]], "print_table() (fermionstate method)": [[18, "inquanto.states.FermionState.print_table"]], "print_table() (qubitstate method)": [[18, "inquanto.states.QubitState.print_table"]], "print_table() (state method)": [[18, "inquanto.states.State.print_table"]], "qubit_encode() (fermionstate method)": [[18, "inquanto.states.FermionState.qubit_encode"]], "qubit_encode() (fermionstatestring method)": [[18, "inquanto.states.FermionStateString.qubit_encode"]], "remove_global_phase() (fermionstate method)": [[18, "inquanto.states.FermionState.remove_global_phase"]], "remove_global_phase() (qubitstate method)": [[18, "inquanto.states.QubitState.remove_global_phase"]], "remove_global_phase() (state method)": [[18, "inquanto.states.State.remove_global_phase"]], "reversed_order() (fermionstate method)": [[18, "inquanto.states.FermionState.reversed_order"]], "reversed_order() (qubitstate method)": [[18, "inquanto.states.QubitState.reversed_order"]], "reversed_order() (state method)": [[18, "inquanto.states.State.reversed_order"]], "save_h5() (fermionstate method)": [[18, "inquanto.states.FermionState.save_h5"]], "save_h5() (fermionstatestring method)": [[18, "inquanto.states.FermionStateString.save_h5"]], "save_h5() (qubitstate method)": [[18, "inquanto.states.QubitState.save_h5"]], "save_h5() (qubitstatestring method)": [[18, "inquanto.states.QubitStateString.save_h5"]], "save_h5() (state method)": [[18, "inquanto.states.State.save_h5"]], "save_h5() (statestring method)": [[18, "inquanto.states.StateString.save_h5"]], "set_global_phase() (fermionstate method)": [[18, "inquanto.states.FermionState.set_global_phase"]], "set_global_phase() (qubitstate method)": [[18, "inquanto.states.QubitState.set_global_phase"]], "set_global_phase() (state method)": [[18, "inquanto.states.State.set_global_phase"]], "simplify() (fermionstate method)": [[18, "inquanto.states.FermionState.simplify"]], "simplify() (qubitstate method)": [[18, "inquanto.states.QubitState.simplify"]], "simplify() (state method)": [[18, "inquanto.states.State.simplify"]], "single_term (fermionstate property)": [[18, "inquanto.states.FermionState.single_term"]], "single_term (qubitstate property)": [[18, "inquanto.states.QubitState.single_term"]], "single_term (state property)": [[18, "inquanto.states.State.single_term"]], "split() (fermionstate method)": [[18, "inquanto.states.FermionState.split"]], "split() (qubitstate method)": [[18, "inquanto.states.QubitState.split"]], "split() (state method)": [[18, "inquanto.states.State.split"]], "state_symbols (qubitstate property)": [[18, "inquanto.states.QubitState.state_symbols"]], "string_class (fermionstate attribute)": [[18, "inquanto.states.FermionState.string_class"]], "string_class (qubitstate attribute)": [[18, "inquanto.states.QubitState.string_class"]], "string_class (state attribute)": [[18, "inquanto.states.State.string_class"]], "subs() (fermionstate method)": [[18, "inquanto.states.FermionState.subs"]], "subs() (qubitstate method)": [[18, "inquanto.states.QubitState.subs"]], "subs() (state method)": [[18, "inquanto.states.State.subs"]], "symbol_substitution() (fermionstate method)": [[18, "inquanto.states.FermionState.symbol_substitution"]], "symbol_substitution() (qubitstate method)": [[18, "inquanto.states.QubitState.symbol_substitution"]], "symbol_substitution() (state method)": [[18, "inquanto.states.State.symbol_substitution"]], "sympify() (fermionstate method)": [[18, "inquanto.states.FermionState.sympify"]], "sympify() (qubitstate method)": [[18, "inquanto.states.QubitState.sympify"]], "sympify() (state method)": [[18, "inquanto.states.State.sympify"]], "terms (fermionstate property)": [[18, "inquanto.states.FermionState.terms"]], "terms (qubitstate property)": [[18, "inquanto.states.QubitState.terms"]], "terms (state property)": [[18, "inquanto.states.State.terms"]], "to_index() (fermionstatestring method)": [[18, "inquanto.states.FermionStateString.to_index"]], "to_index() (qubitstatestring method)": [[18, "inquanto.states.QubitStateString.to_index"]], "to_index() (statestring method)": [[18, "inquanto.states.StateString.to_index"]], "to_ndarray() (fermionstate method)": [[18, "inquanto.states.FermionState.to_ndarray"]], "to_ndarray() (qubitstate method)": [[18, "inquanto.states.QubitState.to_ndarray"]], "to_ndarray() (state method)": [[18, "inquanto.states.State.to_ndarray"]], "to_sparray() (fermionstate method)": [[18, "inquanto.states.FermionState.to_sparray"]], "to_sparray() (qubitstate method)": [[18, "inquanto.states.QubitState.to_sparray"]], "to_sparray() (state method)": [[18, "inquanto.states.State.to_sparray"]], "unsympify() (fermionstate method)": [[18, "inquanto.states.FermionState.unsympify"]], "unsympify() (qubitstate method)": [[18, "inquanto.states.QubitState.unsympify"]], "unsympify() (state method)": [[18, "inquanto.states.State.unsympify"]], "vdot() (fermionstate method)": [[18, "inquanto.states.FermionState.vdot"]], "vdot() (qubitstate method)": [[18, "inquanto.states.QubitState.vdot"]], "vdot() (state method)": [[18, "inquanto.states.State.vdot"]], "zero() (fermionstate class method)": [[18, "inquanto.states.FermionState.zero"]], "zero() (qubitstate class method)": [[18, "inquanto.states.QubitState.zero"]], "zero() (state class method)": [[18, "inquanto.states.State.zero"]], "pointgroup (class in inquanto.symmetry)": [[19, "inquanto.symmetry.PointGroup"]], "tapererz2 (class in inquanto.symmetry)": [[19, "inquanto.symmetry.TapererZ2"]], "tapererz2.xoperatorminimalerror": [[19, "inquanto.symmetry.TapererZ2.XOperatorMinimalError"]], "compute_representation_components() (pointgroup method)": [[19, "inquanto.symmetry.PointGroup.compute_representation_components"]], "find_x_operators() (tapererz2 method)": [[19, "inquanto.symmetry.TapererZ2.find_x_operators"]], "get_generators_symbol2irrep_dict() (pointgroup static method)": [[19, "inquanto.symmetry.PointGroup.get_generators_symbol2irrep_dict"]], "get_irrep2symbol_dict() (pointgroup static method)": [[19, "inquanto.symmetry.PointGroup.get_irrep2symbol_dict"]], "get_supported_point_group_dict() (pointgroup static method)": [[19, "inquanto.symmetry.PointGroup.get_supported_point_group_dict"]], "get_symbol2irrep_dict() (pointgroup static method)": [[19, "inquanto.symmetry.PointGroup.get_symbol2irrep_dict"]], "inquanto.symmetry": [[19, "module-inquanto.symmetry"]], "irrep_direct_product() (pointgroup method)": [[19, "inquanto.symmetry.PointGroup.irrep_direct_product"]], "mini_character_table() (pointgroup class method)": [[19, "inquanto.symmetry.PointGroup.mini_character_table"]], "print_character_table() (pointgroup method)": [[19, "inquanto.symmetry.PointGroup.print_character_table"]], "supported_groups() (pointgroup static method)": [[19, "inquanto.symmetry.PointGroup.supported_groups"]], "symmetry_operators (tapererz2 attribute)": [[19, "inquanto.symmetry.TapererZ2.symmetry_operators"]], "symmetry_sectors (tapererz2 attribute)": [[19, "inquanto.symmetry.TapererZ2.symmetry_sectors"]], "taperable_qubits (tapererz2 attribute)": [[19, "inquanto.symmetry.TapererZ2.taperable_qubits"]], "tapered_operator() (tapererz2 method)": [[19, "inquanto.symmetry.TapererZ2.tapered_operator"]], "tapered_state() (tapererz2 method)": [[19, "inquanto.symmetry.TapererZ2.tapered_state"]], "tapering_unitary() (tapererz2 method)": [[19, "inquanto.symmetry.TapererZ2.tapering_unitary"]]}})
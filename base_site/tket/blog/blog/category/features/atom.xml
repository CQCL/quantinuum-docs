<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://docs.quantinuum.com/tket/blog/</id>
  <title>TKET Developer Blog - Posts in Features</title>
  <updated>2025-03-03T00:17:43.074652+00:00</updated>
  <link href="https://docs.quantinuum.com/tket/blog/"/>
  <link href="https://docs.quantinuum.com/tket/blog/blog/category/features/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.io/" version="0.11.12">ABlog</generator>
  <entry>
    <id>https://docs.quantinuum.com/tket/blog/posts/controlled_gates/</id>
    <title>Improved Controlled Gates in pytket</title>
    <updated>2023-10-24T00:00:00+00:00</updated>
    <author>
      <name>Callum Macpherson</name>
    </author>
    <content type="html">&lt;section id="improved-controlled-gates-in-pytket"&gt;

&lt;p&gt;Last week brought a new pytket 1.21.0 release! See the &lt;a class="reference external" href="https://docs.quantinuum.com/tket/api-docs/changelog.html#october-2023"&gt;changelog&lt;/a&gt; for a rundown of all the new features and fixes. This blog will focus on improvements to controlled gates in pytket with the new &lt;a class="reference external" href="https://docs.quantinuum.com/tket/api-docs/circuit.html#pytket.circuit.ConjugationBox"&gt;ConjugationBox&lt;/a&gt; feature enabling some key circuit primitives to be implemented far more efficiently. There are also some improvements to how controlled gates are displayed in the circuit renderer.&lt;/p&gt;
&lt;section id="examples-of-controlled-gates"&gt;
&lt;h2&gt;Examples of Controlled Gates&lt;/h2&gt;
&lt;p&gt;Controlled gates show up all the time in quantum computing. These gates modify a target qubit depending on the state of a control qubit (or a set of control qubits).&lt;/p&gt;
&lt;p&gt;Two commonly used controlled gates are the CX (or CNOT) gate and the CCZ gate.&lt;/p&gt;
&lt;div class="table-wrapper colwidths-auto docutils container"&gt;
&lt;table class="docutils align-default"&gt;
&lt;thead&gt;
&lt;tr class="row-odd"&gt;&lt;th class="head text-center"&gt;&lt;p&gt;CX&lt;/p&gt;&lt;/th&gt;
&lt;th class="head text-center"&gt;&lt;p&gt;CCZ&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="row-even"&gt;&lt;td class="text-center"&gt;&lt;p&gt;&lt;img alt="" src="https://docs.quantinuum.com/tket/blog/_images/CX.png" /&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class="text-center"&gt;&lt;p&gt;&lt;img alt="" src="https://docs.quantinuum.com/tket/blog/_images/CCZ.png" /&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;As you probably know, the action of the CX gate is to apply a X operation to flip the state of a target qubit if its control qubit is in the &lt;span class="math notranslate nohighlight"&gt;\(|1\rangle\)&lt;/span&gt; state. If the control qubit is not in the &lt;span class="math notranslate nohighlight"&gt;\(|1\rangle\)&lt;/span&gt; state then this gate acts as the identity gate.&lt;/p&gt;
&lt;p&gt;We can understand the action of the CX gate on a two qubit state by looking at its truth table. The CX gate has the following action on the two qubit computational basis states.&lt;/p&gt;
&lt;div class="table-wrapper colwidths-auto docutils container"&gt;
&lt;table class="docutils align-default"&gt;
&lt;thead&gt;
&lt;tr class="row-odd"&gt;&lt;th class="head"&gt;&lt;p&gt;Input State&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Output State&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;00&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;00&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;01&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;01&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;10&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;11&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;10&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;The action of the CCZ gate shown above is to add a phase of &lt;span class="math notranslate nohighlight"&gt;\(-1\)&lt;/span&gt; if both control qubits are in the &lt;span class="math notranslate nohighlight"&gt;\(|1\rangle\)&lt;/span&gt; state. So if the combined state of both controls is &lt;span class="math notranslate nohighlight"&gt;\(|11\rangle\)&lt;/span&gt;, then a Pauli Z operation is applied to the target qubit.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="some-terminology"&gt;
&lt;h2&gt;Some Terminology&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Control state:&lt;/strong&gt; The state that the control qubits must be in for the operation to be applied to the target. Typically we assume that the control state is “all &lt;span class="math notranslate nohighlight"&gt;\(|1\rangle\)&lt;/span&gt;” unless specified otherwise. However this need not be the case. In general the control state can be any string of &lt;span class="math notranslate nohighlight"&gt;\(|0\rangle\)&lt;/span&gt; and &lt;span class="math notranslate nohighlight"&gt;\(|1\rangle\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Base gate:&lt;/strong&gt; The operation that is applied to the target qubit(s) when the control qubits are in the control state. So for the CCZ gate above the control state is &lt;span class="math notranslate nohighlight"&gt;\(|11\rangle\)&lt;/span&gt; and the base gate is the Pauli &lt;span class="math notranslate nohighlight"&gt;\(Z\)&lt;/span&gt; operation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conjugation pattern:&lt;/strong&gt; We say that a unitary operation &lt;span class="math notranslate nohighlight"&gt;\(U_c\)&lt;/span&gt; fits the conjugation pattern if it can be expressed as follows&lt;/p&gt;
&lt;div class="math-wrapper docutils container"&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[
\begin{equation}
U_{c} = V \, A \, V^\dagger \, .
\end{equation}
\]&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This compute (&lt;span class="math notranslate nohighlight"&gt;\(V\)&lt;/span&gt;), action (&lt;span class="math notranslate nohighlight"&gt;\(A\)&lt;/span&gt;), uncompute (&lt;span class="math notranslate nohighlight"&gt;\(V^\dagger\)&lt;/span&gt;) pattern occurs frequently in quantum computing. This pattern is captured by the new &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ConjugationBox&lt;/span&gt;&lt;/code&gt; construct in pytket.&lt;/p&gt;
&lt;p&gt;In pytket &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1.21.0&lt;/span&gt;&lt;/code&gt; we can find much smarter decompositions for controlled gates where the base gate fits the conjugation pattern &lt;span class="math notranslate nohighlight"&gt;\(V \, A \, V^\dagger\)&lt;/span&gt;. The trick here is that to construct a controlled &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ConjugationBox&lt;/span&gt;&lt;/code&gt; you only have to control on the central &lt;span class="math notranslate nohighlight"&gt;\(A\)&lt;/span&gt; operation rather than every single gate in the circuit.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="an-example-using-pauli-gadgets"&gt;
&lt;h2&gt;An Example Using Pauli Gadgets&lt;/h2&gt;
&lt;p&gt;Shown below is an example of a Pauli gadget circuit. This is a great example of a common circuit primitive that fits the conjugation pattern &lt;span class="math notranslate nohighlight"&gt;\(V \, A \, V^\dagger\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="align-center" src="https://docs.quantinuum.com/tket/blog/_images/Pauli_gadget.png" /&gt;&lt;/p&gt;
&lt;p&gt;This circuit implements a unitary of the form &lt;span class="math notranslate nohighlight"&gt;\( U = e^{-i \frac{\pi}{2} \theta P}\)&lt;/span&gt; where &lt;span class="math notranslate nohighlight"&gt;\(\theta = 0.7\)&lt;/span&gt; and &lt;span class="math notranslate nohighlight"&gt;\(P\)&lt;/span&gt; is a tensor product of Pauli operators.&lt;/p&gt;
&lt;div class="math-wrapper docutils container"&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[
\begin{equation}
P = Z \otimes Z \otimes Y \otimes X 
\end{equation}
\]&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This type of operation shows up very naturally in quantum chemistry when trotterising Hamiltonians. Readers familiar with the quantum phase estimation algorithm (QPE) may know that QPE requires many controlled unitary operations to implement. Often the unitary will be a time evolved Hamiltonian represented by a Pauli gadget. So being able to implement these controlled unitaries efficiently could reduce the complexity of the circuit needed for QPE.&lt;/p&gt;
&lt;p&gt;In addition to having the form of a conjugation pattern, Pauli gadget circuits have some cool algebraic properties that can be exploited for circuit optimisation [&lt;a class="reference internal" href="#references"&gt;&lt;span class="xref myst"&gt;1&lt;/span&gt;&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;Now if we squint at the circuit diagram above, we see that it’s almost symmetric around the central Rz rotation. In fact, the left hand side of the Rz gate is exactly the dagger of the right hand side. If we identify the central Rz gate as the action &lt;span class="math notranslate nohighlight"&gt;\(A\)&lt;/span&gt; then it is clear that the subcircuits to the left and right hand side of &lt;span class="math notranslate nohighlight"&gt;\(A\)&lt;/span&gt; can be identified with &lt;span class="math notranslate nohighlight"&gt;\( V\)&lt;/span&gt; and &lt;span class="math notranslate nohighlight"&gt;\(V^\dagger\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Since all Pauli gadget circuits are in the form of a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ConjugationBox&lt;/span&gt;&lt;/code&gt;, it is sufficient to simply control on the central Rz operation like so.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="align-center" src="https://docs.quantinuum.com/tket/blog/_images/controlled_pauliZZYX.png" /&gt;&lt;/p&gt;
&lt;p&gt;Let’s now construct a circuit for this Pauli gadget using pytket’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PauliExpBox&lt;/span&gt;&lt;/code&gt; construction. More information on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PauliExpBox&lt;/span&gt;&lt;/code&gt; can be found in the &lt;a class="reference internal" href="#../user-guide/manual/manual_circuit.html#pauli-exponential-boxes"&gt;&lt;span class="xref myst"&gt;user manual&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytket.pauli&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pauli&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytket.circuit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PauliExpBox&lt;/span&gt;

&lt;span class="n"&gt;zzyx_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PauliExpBox&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;Pauli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pauli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pauli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pauli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we can construct a controlled &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PauliExpBox&lt;/span&gt;&lt;/code&gt; using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QControlBox&lt;/span&gt;&lt;/code&gt;. A &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PauliExpBox&lt;/span&gt;&lt;/code&gt; is now handled internally as a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ConjugationBox&lt;/span&gt;&lt;/code&gt; so the controlled operation can be done much more efficiently.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytket.circuit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QControlBox&lt;/span&gt;

&lt;span class="c1"&gt;# A controlled PauliExpBox with a single control (n=1)&lt;/span&gt;
&lt;span class="n"&gt;controlled_zzyx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QControlBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zzyx_box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now that we have our constructed our controlled unitary, we can do a comparison between pytket versions to highlight the benefit on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ConjugationBox&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s run the code below with pytket 1.20.1 and pytket 1.21 and compare the number of gates required to implement this controlled Pauli gadget. We will decompose the boxes and compile the circuit down to one and two qubit gates with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SynthesiseTK&lt;/span&gt;&lt;/code&gt; pass to ensure a fair comparison.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytket&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Circuit&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytket.passes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DecomposeBoxes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SynthesiseTK&lt;/span&gt;

&lt;span class="n"&gt;test_circ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Circuit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;test_circ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_gate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controlled_zzyx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;DecomposeBoxes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_circ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SynthesiseTK&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_circ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Total gate count:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_circ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n_gates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2 qubit gates:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_circ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n_2qb_gates&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;pytket 1.20.1&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="n"&gt;gate&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;103&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;qubit&lt;/span&gt; &lt;span class="n"&gt;gates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;pytket 1.21.0&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="n"&gt;gate&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;qubit&lt;/span&gt; &lt;span class="n"&gt;gates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now that’s a big difference! We see pytket 1.21.0 is able to use the underlying &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ConjuagtionBox&lt;/span&gt;&lt;/code&gt; structure of the Pauli gadget to find a far more efficient implementation.&lt;/p&gt;
&lt;p&gt;The improvement in the number of two qubit entangling gates is particularly nice when we think about running circuits on real quantum hardware. Entangling gates are in general much more noisy than single qubit gates so getting rid of them where possible can be great for boosting the fidelity of our computation.&lt;/p&gt;
&lt;p&gt;The reason for the reduction is that pytket 1.21.0 can simply control on the single Rz in the Pauli gadget. Previously if we wanted to construct a controlled Pauli gadget, pytket would naively construct a controlled version of every single gate in the base Pauli gadget circuit. In version 1.20.1, pytket naively converts all of the CX gates to CCX gates and then has to compile those down to one and two qubit gates with a significant overhead.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;We have shown how we can compile controlled Pauli gadget circuits by making use of the conjugation pattern. This is now logic internal to pytket.&lt;/p&gt;
&lt;p&gt;You can also define your own &lt;a class="reference external" href="https://docs.quantinuum.com/tket/api-docs/circuit.html#pytket.circuit.ConjugationBox"&gt;ConjugationBox&lt;/a&gt; by providing a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;compute&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;action&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;uncompute&lt;/span&gt;&lt;/code&gt; operation. Can you think of other cases where this construct would be useful?&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="some-mathematical-details"&gt;
&lt;h2&gt;Some Mathematical Details&lt;/h2&gt;
&lt;p&gt;So why does this work?&lt;/p&gt;
&lt;p&gt;Here we will show that if we have a controlled gate whose base gates fits the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ConjugationBox&lt;/span&gt;&lt;/code&gt; pattern then it is only necessary to control on the central &lt;span class="math notranslate nohighlight"&gt;\(A\)&lt;/span&gt; operation.&lt;/p&gt;
&lt;p&gt;Recall the the form of the conjugation pattern&lt;/p&gt;
&lt;div class="math-wrapper docutils container"&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[
\begin{equation}
U_c = V \, A \, V^\dagger \, .
\end{equation}
\]&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To avoid ambiguity in what follows we will denote a controlled-&lt;span class="math notranslate nohighlight"&gt;\(P\)&lt;/span&gt; operation as &lt;span class="math notranslate nohighlight"&gt;\(C[P]\)&lt;/span&gt; where &lt;span class="math notranslate nohighlight"&gt;\(P\)&lt;/span&gt; is some unitary operator.&lt;/p&gt;
&lt;p&gt;Now we want to show that&lt;/p&gt;
&lt;div class="math-wrapper docutils container"&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[
\begin{equation}
C[U_c] = C[V \, A \, V^\dagger] = (I \otimes V) C[A] (I \otimes V^\dagger)\, .
\end{equation}
\]&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A controlled-&lt;span class="math notranslate nohighlight"&gt;\(P\)&lt;/span&gt; operation can be expanded out as follows&lt;/p&gt;
&lt;div class="math-wrapper docutils container"&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[
\begin{equation}
C[P]= |0\rangle\langle 0| \otimes I + |1\rangle\langle1| \otimes P \, .
\end{equation}
\]&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To prove our result let’s take the right hand side of our target equation and expand the &lt;span class="math notranslate nohighlight"&gt;\(C[A]\)&lt;/span&gt; term.&lt;/p&gt;
&lt;div class="math-wrapper docutils container"&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[\begin{split}
\begin{align}
(I \otimes V) C[A] (I \otimes V^\dagger) &amp;amp;= (I \otimes V ) \,( |0\rangle\langle 0| \otimes I + |1\rangle\langle1| \otimes A )\, (I \otimes V^\dagger) \\
&amp;amp;= |0\rangle\langle 0| \otimes \cancelto{I}{V \, I \, V^\dagger} + |1\rangle\langle1| \otimes V \, A \, V^\dagger \\
\implies (I \otimes V) C[A] (I \otimes V^\dagger) &amp;amp;= |0\rangle\langle 0| \otimes I + |1\rangle\langle1| \otimes U_c = C[U_c]
\end{align}
\end{split}\]&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;A. Cowtan, S. Dilkes, R. Duncan, W. Simmons, and
S. Sivarajah, “Phase gadget synthesis for shallow circuits,” in 16th International Conference on Quantum
Physics and Logic 2019. Open Publishing Association,
2019, pp. 213–228&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://docs.quantinuum.com/tket/blog/posts/controlled_gates/"/>
    <summary>Last week brought a new pytket 1.21.0 release! See the changelog for a rundown of all the new features and fixes. This blog will focus on improvements to controlled gates in pytket with the new ConjugationBox feature enabling some key circuit primitives to be implemented far more efficiently. There are also some improvements to how controlled gates are displayed in the circuit renderer.</summary>
    <published>2023-10-24T00:00:00+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://docs.quantinuum.com/tket/blog/</id>
  <title>TKET Developer Blog - Posts in Release</title>
  <updated>2025-03-03T22:03:27.715636+00:00</updated>
  <link href="https://docs.quantinuum.com/tket/blog/"/>
  <link href="https://docs.quantinuum.com/tket/blog/blog/category/release/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.io/" version="0.11.12">ABlog</generator>
  <entry>
    <id>https://docs.quantinuum.com/tket/blog/posts/september_release_pytket/</id>
    <title>September Release Notes (pytket)</title>
    <updated>2023-09-08T00:00:00+00:00</updated>
    <author>
      <name>Callum Macpherson</name>
    </author>
    <content type="html">&lt;section id="september-release-notes-pytket"&gt;

&lt;p&gt;The September release brings typing improvements, custom control states in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QControlBox&lt;/span&gt;&lt;/code&gt;, equality checking for pytket boxes and more.&lt;/p&gt;
&lt;section id="pytket-1-19-0"&gt;
&lt;h2&gt;pytket 1.19.0&lt;/h2&gt;
&lt;section id="new-features-changelog"&gt;
&lt;h3&gt;New Features (&lt;a class="reference external" href="https://docs.quantinuum.com/tket/api-docs/changelog.html"&gt;Changelog&lt;/a&gt;)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#typing-improvements-for-compiled-pytket-modules"&gt;&lt;span class="xref myst"&gt;Typing for compiled modules&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#custom-control-states-in-qcontrolbox"&gt;&lt;span class="xref myst"&gt;Custom control states in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QControlBox&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#new-conjugationbox-construction"&gt;&lt;span class="xref myst"&gt;New &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ConjugationBox&lt;/span&gt;&lt;/code&gt; construction&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#equality-checking-for-all-box-types"&gt;&lt;span class="xref myst"&gt;Equality checking implemented for all boxes&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#every-pytket-op-now-has-an-is-clifford-method"&gt;&lt;span class="xref myst"&gt;Every pytket &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Op&lt;/span&gt;&lt;/code&gt; now has an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;is_clifford&lt;/span&gt;&lt;/code&gt; method&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#qubitpaulitensor-class"&gt;&lt;span class="xref myst"&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QubitPauliTensor&lt;/span&gt;&lt;/code&gt; class is now available in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytket.pauli&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="fixes-1-19-0"&gt;
&lt;h3&gt;Fixes (1.19.0)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;It is now possible to create an empty &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;BackendResult&lt;/span&gt;&lt;/code&gt; object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Performance fix for symbolic angle squashing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="update-fixes-1-19-1"&gt;
&lt;h3&gt;Update - Fixes (1.19.1)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Fix for a regression in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RebaseCustom&lt;/span&gt;&lt;/code&gt;. The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RebaseCustom&lt;/span&gt;&lt;/code&gt; pass would fail to convert circuits containing TK2 gates due to a change released in a previous version. This is now fixed in 1.19.1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Circuit.symbol_substitution&lt;/span&gt;&lt;/code&gt; for circuits containing box types that don’t support symbol substitution. Boxes which don’t support symbol substitution include the &lt;a class="reference external" href="https://docs.quantinuum.com/tket/user-guide/manual/manual_circuit.html#boxes-for-unitary-synthesis"&gt;unitary synthesis boxes&lt;/a&gt; and &lt;a class="reference external" href="https://docs.quantinuum.com/tket/user-guide/manual/manual_assertion.html"&gt;assertion boxes&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="typing-improvements-for-compiled-pytket-modules"&gt;
&lt;h3&gt;Typing improvements for compiled pytket modules&lt;/h3&gt;
&lt;p&gt;In previous versions of pytket, type information was not available for any of the compiled modules, which represent a large part of the library.&lt;/p&gt;
&lt;p&gt;For this reason, when using type checkers such as mypy or pyright, it was necessary to use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;#&lt;/span&gt; &lt;span class="pre"&gt;type:&lt;/span&gt; &lt;span class="pre"&gt;ignore&lt;/span&gt;&lt;/code&gt; statements like the following.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytket.circuit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CircBox&lt;/span&gt; &lt;span class="c1"&gt;# type: ignore&lt;/span&gt;

&lt;span class="n"&gt;my_circbox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CircBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This also meant that certain type hints and auto complete feature were not available to developers when using compiled modules such as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytket.circuit&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pytket.passes&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;pytket now includes type information for all compiled modules via automatically generated type stub files. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;#&lt;/span&gt; &lt;span class="pre"&gt;type:&lt;/span&gt; &lt;span class="pre"&gt;ignore&lt;/span&gt;&lt;/code&gt; statements are no longer needed. This means that developers can use type checkers more freely and take advantage of type hints and autocomplete when working with pytket.&lt;/p&gt;
&lt;p&gt;Note that using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;#&lt;/span&gt; &lt;span class="pre"&gt;type:&lt;/span&gt; &lt;span class="pre"&gt;ignore&lt;/span&gt;&lt;/code&gt; does not suppress type information if it is available. This means that type checking runs that were previously passing may now fail if the usage of objects from compiled modules is deemed improper by the type checker.&lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;In order to use some of the &lt;a class="reference external" href="https://docs.quantinuum.com/tket/api-docs/extensions.html"&gt;pytket extension modules&lt;/a&gt; with pytket 1.19.0 or newer, you will need to use a version of the extension package that was released in September 2023 or later. This is due to the typing changes in the pytket 1.19.0 release.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="custom-control-states-in-qcontrolbox"&gt;
&lt;h3&gt;Custom control states in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QControlBox&lt;/span&gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In pytket &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QControlBox&lt;/span&gt;&lt;/code&gt; provides an interface for users to define controlled unitary operations.&lt;/p&gt;
&lt;p&gt;Given a pytket &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Op&lt;/span&gt;&lt;/code&gt; we can define a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QControlBox&lt;/span&gt;&lt;/code&gt; as follows&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytket.circuit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OpType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QControlBox&lt;/span&gt;

&lt;span class="n"&gt;s_gate_op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cccs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QControlBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s_gate_op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# define a CCCS gate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here we have defined &lt;span class="math notranslate nohighlight"&gt;\(S\)&lt;/span&gt; gate controlled on 3 qubits. This means that an S will be applied when all 3 control qubits are in the &lt;span class="math notranslate nohighlight"&gt;\(|1\rangle\)&lt;/span&gt; state.&lt;/p&gt;
&lt;p&gt;However prior to the 1.19 release a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QControlBox&lt;/span&gt;&lt;/code&gt; could only be defined using the “all &lt;span class="math notranslate nohighlight"&gt;\(|1\rangle\)&lt;/span&gt;” control state.&lt;/p&gt;
&lt;p&gt;This has now changed and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QControlBox&lt;/span&gt;&lt;/code&gt; now accepts a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;control_state&lt;/span&gt;&lt;/code&gt; argument. If no &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;control_state&lt;/span&gt;&lt;/code&gt; argument is provided then the default “all &lt;span class="math notranslate nohighlight"&gt;\(|1\rangle\)&lt;/span&gt;” state is used. Lets define a controlled-&lt;span class="math notranslate nohighlight"&gt;\(S\)&lt;/span&gt; gate with a control state of &lt;span class="math notranslate nohighlight"&gt;\(|010\rangle\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytket.circuit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OpType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QControlBox&lt;/span&gt;

&lt;span class="n"&gt;s_gate_op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;custom_cccs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QControlBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s_gate_op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;control_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
&lt;span class="c1"&gt;# Equivalent to the above (using an integer control_state)&lt;/span&gt;
&lt;span class="c1"&gt;# custom_cccs = QControlBox(op, 3, control_state=2)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now the &lt;span class="math notranslate nohighlight"&gt;\(S\)&lt;/span&gt; gate will be applied to the target when the three control qubits are in the &lt;span class="math notranslate nohighlight"&gt;\(|010\rangle\)&lt;/span&gt; state.&lt;/p&gt;
&lt;p&gt;These sorts of gates appear frequently in quantum algorithms. Here is a simple example of an LCU (Linear combination of unitaries) circuit.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://docs.quantinuum.com/tket/blog/_images/lcu_diagram.png" /&gt;&lt;/p&gt;
&lt;p&gt;This circuit can be used to calculate the expectation value of the sum of &lt;span class="math notranslate nohighlight"&gt;\(U_a\)&lt;/span&gt; and &lt;span class="math notranslate nohighlight"&gt;\(U_b\)&lt;/span&gt;. Here the empty circle in the second control gates denotes a “0-controlled” gate.&lt;/p&gt;
&lt;div class="math-wrapper docutils container"&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[
\begin{equation}
 \langle U_a + U_b \rangle =  \langle  \psi| U_{a} + U_{b} | \psi \rangle
\end{equation}
\]&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Suppose we create a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CircBox&lt;/span&gt;&lt;/code&gt; for the &lt;span class="math notranslate nohighlight"&gt;\(U_a\)&lt;/span&gt; operation. We can then construct a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QControlBox&lt;/span&gt;&lt;/code&gt; for the 0-controlled &lt;span class="math notranslate nohighlight"&gt;\(U_a\)&lt;/span&gt; as follows&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytket.circuit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CircBox&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QControlBox&lt;/span&gt;

&lt;span class="n"&gt;ub_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CircBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="n"&gt;zero_controlled_ub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QControlBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ub_box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;control_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="every-pytket-op-now-has-an-is-clifford-method"&gt;
&lt;h3&gt;Every pytket &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Op&lt;/span&gt;&lt;/code&gt; now has an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;is_clifford&lt;/span&gt;&lt;/code&gt; method&lt;/h3&gt;
&lt;p&gt;Clifford circuits are an important class of quantum circuits known to exhibit efficient classical simulation.&lt;/p&gt;
&lt;p&gt;A Clifford gate is an element of the Clifford group which can be generated by the &lt;span class="math notranslate nohighlight"&gt;\(\{H, S, CX\}\)&lt;/span&gt; operations. Such operations map Pauli operations &lt;span class="math notranslate nohighlight"&gt;\(P\)&lt;/span&gt; to other Pauli operations &lt;span class="math notranslate nohighlight"&gt;\(P'\)&lt;/span&gt;  when conjugated as follows&lt;/p&gt;
&lt;div class="math-wrapper docutils container"&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[
\begin{equation}
P' = C \, P \, C^\dagger \, .
\end{equation}
\]&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For instance a Pauli &lt;span class="math notranslate nohighlight"&gt;\(X\)&lt;/span&gt; can be transformed to a Pauli &lt;span class="math notranslate nohighlight"&gt;\(Z\)&lt;/span&gt; by conjugating with a Hadamard Gate.&lt;/p&gt;
&lt;div class="math-wrapper docutils container"&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[
\begin{equation}
X = H \, Z \, H^\dagger = H \, Z \, H \, .
\end{equation}
\]&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Given a pytket &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Op&lt;/span&gt;&lt;/code&gt; we could check whether it was a Clifford type operation with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Op.is_clifford_type&lt;/span&gt;&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytket.circuit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OpType&lt;/span&gt;

&lt;span class="n"&gt;s_gate_op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s_gate_op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_clifford_type&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This returns &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;True&lt;/span&gt;&lt;/code&gt;, the &lt;span class="math notranslate nohighlight"&gt;\(S\)&lt;/span&gt; gate is a well known Clifford gate.&lt;/p&gt;
&lt;p&gt;However &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Op.is_clifford_type&lt;/span&gt;&lt;/code&gt; is limited as it only checks whether the underlying &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OpType&lt;/span&gt;&lt;/code&gt; is Clifford. This check would not be able to handle the case of parameterised gates that have Clifford angles.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;rz_clifford_op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OpType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Rz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;rz_clifford_op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_clifford_type&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here we have defined the Rz op with the &lt;span class="math notranslate nohighlight"&gt;\(1\)&lt;/span&gt; rotation parameter (equivalent to 1 half turn).
The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;is_clifford_type&lt;/span&gt;&lt;/code&gt; method will return &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;False&lt;/span&gt;&lt;/code&gt; here as the Rz gate is not in general a Clifford gate.&lt;/p&gt;
&lt;p&gt;However in pytket 1.19 we can now use the more general &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Op.is_clifford()&lt;/span&gt;&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;rz_clifford_op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_clifford&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This method will now correctly identify the Rz gate as a Clifford by checking whether the parameter is a Clifford angle.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="qubitpaulitensor-class"&gt;
&lt;h3&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QubitPauliTensor&lt;/span&gt;&lt;/code&gt; class&lt;/h3&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QubitPauliTensor&lt;/span&gt;&lt;/code&gt; class is now exposed to pytket. A &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QubitPauliTensor&lt;/span&gt;&lt;/code&gt; is defined using a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QubitPauliString&lt;/span&gt;&lt;/code&gt; paired with a complex coefficient.&lt;/p&gt;
&lt;p&gt;This allows phase to be tracked when using the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;UnitaryTableau&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="equality-checking-for-all-box-types"&gt;
&lt;h3&gt;Equality checking for all box types&lt;/h3&gt;
&lt;p&gt;A pytket box represents a higher level subroutine that can be added to a quantum circuit. For more on the different types of box available in pytket, read the &lt;a class="reference internal" href="#../user-guide/manual/manual_circuit.html#boxes"&gt;&lt;span class="xref myst"&gt;user manual section&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After the pytket 1.19 release, every box type now allows for equivalence checking.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytket.circuit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Circuit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CircBox&lt;/span&gt;

&lt;span class="n"&gt;ghz_circ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Circuit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GHZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Construct two equivalent CircBox objects&lt;/span&gt;
&lt;span class="n"&gt;box1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CircBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ghz_circ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;box2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CircBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ghz_circ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;box1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;box2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This equality check will now return &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;True&lt;/span&gt;&lt;/code&gt; in pytket 1.19. In older versions of pytket, the equality check would return &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;False&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Being able to test for equivalence is useful for testing purposes. We can validate the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CircBox&lt;/span&gt;&lt;/code&gt; without decomposing it or having to defer to the underlying circuit with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CircBox.get_circuit()&lt;/span&gt;&lt;/code&gt; method.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="new-conjugationbox-construction"&gt;
&lt;h3&gt;New &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ConjugationBox&lt;/span&gt;&lt;/code&gt; construction&lt;/h3&gt;
&lt;p&gt;Another enhancement related to controlled gates is the new &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ConjugationBox&lt;/span&gt;&lt;/code&gt; feature. This allows us to find efficient decompositions for controlled gates when our base gate &lt;span class="math notranslate nohighlight"&gt;\(U_{\text{conj}}\)&lt;/span&gt; is of the form&lt;/p&gt;
&lt;div class="math-wrapper docutils container"&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[
\begin{equation}
U_\text{conj} = C \, A \, C^\dagger
\end{equation}
\]&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Where &lt;span class="math notranslate nohighlight"&gt;\(U_{\text{conj}},\, A\)&lt;/span&gt; and &lt;span class="math notranslate nohighlight"&gt;\(C\)&lt;/span&gt; are unitary operations.&lt;/p&gt;
&lt;p&gt;This compute (&lt;span class="math notranslate nohighlight"&gt;\(C\)&lt;/span&gt;), action (&lt;span class="math notranslate nohighlight"&gt;\(A\)&lt;/span&gt;), uncompute (&lt;span class="math notranslate nohighlight"&gt;\(C^\dagger\)&lt;/span&gt;) pattern occurs frequently in various applications of quantum computing. It can be shown that to construct a controlled &lt;span class="math notranslate nohighlight"&gt;\(U_{\text{conj}}\)&lt;/span&gt; operation it is only necessary to control on the central &lt;span class="math notranslate nohighlight"&gt;\(A\)&lt;/span&gt; operation.&lt;/p&gt;
&lt;p&gt;Enhancements to this feature will be added in a subsequent release to handle &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ConjugationBox&lt;/span&gt;&lt;/code&gt; objects inside &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QControlBox&lt;/span&gt;&lt;/code&gt;, enabling more efficient compilation.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://docs.quantinuum.com/tket/blog/posts/september_release_pytket/"/>
    <summary>The September release brings typing improvements, custom control states in QControlBox, equality checking for pytket boxes and more.</summary>
    <published>2023-09-08T00:00:00+00:00</published>
  </entry>
</feed>
